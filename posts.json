{"titles":[" Todo.txt: a Simple Tool to Manage Your Todo List"," Summary of ‚ÄúHyperfocus‚Äú by Chris Bailey"," Summary of ‚ÄùWhat Programming Is Never About‚Äù"," Focus vs. Seeking Novel Stimuli"," Notes on the Pluralsight course ‚ÄúAngular Best Practices‚Äù by Jim Cooper"," The Terminal Sparks Joy"," The Advice Trap: Reflection"],"content":"Hello üëã! Thanks for subscribing.\n\n## [Todo.txt: a Simple Tool to Manage Your Todo List](https://www.rockyourcode.com/todotxt-a-simple-tool-to-manage-your-todo-list/)\nPublished on: 2021-06-07\n\ntags: DevTools, Productivity\n\n\n\nI've been using **[Todo.txt][todotxt]** as a task management tool the last few days.\n\n![tototxt cli gif](https://raw.githubusercontent.com/todotxt/todo.txt-cli/master/.github/example.gif)\n\nThe main idea is to have a plain text file where you can list your tasks. There is a command-line utility that offers features to manage the todo list. Plus, applications for Android, iOS, Windows or the web exist, too.\n\nA complete [primer][primer] is available on [GitHub][primer]:\n\n![todotxt primer](https://github.com/todotxt/todo.txt/raw/master/description.svg)\n\n\nFor me, the tool proved to be a low-key way to manage my tasks that still gives me a good interface via a shell script.\n\n{{<rawhtml>}}<small><em>original images from <a href=\"http://todotxt.org/\">todotxt.org</a> and affliated GitHub repos</em></small>{{</rawhtml>}}\n\n## Links\n\n- [Todo.txt][todotxt]\n- [Todo.txt Primer][primer]\n\n[primer]: https://github.com/todotxt/todo.txt\n[todotxt]: http://todotxt.org/\n\n\n<hr />\n## [Summary of ‚ÄúHyperfocus‚Äú by Chris Bailey](https://www.rockyourcode.com/summary-of-hyperfocus-by-chris-bailey/)\nPublished on: 2021-06-06\n\ntags: Notes, Lab, Productivity, Books\n\n\nThese are my notes and summary from the book **[Hyperfocus][hyperfocus]** by Chris Bailey.\n\n## üöÄ The Book in 2 Sentences\n\nThe book teaches you about two kinds of focus: ‚Äúhyperfocus‚Äù and ‚Äúscatterfocus‚Äù. It offers tactics on how to build an environment that's conductive for better focus and why that's useful for you.\n\n## üé® Impressions\n\n### How I Discovered It\n\nLast week I bemoaned my [lack of focus](https://www.rockyourcode.com/remember-to-focus). I decided to learn more about how focus works to improve my strategies on becoming a better software developer.  \nThe book ‚ÄúHyperfocus‚Äù was one of the top results.\n\n### Who Should Read It?\n\nEveryone who's interested in improving the quality of their (work) life.\n\nThe book didn't contain a lot of brand-new information, but the author managed to package the material in a way that helped me put the advice into practice.\n\nThe text is a bit thin on the researches. The author also repeats himself often. The material could have been shortened.\n\n## ‚òòÔ∏è How the Book Changed Me\n\nI've thought that my chaotic environment (work from home with two children) is not conductive to ‚Äúdeep focus‚Äù. While I cannot avoid interruptions, I've learned that there are still tactics to improve my routine.\n\nThis is the first book on that topic that helped me _implement_ the knowledge on how to better focus.\n\n## ‚úçÔ∏è My Top 3 Quotes\n\n> Above all else I began to view attention as the most important ingredient we can add if we‚Äôre to become more productive, creative, and happy ‚Äî at work and at home.\n\n> Let‚Äôs say you find yourself with an hour to spend however you want. Take a step back to observe your life from afar.  \n> How would you want to see yourself occupying that time if it were sped up into a thirty-second video?  \n> Would you want to see yourself lying like a blob on the couch watching Sherlock on Netflix or mindlessly tapping on your tablet? Or would you rather watch a video of yourself poring over a hundred pages of a book?\n\n> Shrink your desired hyperfocus period until you no longer feel resistance to the ritual. Minimize the amount of time you‚Äôll dedicate to focusing on one task until you no longer feel mental resistance to it. Even setting a mental deadline of five minutes will likely be enough to get you started.\n\n## üìí My 3 Most Useful Learnings\n\n### Hyperfocus is a continous practice.\n\nIt's natural to seek out novel stimuli. Our brain chemistry favors that. If possible, control your environment to limit the amount of distractions.\n\nNegotiate with your inner bastard if you can't bring yourself to focus until you no longer feel resistance.\n\nPractice hyperfocus:\n\n> The most important aspect of hyperfocus is that only one productive or meaningful task consumes your attentional space.\n\nChoose a task, guard against upcoming distractions, focus on the object of your attention, _and_ bring your attention back when it wanders.\n\nRecharge. Take a break at least every 90 minutes.\n\n### You have limited attentional space.\n\nGuard your attention.\n\nConstant task-switching may feel good (‚Äúnovelty bias‚Äù). It hinders productivity, though.\n\nCheck for emails or messages only if you have the time, attention and energy to deal with whatever might come in. Keep a tally of how often you check for messages. Predecide when you'll check.\n\nExternalize your tasks and commitments by writing them down/keeping lists. Capture unresolved commitments and ideas and revisit them later.\n\nThere are four categories of tasks (think [Eisenhower Matrix][eisenhower]):\n\n- **necessary work**: unattractive, yet productive\n- **unnecessary work**: unproductive and unattractive (rearranging papers)\n- **distracting work**: stimulating, unproductive tasks (social media)\n- **purposeful work**: productivity sweet spot, engaging, useful work\n\nDivide your work into these two categories.\n\n|              | Unattractive     | Attractive       |\n| ------------ | ---------------- | ---------------- |\n| Productive   | necessary work   | purposeful work  |\n| Unproductive | unnecessary work | distracting work |\n\n**Be mindful of what you pay attention to.**\n\nUseful information is typically actionable and helps you to reach your goals. They can be either related to what you already know or completely unrelated.\n\n> If you‚Äôre in doubt about consuming something, ask yourself: How do you think your life will be different knowing this piece of information?\n\nAim for useful information (books, courses, etc.) and balanced information (both informative and entertaining, e.g., a TED talk, podcasts).\n\nGet things to bid for your attention. You cannot consume everything.\n\n### Scatterfocus for ideas and problem-solving.\n\nScatterfocus is mind-wandering with a purpose. When you have unresolved tasks (‚Äúopen loops‚Äù) your mind tends to revisit them ([‚ÄúZeigarnik Effect‚Äú][zeigarnik]).\n\nDo something that doesn't require your full attentional space, and let your mind solve problems. You might want to capture what comes up.\n\nMake it a habit. Go for a nature walk, visit an art gallery, etc.\n\n## Links\n\n- [Hyperfocus][hyperfocus] by Chris Bailey\n\n[zeigarnik]: https://en.wikipedia.org/wiki/Zeigarnik_effect\n[eisenhower]: https://en.wikipedia.org/wiki/Time_management#The_Eisenhower_Method\n[hyperfocus]: https://www.goodreads.com/book/show/36959766-hyperfocus\n\n\n<hr />\n## [Summary of ‚ÄùWhat Programming Is Never About‚Äù](https://www.rockyourcode.com/summary-of-what-programming-is-never-about/)\nPublished on: 2021-06-05\n\ntags: Lab, Notes\n\n\n[What Programming is Never About (Informal Lecture)][what] by Abner Coimbre is a 43 minute video about some fundamental software principles.\n\n[![What Programming is Never About (Informal Lecture)](https://i.ytimg.com/vi/Lzc3HcIgXis/sddefault.jpg)](https://youtube.com/watch?v=Lzc3HcIgXis 'What Programming is Never About (Informal Lecture)')\n\nHere is the gist of it.\n\n## Summary\n\n### What Is Programming\n\n- Dan North: write software to move information around ‚Äî information is the real deal\n- Noel: programming is about transforming data, process input data to create some output data\n\n## What Is Programming Never About\n\n- it's not about the code itself, but rather what you do with the code\n- educational materials put emphasis code\n- focus rather on problem solving\n- spending time on cleaning up ‚Äúmessy code‚Äù while you try to figure out the structure of your program is a waste of time\n- don't waste time thinking about the code instead of the problem: the end goal is not having clean code, it's having good, _working_ code\n- you only have to think about clean code insofar as it has an effect on the end product (bug-free, working code)\n\n## Links\n\n- [What Programming is Never About (Informal Lecture)][what] by Abner Coimbre\n\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/BjD3KhnTIkg\">Dim Hou</a></em></small>{{</rawhtml>}}\n\n[what]: https://youtube.com/watch?v=Lzc3HcIgXis\n\n\n<hr />\n## [Focus vs. Seeking Novel Stimuli](https://www.rockyourcode.com/focus-vs-seeking-novel-stimuli/)\nPublished on: 2021-06-04\n\ntags: Reading, Thoughts\n\n\nI started to read the book **[Hyperfocus][hyperfocus]** by Chris Bailey.\n\nOne part stood out to me yesterday:\n\n> [... the brain] has a built-in ‚Äúnovelty bias.‚Äù Whenever we switch between tasks, it rewards us with dopamine [...]\n\n\n> Continually seeking novel stimuli makes us feel more productive ‚Äî after all, we‚Äôre doing more  in each moment. But again, just because we‚Äôre busier doesn‚Äôt mean we‚Äôre getting more accomplished.\n\nHaving a smart-phone with enabled notifications is an especially delicious distraction. So is checking e-mail or Slack. Or even switching work-related tasks.\n\n{{< image src=\"../static/img/luis-villasmil-mlVbMbxfWI4-unsplash.jpg\" alt=\"brown wooden dice on white, letters g and p\" position=\"center\" style=\"border-radius: 4px;\" >}}\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/mlVbMbxfWI4\">Luis Villasmil</a></em></small>{{</rawhtml>}}\n\n## Links\n\n- [Hyperfocus][hyperfocus] by Chris Bailey\n\n[remembertofocus]: https://www.rockyourcode.com/remember-to-focus/\n[hyperfocus]: https://www.goodreads.com/book/show/36959766-hyperfocus\n\n\n<hr />\n## [Notes on the Pluralsight course ‚ÄúAngular Best Practices‚Äù by Jim Cooper](https://www.rockyourcode.com/notes-on-pluralsight-angular-best-practices-by-jim-cooper/)\nPublished on: 2021-06-03\n\ntags: Lab, TypeScript, Angular\n\n\n## Notes\n\n### File and Folder Structure\n\n- **LIFT**: **L**ocate code quickly, **I**dentify code at a glance, **F**lattest structure possible, **T**ry to be DRY\n- organize code into feature areas\n- one item (service/component/directive) per file\n\n### General Coding Practices\n\n- Single Responsibility Principle (example: re-factor data access service to separate services for user and catalog)\n- prefer immutability\n- use small functions\n\n### Angular Module Organization\n\n- **App Module**\n- **Core Module**: shared singleton services, app-level components (e.g. navigation bar)\n- **Shared Module**: shared components, directives, and pipes (e.g., loading spinner)\n- **Feature Modules**: feature-level services, components, directives, and pipes\n\n### Angular Components Best Practices\n\n- use a **prefix selector** that matches the feature area of the component\n- guideline: move HTML and CSS to separate files if they are more than 3 lines long\n- declare input and output properties with decorators: `@Input` and `@Output`\n- delegate complex logic to separate services\n- class members order: put properties at the top, so they are easy to see\n- class members order: public class members first, private methods later\n- implement the interface for the lifecycle hooks\n- don't get too granular with creating components (example: HTML attributes that will be hidden behind a component)\n\n### Angular Services Best Practices\n\n- extract data access into services\n- services provided (injected) into a lazy feature module create their own instance of the injector: for singleton services create a separate ‚Äúcore‚Äù module (eagerly loadeded) that contains the root injector\n\n### Performance Best Practices\n\n- use AOT (Ahead-of-time) Compilation (use `--production` flag)\n- use lazy loading\n- **OnPush Change Detection** can help improve the performance, but it's not recommended to use it for the complete application (Angular will look at reference changes instead of property changes)\n- pipes are pure per default\n\n## Source\n\n- [Angular Best Practices][angularbestpractices] by Jim Cooper\n\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/uCMKx2H1Y38\">AbsolutVision</a></em></small>{{</rawhtml>}}\n\n[angularbestpractices]: https://www.pluralsight.com/courses/best-practices-angular\n\n\n<hr />\n## [The Terminal Sparks Joy](https://www.rockyourcode.com/the-terminal-sparks-joy/)\nPublished on: 2021-06-02\n\ntags: Thoughts, Unix, Vim, DevTools\n\n\nToday I realized that using tools like the terminal, Vim or Tmux ‚Äúspark joy‚Äù for me.\n\nThe term comes from Marie Kondo's bestselling book about [tidying up][dictionary]. It loosely translates from original Japanese to ‚Äùthe feeling of excitement and pleasure‚Äù.\n\nI thoroughly enjoy using Unix and its tools. For me, it's like a mini game where I can always learn something new and feel more productive.\n\nFor example, you can be productive with Vim after a few days. But even after using it for years, there are still things that I don't know about Vim.\n\nIn contrast, VS Code, the popular editor from Microsoft, does not speak to my heart. It's a fine tool, but totally bland.\n\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/WPTHZkA-M4I\">Erwan Hesry</a></em></small>{{</rawhtml>}}\n\n[dictionary]: https://www.dictionary.com/e/what-does-marie-kondo-mean-when-she-says-spark-joy/\n\n\n<hr />\n## [The Advice Trap: Reflection](https://www.rockyourcode.com/the-advice-trap-reflection/)\nPublished on: 2021-06-01\n\ntags: Notes, Communication, Leadership\n\n\nI'm reading the follow-up book from [‚ÄúThe Coaching Habit‚Äù][coachinghabit] by Michael Bungay Stanier, **[‚ÄúThe Advice Trap‚Äù][advicetrap]**.\n\nThe book is full of ideas on how to practice the tips from the author.\n\nOne tip regarding **reflection** is to take inspiration from the military's [After Action Review][aar]:\n\n- What was supposed to happen?\n- What did happen?\n- And why the gap?\n- What worked?\n- What didn't work?\n\n{{< image src=\"../static/img/2021-06-01-gap.jpg\" alt=\"brown wooden dice on white, letters g and p\" position=\"center\" style=\"border-radius: 4px;\" >}}\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/ulqQgJRGVNc\">Brett Jordan</a></em></small>{{</rawhtml>}}\n\n[coachinghabit]: https://www.rockyourcode.com/notes-on-the-coaching-habit/\n[advicetrap]: https://www.goodreads.com/book/show/53127025-the-advice-trap\n[aar]: https://en.wikipedia.org/wiki/After-action_review\n\n\n<hr />\n\nThank you for reading my blog posts.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}