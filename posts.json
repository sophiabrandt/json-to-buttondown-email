{"titles":[" How to Setup React Typescript With Snowpack and Daisy UI"," Emptty ‚Äî a Minimal Display Manager"," Create a Blazingly Fast Static Site With Zola"," Recommended Resources for Learning Rust"," Build Faster Websites With Less JavaScript Using Astro (Tutorial)"," I'm Taking a Break"," TIL: How to Fix ‚ÄùCannot Read Termcap Database‚Äù With Tmux and Kitty on MacOs"],"content":"Hello üëã! Thanks for subscribing.\n\n\nHere are the articles from last week:\n\n## [How to Setup React Typescript With Snowpack and Daisy UI](https://www.rockyourcode.com/how-to-setup-react-typescript-with-snowpack-and-daisyui/)\nPublished on: 2021-08-31\n\ntags: React.js, TypeScript\n\n\nThis weekend I wanted to setup a new playground for testing out some React concepts.\n\nI've decided to use **[Snowpack][snowpack]** and **[Daisy UI][daisyui]**.\n\n[Snowpack is a new build tool and bundler for JavaScript web applications.][csstricks] Under the hood it uses [esbuild][esbuild]. esbuild was written in Go and is very fast.\n\nSnowpack offers a development server and hot module replacement. It comes with a few plugins and templates to speed up setup, but its far from a zero-config tool.\n\nDaisyUI is a wrapper around [Tailwind CSS][tailwindcss], the utility-first CSS framework. DaisyUI offers convenient components that remind of the well-known [Bootstrap framework](https://www.bootstrap-ui.com/). For example, you can style a button with a simple `btn btn-primary` class in your HTML instead of stringing together several utility classes like `inline-block px-4 py-3 text-sm font-semibold text-center text-white uppercase transition duration-200 ease-in-out bg-indigo-500 rounded-md cursor-pointer hover:bg-indigo-600`.\n\nIn this article, I'll offer a \"Getting started\" for React with TypeScript and Daisy UI, using Snowpack.\n\nThe blog post borrows from [Adding Tailwind CSS to React Snowpack Project][sung] which helped me bring all parts together.\n\n## Snowpack Setup\n\nUse the snowpack template for creating a new app. You'll need [Node.js](https://nodejs.org/en/). Node.js comes with the command line utility `npx`.\n\nType the following command into your terminal:\n\n```bash\nnpx create-snowpack-app react-daisyui \\\n--template @snowpack/app-template-react-typescript \\\n--use-pnpm\n```\n\nHere we create a new application called `react-daiyui` with the template for React and TypeScript.\n\nI use [pnpm](https://pnpm.io) as the package manager of my choice, but you can use npm or yarn if you want.\n\n## Tailwind CSS\n\nNavigate into the project directory:\n\n```bash\ncd daisy-ui\n```\n\nSanity check! Try to start the project:\n\n```bash\npnpm run start # or npm run start\n```\n\nIt should now work.\n\nLet's install [Tailwind CSS][tailwindcss], [Daisy UI][daisyui] and its needed companions as development dependencies:\n\n```bash\npnpm add -D @snowpack/plugin-postcss postcss postcss-cli \\\ntailwindcss autoprefixer daisyui\n```\n\nNow we need to configure all parts so that they work together.\n\nAdjust the `snowpack.config.mjs` file in your project:\n\n```diff\n/** @type {import('snowpack').SnowpackUserConfig } */\nexport default {\n  mount: {\n    public: { url: '/', static: true },\n    src: { url: '/dist' },\n  },\n  plugins: [\n+    '@snowpack/plugin-postcss',\n   /* ... */\n   ],\n  devOptions: {\n+     tailwindConfig: './tailwind.config.js',\n  },\n  buildOptions: {\n    /* ... */\n  },\n};\n```\n\nCreate a new file called `postcss.config.js` with the following content:\n\n```js\nconst tailwindcss = require('tailwindcss')\nconst autoprefixer = require('autoprefixer')\n\nconst plugins = [tailwindcss, autoprefixer]\n\nmodule.exports = { plugins }\n```\n\n### Optional: cssnano\n\n[Sung Kim][sung] uses the package [cssnano](https://cssnano.co/) to optimize the production build. I hadn't heard of the tool before, but it looks useful.\n\nInstall via pnpm/npm:\n```bash\npnpm add -D cssnano\n```\n\nUse this `postcss.config.js`:\n```js\nconst cssnano = require(\"cssnano\")\nconst tailwindcss = require(\"tailwindcss\")\nconst autoprefixer = require(\"autoprefixer\")\n\nconst plugins =\n  process.env.NODE_ENV === \"production\"\n    ? [tailwindcss, autoprefixer, cssnano]\n    : [tailwindcss, autoprefixer]\n\nmodule.exports = { plugins }\n```\n\n## Tailwind Configuration\n\nNow we need to create a configuration file for Tailwind CSS. Create a new file called `tailwind.config.js`:\n\n```js\nmodule.exports = {\n  mode: 'jit',\n  purge: ['./public/**/*.html', './src/**/*.{js,jsx,ts,tsx,vue}'],\n  plugins: [require('daisyui')],\n}\n```\n\nIf you want, you can configure Daisy UI in this file, too. See the [config section ofthe Daisy UI docs](https://daisyui.com/docs/config).\n\nNow open the `src/index.css` file that snowpack generated for us. At the beginning of the file, add the following lines:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nSanity check! We can now add a new button that's styled with Daisy UI to our `src/App.tsx` file:\n\n```ts\ninterface AppProps {}\n\nfunction App({}: AppProps) {\n  return <button class=\"btn btn-primary\">DaisyUI Button</button>\n}\n\nexport default App\n```\n\nIt should now work!\n\n## Links\n\n- [Daisy UI][daisyui]\n- [Comparing the New Generation of Build Tools][csstricks] by Hugh Haworth\n- [Adding Tailwind CSS to React Snowpack Project][sung] by Sung M. Kim\n- [Snowpack: Tailwind Setup][snowtail]\n\n[csstricks]: https://css-tricks.com/comparing-the-new-generation-of-build-tools/#snowpack\n[esbuild]: https://esbuild.github.io/\n[snowpack]: https://www.snowpack.dev/\n[daisyui]: https://daisyui.com/\n[sung]: https://sung.codes/blog/2021/01/28/adding-tailwind-css-to-react-snowpack-project/\n[snowtail]: https://www.snowpack.dev/guides/tailwind-css\n[tailwindcss]: https://tailwindcss.com/\n\n\n<hr />\n## [Emptty ‚Äî a Minimal Display Manager](https://www.rockyourcode.com/emptty-a-minimal-display-manager/)\nPublished on: 2021-08-28\n\ntags: Unix\n\n\nMy daily driver for my home laptop is [Manjaro Linux][manjaro].  \nManjaro is a derivative of [Arch Linux][arch]. It offers convenience and a more beginner-friendly approach at the cost of some bloat.\n\nWhile Manjaro is slightly more stable than upstream Arch Linux, it's still possible to bonk a system update.\n\nThat's what happened to me three days ago.\n\nI was able to fix almost all issues _except_ my [display manager][dm].\n\nMy Manjaro i3 installation came with [LightDM][lightdm], a login manager with a [GTK-based greeter](https://archlinux.org/packages/?name=lightdm-gtk-greeter) that fit the Manjaro aesthetic.\n\nAfter trying to fix the installation for a [few hours](https://www.debugpoint.com/2021/03/failed-to-start-lightdm/), I gave up.\n\nMy display manager is not terribly important. I need to login and start my [X11 session][x11].\n\nA simple command-line interface is enough for me, I do not need a graphical interface to log into my laptop.\n\nI've discovered **[emptty][emptty]**, a display manager that works with [X11][x11] and comes with a `systemd` script out of the box if you install the tool via [pacman](https://wiki.archlinux.org/title/Pacman).\n\n![emptty display manager](https://raw.githubusercontent.com/tvrzna/emptty/master/screenshot.png)\n\n_source: [GitHub][emptty]_\n\nIt's pretty straightforward to install on Manjaro:\n\n```bash\npacman -S emptty\n```\n\nAfter that, enable the display manager with `systemd`:\n\n```bash\nsudo systemctl enable emptty\n```\n\n[emptty][emptty] works out of the box without fuss. The CLI is not very pretty. But it works, and it hopefully won't break on my next system update.\n\n[dm]: https://wiki.archlinux.org/title/Display_manager\n[emptty]: https://github.com/tvrzna/emptty/\n[x11]: https://wiki.archlinux.org/title/Xorg\n[lightdm]: https://wiki.archlinux.org/title/LightDM\n[manjaro]: https://manjaro.org/\n[arch]: https://archlinux.org/\n\n\n<hr />\n## [Create a Blazingly Fast Static Site With Zola](https://www.rockyourcode.com/create-a-blazingly-fast-static-site-with-zola/)\nPublished on: 2021-08-08\n\ntags: Rust\n\n\nEvery programming language needs its [static site generator][ssg]. Rust has [3 main contenders][logrocket], one of them is **[Zola][zola]**.\n\nI wanted to try out a Rust static site generator, so let's walk through getting started with Zola.\n\n## Installation\n\nZola offers several ways of [installing](https://www.getzola.org/documentation/getting-started/installation/), even a [Dockerfile](https://www.getzola.org/documentation/getting-started/installation/#docker).\n\nFor MacOs, you can use Brew:\n\n```bash\nbrew install zola\n```\n\nFor Arch Linux (yay!):\n\n```bash\npacman -S zola\n```\n\nThat was pretty painless.\n\n## Getting started\n\nThe docs are very straight-forward. If I want to make a blog, I can follow [the outlined steps](https://www.getzola.org/documentation/getting-started/overview/#initialize-site).\n\n```bash\nzola init myblog\n```\n\nNow you'll need to answer a few questions that are self-explanatory.\n\nZola offers the option to add [search functionality to your blog](https://www.getzola.org/documentation/content/search/)! That's something that I'm missing from [Hugo](https://gohugo.io/).\n\nThe [Getting Started Guide](https://www.getzola.org/documentation/getting-started/overview/) now goes on to explain how to create templates and a folder structure.\n\nThe templating language looks like dozen others ‚Äî which is a good thing!\n\nBut we want to add a theme and deploy the blog to [Netlify](https://netlify.com), so let's try that.\n\n## Install a Theme\n\nI want to put my blog on a free Netlify domain via GitHub.\n\nLet's initialize a new Git repository:\n\n```bash\ncd zolablog\ngit init\n```\n\n(You may need to [configure your username and email address](https://linuxize.com/post/how-to-configure-git-username-and-email/), if you haven't done so before.)\n\nAlthough the documentation does not spell it out, I'll add a theme as a [Git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules).\n\n[Why submodules?][hugogitsubmodule]\n\n> Submodules is, in most cases, your best choice. You can easily pull in updated theme(s) when needed.\n\nThe [feather theme][feather] looks pretty nice.\n\n```bash\ngit submodule add https://github.com/piedoom/feather themes/feather\n```\n\n(If you want to update a git submodule, run `git submodule update --rebase --remote`.)\n\nNow, we need to edit the `config.toml` to add the theme. Add this line:\n\n```toml\ntheme = \"feather\"\n```\n\nStart the zola development server:\n\n```bash\nzola serve\n```\n\nYou'll see your blog on `https://localhost:1111`.\n\n## Adding Blog Posts\n\nLuckily, the theme works out of the box (that wasn't the case with all themes).\n\nI'll add a new blog post with some dummy text. For that to work, I need to add a new markdown file into the `content` folder.\n\nWe need to add [some necessary frontmatter in `.toml` format](https://www.getzola.org/documentation/content/page/#front-matter):\n\nExample post (`content/first-post.md`):\n\n```markdown\n+++\ntitle = \"My First Blog Post\"\ndate = 2021-08-08\n+++\n\nBla bla bla\n```\n\nThat works!\n\n## Deploy to Netlify\n\nWe'll want to put that wonder of a blog on Netlify. Everyone should be able to see it!\n\nI'll use [GitHub](https://github.com/sophiabrandt/zolablog) for source control and deployment.\n\n[Create a new repository](https://docs.github.com/en/get-started/quickstart/create-a-repo).\n\nFollow the instructions to add a new [remote](https://www.git-tower.com/learn/git/faq/git-add-remote/).\n\nWe also need a `.gitignore` file which will ignore the `public` folder. The `public` folder is where the finished (built) blog will live, we don't need it in source control.\n\n```bash\necho \"public\" > .gitignore\n```\n\nThen we'll add our work to the Git staging area and push it to GitHub:\n\n```bash\ngit add -A\ngit commit -m \"Initial commit\"\ngit push origin main\n```\n\nZola has a section in the [documentation that deals with Netlify](https://www.getzola.org/documentation/deployment/netlify/).\n\nWe'll need a `netlify.toml` file:\n```toml\n# You do need the `publish` and `command` variables.\n[build]\npublish = \"public\"\ncommand = \"zola build\"\n\n[build.environment]\n# Set the version name that you want to use and Netlify will automatically use it.\nZOLA_VERSION = \"0.14.0\"\n\n# The magic for deploying previews of branches.\n# We need to override the base url with whatever url Netlify assigns to our\n# preview site.  We do this using the Netlify environment variable\n# `$DEPLOY_PRIME_URL`.\n\n[context.deploy-preview]\ncommand = \"zola build --base-url $DEPLOY_PRIME_URL\"\n```\n\nIf you run `zola build` locally, the tool will create a `public` folder which contains the blog. That's why we are using `publish = \"public\"`.\n\nThe Zola documentation does not explain how to setup Netlify and how to connect your GitHub repository to Netlify.\n\nBut we can follow the [guide on the Hugo documentation which also comes with a few screenshots](https://gohugo.io/hosting-and-deployment/hosting-on-netlify/). Please ignore everything that's specific to Hugo.\n\nWhen you use the Netlify webpage to import your GitHub repository, Netlify will automatically read the necessary settings from `netlify.toml`. That means that you can keep to the default settings.\n\n[Here's the result of our walkthrough](https://zolablog.netlify.app/).\n\n## Thoughts\n\nThe documentation is pretty solid. If you've worked with static site generators before, the site explains what you need to know.\n\nFor total beginners, the documentation is too sparse. But newbies probably won't use Zola anyway as it's unlikely that a new programmer will learn Rust as a first language.\n\nI like the sensible templating language and structure of a Zola project. Some of the extra features (link checker, search index) are neat.\n\nAll in all, I can see Zola as an alternative to Hugo.\n\n## Links\n\n- [Static Site Generators][ssg]\n- [Jamstack List of Site Generators][jamstack]\n- [Top 3 Rust static site generators and when to use them][logrocket]\n- [Zola][zola]\n- [Feather theme for Zola][feather]\n\n[ssg]: https://staticsitegenerators.net/\n[jamstack]: https://jamstack.org/generators/\n[logrocket]: https://blog.logrocket.com/top-3-rust-static-site-generators-and-when-to-use-them/\n[zola]: https://www.getzola.org/\n[hugogitsubmodule]: https://discourse.gohugo.io/t/adding-a-theme-as-a-submodule-or-clone/8789\n[feather]: https://www.getzola.org/themes/feather/\n[netlify]: https://www.getzola.org/documentation/deployment/netlify/\n\n\n<hr />\n## [Recommended Resources for Learning Rust](https://www.rockyourcode.com/recommended-resources-for-learning-rust/)\nPublished on: 2021-07-30\n\ntags: Rust, Lab\n\n\nA few days ago I decided to learn Rust. I was asking my tech circles for good resources and here's what I got:\n\n- [The Rust Programming Language Book][book]: the \"Book\" is a free resource on learning Rust, also available as paperback\n- [ULTIMATE Rust Lang Tutorial! - Getting Started](https://youtube.com/watch?v=OX9HJsJUDxA): first video of a YouTube series on going through [the \"Book\"][book]\n- [Take your first steps with Rust](https://docs.microsoft.com/en-ca/learn/paths/rust-first-steps/): free learning path by Microsoft\n- [Take your first steps with Rust: YouTube series by Nick Taylor](https://www.youtube.com/watch?v=eSVxhbbfT34)\n- [Rustlings](https://github.com/rust-lang/rustlings) - a set of exercises\n- [Rustlings egghead.io course](https://egghead.io/courses/learning-rust-by-solving-the-rustlings-exercises-a722): paid course\n- [Learn Rust With Entirely Too Many Linked Lists](https://rust-unofficial.github.io/too-many-lists/): explains advanced concepts like the borrow checker\n- [Rust by Example](https://doc.rust-lang.org/rust-by-example/index.html): a collection of runnable examples that illustrate various Rust concepts and standard libraries\n- [The Rust Programming Language](https://frontendmasters.com/courses/rust/): paid course by Richard Feldman\n\n[book]: https://doc.rust-lang.org/stable/book/\n\n\n<hr />\n## [Build Faster Websites With Less JavaScript Using Astro (Tutorial)](https://www.rockyourcode.com/build-faster-websites-with-less-javascript-using-astro-tutorial/)\nPublished on: 2021-07-18\n\ntags: JavaScript\n\n\nStatic site generators improve performance and security of web pages. They can be cached and it's easy to deploy them to a CDN (Content Delivery Network).\n\nStatic sites are an ideal candidate for web pages that don't require highly dynamic content, for example, blogs or portfolio pages.\n\n**[Astro][astro]** is a new static site builder for JavaScript developers that is lightning fast.\n\nIn the future, I can see it as a replacement for tools like Hugo (written in Go) or Gatsby (JavaScript + React).\n\nHere are some [benefits of using Astro][introduce]:\n\n> - Bring Your Own Framework (BYOF): Build your site using React, Svelte, Vue, Preact, web components, or just plain ol‚Äô HTML + JavaScript.\n> - 100% Static HTML, No JS: Astro renders your entire page to static HTML, removing all JavaScript from your final build by default.\n> - On-Demand Components: Need some JS? Astro can automatically hydrate interactive components when they become visible on the page. If the user never sees it, they never load it.\n> - Fully-Featured: Astro supports TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and any of your favorite npm packages.\n> - SEO Enabled: Automatic sitemaps, RSS feeds, pagination and collections take the pain out of SEO and syndication\n\nAstro is still in beta, but let's take a look at the current state of affairs.\n\n## Let's Build A Static Site With Astro\n\n### 1. Installation\n\nYou'll need Node.js - v12.20.0, v14.13.1, v16.0.0, or higher.\n\nIn the command-line terminal:\n\n```bash\nmkdir <project-name>\ncd <project-name>\nnpm init astro\n```\n\nChoose the blank starter project.\n\nFollow the instructions to install Astro.\n\nRun `npm run start` and the development server will start on port 3000 (navigate to `http://localhost:3000` in your web browser).\n\n### 2. Load Blog Posts from JSON Endpoint\n\nWe will now create dynamic pages from an API. The website [JSONPlaceholder](https://jsonplaceholder.typicode.com/) can give us 100 fake blog posts.\n\nWe need to use [Astro collections](https://docs.astro.build/core-concepts/collections) to generate multiple pages from a single template.\n\nIf you use Astro, you need to follow their [project structure](https://docs.astro.build/core-concepts/project-structure). Pages belong in the `src/pages` folder.\n\nCreate a new file as `src/pages/$posts.astro` (the `$`-sign is important as it tells Astro that this file will create a collection):\n\n```jsx\n// src/pages/$posts.astro\n---\n// Define the `collection` prop.\nconst { collection } = Astro.props;\n\n// Define a `createCollection` function.\n// In this example, we'll create a new page for every post.\nexport async function createCollection() {\n\tconst allPostsResponse = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const allPosts= await allPostsResponse.json();\n  return {\n    // `routes` defines the total collection of routes as data objects.\n    routes: allPosts.map((p) => {\n      const params = {title: p.title, id: p.id};\n      return params;\n    }),\n    // `permalink` defines the final URL for each route object defined in `routes`.\n    permalink: ({ params }) => `/posts/${params.id}`,\n    // `data` is now responsible for return the data for each page.\n    // Luckily we had already loaded all of the data at the top of the function,\n    // so we just filter the data here to group pages by first letter.\n    // If you needed to fetch more data for each page, you can do that here as well.\n    // Note: data() is expected to return an array!\n    async data({ params }) {\n      return [allPosts[params.id]];\n    },\n    // Note: The default pageSize is fine because technically only one data object\n    // is ever returned per route. We set it to Infinity in this example for completeness.\n    pageSize: Infinity,\n  };\n}\n---\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>{collection.params?.title}</title>\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\">\n    <link rel=\"stylesheet\" href=\"/style/global.css\">\n    <link rel=\"stylesheet\" href=\"/style/home.css\">\n\n    <style>\n    </style>\n</head>\n<body>\n    <main>\n\t\t<p>Post placeholder</p>\n    </main>\n</body>\n</html>\n```\n\nEverything inside the `---` dashes is _server_-side JavaScript. Here we use the JavaScript [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to load all blog posts from JSONPlaceholder.\n\nIf you open the browser on `http://localhost:3000/posts/1` you'll see `Post placeholder`, but not the content of the post.\n\nLet's remedy that and create a component for each blog post.\n\nCreate a new file: `src/components/Post.astro`:\n\n```jsx\n// src/components/Post.astro\n---\n\nexport interface Props {\n  title: string;\n  body: string\n}\n\nconst {title, body } = Astro.props\n---\n<header>\n    <div>\n        <img width=\"60\" height=\"80\" src=\"/assets/logo.svg\" alt=\"Astro logo\">\n        <h1>{title?.charAt(0).toUpperCase() + title?.slice(1)}</h1>\n    </div>\n</header>\n<article>\n    <section>\n    </section>\n\t{body}\n     <section>\n    </section>\n</article>\n\n<style>\n    header {\n        display: flex;\n        flex-direction: column;\n        gap: 1em;\n\t\tmax-width: 68ch;\n    }\n    article {\n        padding-top: 2em;\n        line-height: 1.5;\n\t\tmax-width: 68ch;\n    }\n    section {\n        margin-top: 2em;\n        display: flex;\n        flex-direction: column;\n        gap: 1em;\n        max-width: 68ch;\n\t\tword-wap: break-word;\n    }\n</style>\n```\n\nHere we define two [props](https://docs.astro.build/core-concepts/astro-components): `title` and `body`. If you take a look at [https://jsonplaceholder.typicode.com/posts](https://jsonplaceholder.typicode.com/posts), you'll see that each blog post has a title and the content as the `body` key.\n\nThe `Post.astro` file displays the title in the `h1` HTML tag and the blog post content in the `article` HTML tag. There is some basic [(scoped) CSS][scoped] styling in the `style` tag. (Please don't judge my CSS skills.)\n\nChange the `$posts.astro` file to import our post template and use it to display the blog post:\n\n```jsx\n// src/pages/$posts.astro\n\n---\nimport Post from '../components/Post.astro'\n// Define the `collection` prop.\nconst { collection } = Astro.props;\n\n//\n---\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>{collection.params?.title}</title>\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\">\n    <link rel=\"stylesheet\" href=\"/style/global.css\">\n    <link rel=\"stylesheet\" href=\"/style/home.css\">\n\n    <style>\n    </style>\n</head>\n<body>\n    <main>\n\t\t<Post title={collection.params?.title} body={collection.data[0]?.body}/>\n    </main>\n</body>\n</html>\n```\n\n(Complete file on [GitLab](https://gitlab.com/sophiabrandt/astro-build-demo/-/blob/collections/src/pages/$posts.astro)).\n\nNow go to `http://localhost:3000/post/3` and you should see one of our fake blog posts.\n\nYou can also [inspect the network tab in your browser](https://developer.chrome.com/docs/devtools/network/). You'll find no JavaScript (except the Astro hot reload development server which won't exist in production).\n\n## Let's Add React!\n\nBut what if we want to add a front-end framework like React or Vue? We can!\n\nFirst, we need to add the React renderer to Astro. [Open `astro.config.mjs` and add React to the `renderers` array](https://docs.astro.build/reference/configuration-reference):\n\n```js\n// astro.config.mjs\n\nexport default {\n  // projectRoot: '.',     // Where to resolve all URLs relative to. Useful if you have a monorepo project.\n  // pages: './src/pages', // Path to Astro components, pages, and data\n  // dist: './dist',       // When running `astro build`, path to final static output\n  // public: './public',   // A folder of static files Astro will copy to the root. Useful for favicons, images, and other files that don‚Äôt need processing.\n  buildOptions: {\n    // site: 'http://example.com',           // Your public domain, e.g.: https://my-site.dev/. Used to generate sitemaps and canonical URLs.\n    sitemap: true, // Generate sitemap (set to \"false\" to disable)\n  },\n  devOptions: {\n    // port: 3000,         // The port to run the dev server on.\n    // tailwindConfig: '', // Path to tailwind.config.js if used, e.g. './tailwind.config.js'\n  },\n  renderers: ['@astrojs/renderer-react'],\n}\n```\n\nStop your development server.  \nIn your terminal, type `npx astro --reload` to make sure that Astro loads the new settings.\n\nLet's try to display toast messages with [react-toastify](https://www.npmjs.com/package/react-toastify).\n\nWe need to install the package with npm:\n\n```bash\nnpm install --save react-toastify\n```\n\nCreate a new Toast component in `src/components/Toast.jsx`. I copied the basic example from the [documentation](https://github.com/fkhadra/react-toastify#the-gist) and renamed the component to `Toast` :\n\n```jsx\n// src/components/Toast.jsx\n\nimport React from 'react'\n\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nexport const Toast = () => {\n  const notify = () => toast('Astro is awesome!')\n\n  return (\n    <div>\n      <button style={{ marginTop: '2em', display: 'block' }} onClick={notify}>\n        Click Me\n      </button>\n      <ToastContainer />\n    </div>\n  )\n}\n```\n\nThe component shows a basic button with an onClickHandler. If you've written React before, this should look familiar.\n\nWe want to add the toast button to our blog posts.\n\nOpen `src/components/Post.astro`, import the Toast component and add it to the markup:\n\n```jsx\n// src/components/Post.astro\n\n---\nimport { Toast } from './Toast.jsx'\n\n//\n---\n<header>\n    <div>\n        <img width=\"60\" height=\"80\" src=\"/assets/logo.svg\" alt=\"Astro logo\">\n        <h1>{title?.charAt(0).toUpperCase() + title?.slice(1)}</h1>\n    </div>\n</header>\n<article>\n    <section>\n    </section>\n\t{body}\n\t<Toast/>\n     <section>\n    </section>\n</article>\n\n// styles\n```\n\nOpen one of your blog posts in the brower and click on the ugly looking button.\n\nNothing happens!\n\nThat's by design. Astro will render the HTML part but strips out _all_ JavaScript.\n\nIn our case, we want to ship JavaScript, so we need to enable it. Astro offers [partial hydration](https://docs.astro.build/core-concepts/component-hydration), so that we can load JavaScript sparingly for each component.\n\nWe'll keep it simple and enable JavaScript as soon as the page loads. Change the `<Toast />` markup to `<Toast client:load />`:\n\n```jsx\n// src/pages/$posts.astro\n\n//\n---\n//\n<article>\n    <section>\n    </section>\n\t{body}\n\t<Toast client:load />\n     <section>\n    </section>\n</article>\n\n// styles\n---\n\n```\n\n(Complete file on [GitLab](https://gitlab.com/sophiabrandt/astro-build-demo/-/blob/hydrate/src/components/Post.astro).)\n\nIf you click on the button now, it should show a sweet-looking toast message. Hooray!\n\n## Recap\n\nIn this article, we learned how to create a basic Astro website that loads dynamic data from an external API and uses a React component to enhance the page with JavaScript.\n\nAstro is still in beta and a few things don't work yet.\n\nFor example, in React you can use the [children prop to enable composition][composition]. This helps building re-usable components. Astro does not allow you to do that [and the team is unsure if they want to support it](https://github.com/snowpackjs/astro/issues/681).\n\nYou can build the Astro page for deployment with the command `npm run build`. Currently Astro does not build our collection (blog post) pages. [The collections API is still in flux](https://github.com/snowpackjs/astro/issues/501); expect breaking changes.\n\nAstro looks promising, but it's still early days.\n\n## Links\n\n- [Astro website][astro]\n- [Introducing Astro: Ship Less JavaScript][introduce]\n- [A Look at Building with Astro](https://css-tricks.com/a-look-at-building-with-astro/)\n- [Mastering React Component Composition using Children][composition]\n- [Saving the Day with Scoped CSS][scoped]\n- [GitLab: Astro demo](https://gitlab.com/sophiabrandt/astro-build-demo)\n\n[astro]: https://astro.build\n[introduce]: https://astro.build/blog/introducing-astro\n[scoped]: https://css-tricks.com/saving-the-day-with-scoped-css/\n[composition]: https://benmcmahen.com/mastering-react-component-composition/\n\n\n<hr />\n## [I'm Taking a Break](https://www.rockyourcode.com/im-taking-a-break/)\nPublished on: 2021-07-10\n\ntags: Lab, this_blog, Writing\n\n\nI'm taking a break from [daily blogging](https://www.rockyourcode.com/experiment-100-days-of-blogging).\n\nI've started my first job in tech as a full-time software developer on July 1st.  \nBefore that, I was employed as a tax officer where I chose to work part-time.\n\nThe transition to full-time work and a totally different industry doesn't leave me enough energy to work on my side-projects or to write blog articles.\n\nFor now, I will concentrate on getting up to speed in my day job.\n\n\n<hr />\n## [TIL: How to Fix ‚ÄùCannot Read Termcap Database‚Äù With Tmux and Kitty on MacOs](https://www.rockyourcode.com/til-how-to-fix-cannot-read-termcap-database-with-tmux-and-kitty-on-macos/)\nPublished on: 2021-07-03\n\ntags: TIL, MacOs, Tmux, DevTools\n\n\n## The Problem\n\nI use the [Kitty terminal emulator][kitty] with [Tmux][tmux] as my main tool for working with code.\n\nMy Tmux settings (`~/.tmux.conf`) contain the following lines to enable **true-color-support**:\n\n```\n# true colors\nset -g terminal-overrides ',xterm-256color:Tc'\nset -g default-terminal \"tmux-256color\"\nset -as terminal-overrides ',xterm*:sitm=\\E[3m'\n```\n\nWhen I open tmux on MacOs I get the following error message:\n\n```bash\nCannot read termcap database;\nusing dumb terminal settings.\n```\n\n## The Solution\n\n[Solution as a GitHub Gist][gist]:\n\n> macOS has ncurses version 5.7 which does not ship the terminfo description for tmux.\n\nDownload `terminfo` provided by the tmux maintainers:\n```bash\ncurl -sSL https://gist.github.com/nicm/ea9cf3c93f22e0246ec858122d9abea1 > tmux-256color\n```\n\nCompile `tmux-256color` terminal info:\n```bash\n/usr/bin/tic -xe tmux-256color terminfo.src\n```\n\nVerify that `terminfo` returns the correct value (it should _not_ be `null`):\n```bash\ninfocmp -x tmux-256color\n```\n\n## Links\n\n- [Installing tmux-256color for macOS][gist]\n- [Setting up True Color Support for Neovim and Tmux on Mac][jdhao]\n\n\n[jdhao]: https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/\n[gist]: https://gist.github.com/bbqtd/a4ac060d6f6b9ea6fe3aabe735aa9d95\n[kitty]: https://github.com/kovidgoyal/kitty  \n[tmux]: https://github.com/tmux/tmux\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}