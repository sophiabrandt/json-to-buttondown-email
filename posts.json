{"titles":[" Notes From Principles of Project Planning"],"content":"\n  <p>Hello üëã! Thanks for subscribing.</p>\n  \n  <h2><a href=https://www.rockyourcode.com/notes-from-principles-of-project-planning/>Notes From Principles of Project Planning</a></h2>\n  <p>Published on: 2021-03-16</p>\n  <p>tags: Lab, Notes</p>\n  <p><strong><a href=\"https://www.goodreads.com/book/show/35624940-principles-of-project-planning\">Principles of Project Planning</a></strong> by Don Burks is a book for junior developer on how to execute a software project from start to finish.</p>\n<p>The small booklet is easy to understand and contains some helpful tips for people new to the tech industry (coding bootcamp graduates, freshly minted CS graduates or other career changers).</p>\n<p>Here are my notes.</p>\n<h2 id=\"tldr\">TL;DR</h2>\n<p>Don&rsquo;t start a new project fresh from an idea. Take your time to plan the data, user specifications and design.</p>\n<h2 id=\"the-idea\">The Idea</h2>\n<blockquote>\n<p>No one hires you to code.</p>\n</blockquote>\n<blockquote>\n<p>In every case, you are being hired to build and/or maintain a product. Yes, you will likely write code to build and/or maintain that product, but as a point of fact the purpose for bringing yoyu on as a developer is for the product.</p>\n</blockquote>\n<p>Think about what the code is supposed to do.<br>\nIt&rsquo;s ok if your idea is not novel, if you can specialize, extend, enhance or internationalize an existing product.</p>\n<p>Don&rsquo;t pitch your idea to friends or family. They won&rsquo;t disagree with you.</p>\n<p>You need to validate your idea by strangers willing to give you money for your product.</p>\n<h2 id=\"data\">Data</h2>\n<blockquote>\n<p>Your data is your product.</p>\n</blockquote>\n<p>3 important questions:</p>\n<ol>\n<li>What data can I access or acquire?</li>\n<li>Can I correlate that data to something else?</li>\n<li>How do I pivot the correlation to provide value?</li>\n</ol>\n<h2 id=\"features-vs-benefits\">Features vs. Benefits</h2>\n<p>Users pay for benefits, not features.</p>\n<p>Universal values:</p>\n<ol>\n<li>Look good - we love to look good to others.</li>\n<li>Feel good - internal view on ourselves.</li>\n<li>Save time</li>\n<li>Save money</li>\n</ol>\n<p>Try to address at least one of those values.</p>\n<h2 id=\"user-specifications\">User Specifications</h2>\n<p><strong>User stories</strong> are a useful tool to help find a list of features to ship.</p>\n<blockquote>\n<p>As a &lt;role&gt;<br>\nI want to &lt;action&gt;,<br>\nBecause &lt;positive outcome&gt;.</p>\n</blockquote>\n<p>The ‚Äúbecause‚Äù serves to point out the specific benefit to the user.</p>\n<p><strong>User Scenarios</strong> describe the actual mechanic and situation in which a feature is experienced.</p>\n<blockquote>\n<p>Given &lt;some context&gt;,<br>\nWhen &lt;some action is taken&gt;,<br>\nThen &lt;some outcome occurs&gt;,<br>\nAnd &lt;some visible result is seem&gt;.</p>\n</blockquote>\n<p>Example:</p>\n<blockquote>\n<p>Given that I am logged out,<br>\nWhen In enter my credentials  and submit the login form,<br>\nThen I am logged into the site<br>\nAnd I can see a logout link.</p>\n</blockquote>\n<p><strong>User Specifications</strong> combine User Stories and User Scenarios:</p>\n<blockquote>\n<p>As a &lt;role&gt;<br>\nI want to &lt;action&gt;,<br>\nBecause &lt;positive outcome&gt;.<br>\nGiven &lt;some context&gt;,<br>\nWhen &lt;some action is taken&gt;,<br>\nThen &lt;some outcome occurs&gt;,<br>\nAnd &lt;some visible result is seem&gt;.</p>\n<p>Info:<br>\n&lt;Metadata about spec here&gt;</p>\n</blockquote>\n<p>The author recommends writing User Specs for all of the features.</p>\n<h2 id=\"feature-complete\">Feature Complete</h2>\n<p>Decide what ‚ÄúFeature Complete‚Äù means.</p>\n<ol>\n<li>Pick a deadline.</li>\n<li>Define what features will be delivered.</li>\n<li>Stick to it as much as possible.</li>\n</ol>\n<p>Real life has constraints ‚Äî you don&rsquo;t have infinite time and infinite budget.</p>\n<p><strong>Ship a product</strong>. Software is never done, but you still need to decide which core features you want to deploy.</p>\n<p>Glossary:</p>\n<ul>\n<li><strong>Testable</strong> ‚Äî implemented feature that needs to be tested to verify and validate</li>\n<li><strong>Shippable</strong> ‚Äî tested code that works and executes the feature as designed</li>\n<li><strong>Finished</strong> ‚Äî shippable code that&rsquo;s been reviewed, refactored, and revised until it is the best implementation which can currently be delivered.</li>\n</ul>\n<p><strong>Test your code.</strong></p>\n<h2 id=\"deployment\">Deployment</h2>\n<p>Make some decisions about how you plan to deploy your project: domain name, hosting, DevOps.</p>\n<p>Be aware of common pitfalls, e.g., <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>.</p>\n<h2 id=\"database\">Database</h2>\n<p>The most important technical decision is how you store your data: SQL or NoSQL database, Single vs. Multi-user databases.</p>\n<p><strong>Guiding principle</strong>: store your data the way you intend to query your data.</p>\n<p>Make sure to do your research if you use a DBaaS (Database-as-a-Service) to be clear about query limit thresholds and scaling.</p>\n<p>Design your data with an <strong>ERD</strong> (Entity Relationship Diagram). The data model is the core of your application.</p>\n<p>What are the major ‚Äúnouns‚Äù of your product? Look at your User Specs.</p>\n<p>The ERD is an initial sketch and not set in stone.</p>\n<p>When building the ERD, get input from all stakeholders.</p>\n<h2 id=\"technical-architecture\">Technical Architecture</h2>\n<p>Pick the <strong>programming language</strong> first. If you have many people working together, democratize the ability to contribute. Pick a language that allows most people to share ownership of the code-base.</p>\n<p>Weigh the learning curve for the stack you choose.</p>\n<p>What is the secret sauce of your application? How much of it do you plan on coding from scratch?</p>\n<p>Talk to other developers who may have used the libraries/frameworks you are considering.</p>\n<p>If you want to use a front-end framework, be aware that you are most likely duplicating your data models on the front-end. Most of your business logic is now going to be in the front-end as well.</p>\n<h2 id=\"routes\">Routes</h2>\n<p>Plan your routes/pages/views.</p>\n<p>If you build an API, what are the endpoints?</p>\n<p>If you build a mobile app, what are the ‚Äúviews‚Äù?</p>\n<p>Look at the User Specifications.</p>\n<blockquote>\n<p>If data models are nouns, routes are verbs.</p>\n</blockquote>\n<h2 id=\"design\">Design</h2>\n<ol>\n<li>Wireframing</li>\n<li>Storyboarding</li>\n<li>Design</li>\n</ol>\n<h3 id=\"wireframing\">Wireframing</h3>\n<p>Create a layout for your data. Demonstrate the significance and relationships of your data in a meaningful way.</p>\n<p>Don&rsquo;t invent data during wireframing. Allow the design to be sparse and minimal.</p>\n<p>Wireframe interactions.</p>\n<blockquote>\n<p>Every data point you plan in a wireframe must have a provenance, or source, in your ERD.</p>\n</blockquote>\n<ul>\n<li>Does my navigation scheme work with the rest of my content?</li>\n<li>Would a user understand the most important data points on this page?</li>\n<li>Have you accounted for every bit of UI interaction a user needs with the data you have presented?</li>\n</ul>\n<h3 id=\"storyboarding\">Storyboarding</h3>\n<blockquote>\n<p>Storyboarding is the practice of visually ordering elements of a story in chronological order.</p>\n</blockquote>\n<p>Plan out how a user will progress through your application. Build your navigation to match.</p>\n<p>Challenge your assumptions.</p>\n<h3 id=\"design-1\">Design</h3>\n<p>You are a developer, not a designer. The design matters.</p>\n<p>It&rsquo;s ok to use themes.</p>\n<p><strong>CRAP</strong>: Contrast, Repetition, Alignment, Proximity.</p>\n<p><strong>Contrast</strong> focuses our attention and highlights most important parts.</p>\n<p><strong>Repetition</strong> ties objects and images together.</p>\n<p><strong>Alignment</strong> indicates polish and strength. Applications are organically organized in rows and columns.</p>\n<p><strong>Proximity</strong> implies a connectedness. Group related things together.</p>\n<p>Put time and effort into making some informed decisions about the appearance and interactions of your product.</p>\n<h2 id=\"version-control\">Version Control</h2>\n<p>Use it.</p>\n<p>For Git, use a good branching strategy. <strong>Don&rsquo;t develop on the master/main branch.</strong></p>\n<p>Name your branch <em>feature/name-of-feature</em> or <em>bugfix/name-of-bug</em>.</p>\n<p>Test your work before you merge to master. Then test again on master.</p>\n<h2 id=\"scaffolding\">Scaffolding</h2>\n<p>Establish your dev environment and make sure that it works.</p>\n<p>Build static placeholder content first and make sure that your layout and styling are going to work.</p>\n<p>Solve layout problems now, not later.</p>\n<p>Start with your database models first. Use the REPL or CLI to test your queries before you build that business logic into your application.</p>\n<p>Code atomically.</p>\n<p>Methods and modules should follow the <strong>FIRST</strong> principle:</p>\n<ol>\n<li>Fast</li>\n<li>Independent</li>\n<li>Re-usable</li>\n<li>Simple</li>\n<li>Testable</li>\n</ol>\n<h2 id=\"communication\">Communication</h2>\n<p>Use project management tools to track tasks.</p>\n<p>For example, use a Trello board for User Stories. Use the attachment feature to like your ERD files and wireframes.</p>\n<p>Communication is critical: what tasks are being worked on, ideas about implementations, conversations about the best way to approach a problem, etc.</p>\n<p><strong>Be accountable</strong> to each other.</p>\n<p>The entire team is responsible for the delivery of the product.</p>\n<p>Set expectations accordingly.</p>\n<h2 id=\"technical-debt\">Technical Debt</h2>\n<blockquote>\n<p>Development work that you chose not to finish before shipping your product</p>\n</blockquote>\n<p>Use proper scoping and planning to avoid common reasons for technical debt.</p>\n<p>How much technical debt can the team justify leaving in a product when it is deployed?</p>\n<p>Find a balance between <em>done</em> and <em>deployable</em>.</p>\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n<li><a href=\"https://www.goodreads.com/book/show/35624940-principles-of-project-planning\">Principles of Project Planning</a> by Don Burks</li>\n</ul>\n\n  <hr />\n  <p>Thank you for reading my blog posts.</p>\n  <p>Don't hesitate to reach out via <a href=\"mailto:hi@rockyourcode.com\">email</a> or <a href=\"https://twitter.com/hisophiabrandt\">Twitter</a>!\n  "}