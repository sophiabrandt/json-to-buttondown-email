{"titles":[" Notes on Angular Component Communication (Pluralsight Course)"],"content":"\n  <p>Hello ðŸ‘‹! Thanks for subscribing.</p>\n  \n  <h2><a href=https://www.rockyourcode.com/notes-on-angular-component-communication-pluralsight/>Notes on Angular Component Communication (Pluralsight Course)</a></h2>\n  <p>Published on: 2021-05-01</p>\n  <p>tags: Lab, Angular, TypeScript</p>\n  <p><em>cover image from <a href=\"https://app.pluralsight.com/library/courses/angular-component-communication/table-of-contents\">PluralSight</a></em></p>\n<p>I&rsquo;m learning Angular right now â€“ as a React.js fangirl.</p>\n<p><a href=\"https://pluralsight.com\">Pluralsight</a> offered a free month of learning in April. I&rsquo;ve taken advantage of it.</p>\n<p>Here are some notes on the course <strong><a href=\"https://app.pluralsight.com/library/courses/angular-component-communication/table-of-contents\">Angular Component Communication</a></strong> by Deborah Kurata.</p>\n<h2 id=\"angular-component-communicationac\"><a href=\"https://app.pluralsight.com/library/courses/angular-component-communication/table-of-contents\">Angular Component Communication</a></h2>\n<h3 id=\"introduction\">Introduction</h3>\n<ul>\n<li>components need to communicate with each other, with its template, with the router, can use a service as an intermediary</li>\n<li>check <a href=\"https://github.com/DeborahK/Angular-Communication\">GitHub repository</a></li>\n</ul>\n<h3 id=\"communication-with-a-template\">Communication with a Template</h3>\n<ul>\n<li>template binding, e.g., <a href=\"https://angular.io/guide/interpolation\">interpolation</a>, <a href=\"https://angular.io/guide/property-binding\">property binding</a>, <a href=\"https://angular.io/guide/event-binding\">event binding</a></li>\n</ul>\n<p>Interpolation:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">currentCustomer</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Maria&#39;</span>\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">h3</span>&gt;<span style=\"color:#a6e22e\">Current</span> <span style=\"color:#a6e22e\">customer</span><span style=\"color:#f92672\">:</span> {{ <span style=\"color:#a6e22e\">currentCustomer</span> }}&lt;/<span style=\"color:#f92672\">h3</span>&gt;\n</code></pre></div><p>Property Binding:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">imageWidth</span>: <span style=\"color:#66d9ef\">number</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">50</span>;\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">img</span> <span style=\"color:#960050;background-color:#1e0010\">[</span><span style=\"color:#a6e22e\">style.width.px</span><span style=\"color:#960050;background-color:#1e0010\">]=&#39;</span><span style=\"color:#a6e22e\">imageWidth</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span>&gt;\n</code></pre></div><p>Event Binding</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">toggleImage</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">void</span> {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">showImage</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">!</span><span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">showImage</span>;\n}\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">button</span> <span style=\"color:#960050;background-color:#1e0010\">(</span><span style=\"color:#a6e22e\">click</span><span style=\"color:#960050;background-color:#1e0010\">)=&#39;</span><span style=\"color:#a6e22e\">toggleImage</span><span style=\"color:#960050;background-color:#1e0010\">()&#39;</span>&gt;<span style=\"color:#a6e22e\">Show</span> <span style=\"color:#a6e22e\">Image</span>&lt;/<span style=\"color:#f92672\">button</span>&gt;\n</code></pre></div><ul>\n<li><a href=\"https://angular.io/guide/structural-directives\">structural directives</a></li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">p</span> <span style=\"color:#960050;background-color:#1e0010\">*</span><span style=\"color:#a6e22e\">ngIf</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;condition&#34;</span>&gt;<span style=\"color:#a6e22e\">Show</span> <span style=\"color:#66d9ef\">this</span> <span style=\"color:#a6e22e\">sentence</span> <span style=\"color:#a6e22e\">unless</span> <span style=\"color:#a6e22e\">the</span> <span style=\"color:#a6e22e\">condition</span> <span style=\"color:#66d9ef\">is</span> <span style=\"color:#66d9ef\">true</span>.&lt;/<span style=\"color:#f92672\">p</span>&gt;\n</code></pre></div><ul>\n<li>&ldquo;two-way binding&rdquo; between template and component</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">listFilter</span>: <span style=\"color:#66d9ef\">string</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Cart&#39;</span>;\n\n<span style=\"color:#a6e22e\">onFilterChange</span>(<span style=\"color:#a6e22e\">filter</span>:<span style=\"color:#66d9ef\">string</span>)<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">void</span> {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">listFilter</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">filter</span>;\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">performFilter</span>(<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">listFilter</span>);\n}\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">input</span> <span style=\"color:#a6e22e\">type</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#39;text&#39;</span> <span style=\"color:#960050;background-color:#1e0010\">[</span><span style=\"color:#a6e22e\">ngModel</span><span style=\"color:#960050;background-color:#1e0010\">]=&#39;</span><span style=\"color:#a6e22e\">listFilter</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span> <span style=\"color:#960050;background-color:#1e0010\">(</span><span style=\"color:#a6e22e\">ngModelChange</span><span style=\"color:#960050;background-color:#1e0010\">)=&#39;</span><span style=\"color:#a6e22e\">onFilterChange</span><span style=\"color:#f92672\">=</span><span style=\"color:#960050;background-color:#1e0010\">($</span><span style=\"color:#a6e22e\">event</span><span style=\"color:#960050;background-color:#1e0010\">)&#39;</span> /&gt;\n</code></pre></div><ul>\n<li>getters and setters</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">private</span> <span style=\"color:#a6e22e\">_listFilter</span>: <span style=\"color:#66d9ef\">string</span>;\n\n<span style=\"color:#66d9ef\">get</span> <span style=\"color:#a6e22e\">listFilter</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">string</span> {\n  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">_listFilter</span>;\n}\n\n<span style=\"color:#66d9ef\">set</span> <span style=\"color:#a6e22e\">listFilter</span>(<span style=\"color:#a6e22e\">value</span>: <span style=\"color:#66d9ef\">string</span>) {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">_listFilter</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">value</span>;\n}\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">input</span> <span style=\"color:#a6e22e\">type</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#39;text&#39;</span> <span style=\"color:#960050;background-color:#1e0010\">[(</span><span style=\"color:#a6e22e\">ngModel</span><span style=\"color:#960050;background-color:#1e0010\">)]=&#39;</span><span style=\"color:#a6e22e\">listFilter</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span> /&gt;\n</code></pre></div><h3 id=\"viewchild-and-viewchildren\">ViewChild and ViewChildren</h3>\n<ul>\n<li><code>valueChanges</code> observable</li>\n<li><a href=\"https://angular.io/api/core/ViewChild\">ViewChild</a></li>\n<li>useful for <a href=\"https://angular.io/guide/forms\">template-driven forms</a></li>\n<li>remember that a component is first constructed (<code>constructor()</code>) and initialized(<code>ngOnInit()</code>), after that the view initializes and renders</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">@ViewChild</span>(<span style=\"color:#e6db74\">&#39;filterElement&#39;</span>) <span style=\"color:#a6e22e\">filterElementRef</span>: <span style=\"color:#66d9ef\">ElementRef</span>;\n\n<span style=\"color:#a6e22e\">ngAfterViewInit</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">void</span> {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">filterElementRef</span>.<span style=\"color:#a6e22e\">nativeElement</span>.<span style=\"color:#a6e22e\">focus</span>();\n}\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">input</span> <span style=\"color:#a6e22e\">type</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#39;text&#39;</span> <span style=\"color:#960050;background-color:#1e0010\">#</span><span style=\"color:#a6e22e\">filterElement</span> <span style=\"color:#960050;background-color:#1e0010\">[(</span><span style=\"color:#a6e22e\">ngModel</span><span style=\"color:#960050;background-color:#1e0010\">)]=&#39;</span><span style=\"color:#a6e22e\">listFilter</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span> /&gt;\n</code></pre></div><ul>\n<li>use <code>NgAfterViewInit()</code> to access the native HTML element (DOM)</li>\n<li>subscribe to changes</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/app.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">listFilter</span>: <span style=\"color:#66d9ef\">string</span>;\n\n<span style=\"color:#66d9ef\">@ViewChild</span>(<span style=\"color:#a6e22e\">NgModel</span>) <span style=\"color:#a6e22e\">filterInput</span>: <span style=\"color:#66d9ef\">NgModel</span>;\n\n<span style=\"color:#a6e22e\">ngAfterViewInit</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">void</span> {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">filterInput</span>.<span style=\"color:#a6e22e\">valueChanges</span>.<span style=\"color:#a6e22e\">subscribe</span>(() <span style=\"color:#f92672\">=&gt;</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">performFilter</span>(<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">listFilter</span>));\n}\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">input</span> <span style=\"color:#a6e22e\">type</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#39;text&#39;</span> <span style=\"color:#960050;background-color:#1e0010\">#</span><span style=\"color:#a6e22e\">filterElement</span> <span style=\"color:#960050;background-color:#1e0010\">[(</span><span style=\"color:#a6e22e\">ngModel</span><span style=\"color:#960050;background-color:#1e0010\">)]=&#39;</span><span style=\"color:#a6e22e\">listFilter</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span> /&gt;\n</code></pre></div><ul>\n<li><a href=\"https://angular.io/api/core/ViewChildren\">ViewChildren</a>: returns a QueryList of element or directive references</li>\n<li>method does not work well with <code>*ngIf</code>: in this case the <code>@ViewChild</code> might be undefined</li>\n</ul>\n<h2 id=\"communicating-with-a-child-component\">Communicating with a Child Component</h2>\n<ul>\n<li>parent component&rsquo;s template must contain the child component</li>\n<li>components connected via routing don&rsquo;t have a parent-child-relationship</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/parent.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">pm</span><span style=\"color:#960050;background-color:#1e0010\">-</span><span style=\"color:#a6e22e\">criteria</span>&gt;<span style=\"color:#f92672\">&lt;</span><span style=\"color:#960050;background-color:#1e0010\">/pm-criteria&gt;</span>\n\n<span style=\"color:#75715e\">// src/app/child.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">@Component</span>({\n<span style=\"color:#a6e22e\">selector</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;pm-criteria&#39;</span>,\n<span style=\"color:#a6e22e\">templateUrl</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;./criteria.component.html&#39;</span>,\n<span style=\"color:#a6e22e\">styleUrls</span><span style=\"color:#f92672\">:</span> [<span style=\"color:#e6db74\">&#39;./criteria.component.css&#39;</span>]})\n</code></pre></div><ul>\n<li>push from parent to child: <code>@Input</code>, Getter/Setter, <code>OnChanges</code></li>\n<li>pull from child to parent: <a href=\"https://angular.io/guide/template-reference-variables\">Template Reference Variable</a>, <code>@ViewChild</code></li>\n</ul>\n<p><code>@Input</code> example:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/parent.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">pm</span><span style=\"color:#960050;background-color:#1e0010\">-</span><span style=\"color:#a6e22e\">criteria</span> <span style=\"color:#960050;background-color:#1e0010\">[</span><span style=\"color:#a6e22e\">displayDetail</span><span style=\"color:#960050;background-color:#1e0010\">]=&#39;</span><span style=\"color:#a6e22e\">includeDetail</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span>&gt;<span style=\"color:#f92672\">&lt;</span><span style=\"color:#960050;background-color:#1e0010\">/pm-criteria&gt;</span>\n\n<span style=\"color:#75715e\">// src/app/parent.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">includeDetail</span>: <span style=\"color:#66d9ef\">boolean</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>;\n\n<span style=\"color:#75715e\">// src/app/child.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">@Input</span>() <span style=\"color:#a6e22e\">displayDetail</span>: <span style=\"color:#66d9ef\">boolean</span>;\n</code></pre></div><ul>\n<li>Getter/Setter: favor if child only reacts to changes to specific properties</li>\n<li><code>OnChanges</code>: favor if child reacts to any input property changes or if you need to access current and prior values</li>\n<li>Template Reference Variable: use from the parent&rsquo;s template</li>\n<li><code>@ViewChild</code> use from the parent&rsquo;s class</li>\n</ul>\n<h3 id=\"communicating-with-a-parent-component\">Communicating with a Parent Component</h3>\n<ul>\n<li>use cases: event notification (<code>@Output</code>), provide information to parent (Template Reference Variable, <code>@Viewchild</code>)</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/parent.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">pm</span><span style=\"color:#960050;background-color:#1e0010\">-</span><span style=\"color:#a6e22e\">criteria</span>\n  <span style=\"color:#960050;background-color:#1e0010\">[</span><span style=\"color:#a6e22e\">displayDetail</span><span style=\"color:#960050;background-color:#1e0010\">]=&#39;</span><span style=\"color:#a6e22e\">includeDetail</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span>\n  <span style=\"color:#960050;background-color:#1e0010\">(</span><span style=\"color:#a6e22e\">valueChange</span><span style=\"color:#960050;background-color:#1e0010\">)=&#39;</span><span style=\"color:#a6e22e\">onValueChange</span><span style=\"color:#960050;background-color:#1e0010\">($</span><span style=\"color:#a6e22e\">event</span><span style=\"color:#960050;background-color:#1e0010\">)&#39;</span>&gt;\n<span style=\"color:#f92672\">&lt;</span><span style=\"color:#960050;background-color:#1e0010\">/pm-criteria&gt;</span>\n\n<span style=\"color:#75715e\">// src/app/parent.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">includeDetail</span>: <span style=\"color:#66d9ef\">boolean</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>;\n\n<span style=\"color:#a6e22e\">onValueChange</span>(<span style=\"color:#a6e22e\">value</span>: <span style=\"color:#66d9ef\">string</span>)<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">void</span> {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">performFilter</span>(<span style=\"color:#a6e22e\">value</span>);\n}\n\n<span style=\"color:#75715e\">// src/app/child.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">@Output</span>() <span style=\"color:#a6e22e\">valueChange</span>: <span style=\"color:#66d9ef\">EventEmitter</span>&lt;<span style=\"color:#f92672\">string</span>&gt; <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">EventEmitter</span>&lt;<span style=\"color:#f92672\">string</span>&gt;();\n\n<span style=\"color:#66d9ef\">private</span> <span style=\"color:#a6e22e\">_listFilter</span>: <span style=\"color:#66d9ef\">string</span>;\n\n<span style=\"color:#66d9ef\">get</span> <span style=\"color:#a6e22e\">listFilter</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">string</span> {\n  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">_listFilter</span>;\n}\n\n<span style=\"color:#66d9ef\">set</span> <span style=\"color:#a6e22e\">listFilter</span>(<span style=\"color:#a6e22e\">value</span>: <span style=\"color:#66d9ef\">string</span>) {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">_listFilter</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">value</span>;\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">valueChange</span>.<span style=\"color:#a6e22e\">emit</span>(<span style=\"color:#a6e22e\">value</span>);\n}\n\n<span style=\"color:#75715e\">// src/app/app.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">input</span> <span style=\"color:#a6e22e\">type</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#39;text&#39;</span> <span style=\"color:#960050;background-color:#1e0010\">[(</span><span style=\"color:#a6e22e\">ngModel</span><span style=\"color:#960050;background-color:#1e0010\">)]=&#39;</span><span style=\"color:#a6e22e\">listFilter</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span> /&gt;\n</code></pre></div><h2 id=\"communication-through-a-service\">Communication Through a Service</h2>\n<ul>\n<li>state: view state, user information, entity data, user selection and input, etc.</li>\n<li>managing state: property bag, basic state management (via service), state management with notifications (services with <code>BehaviorSubject</code>), ngrx/Redux</li>\n</ul>\n<p>Example Property Bag:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-tsx\" data-lang=\"tsx\"><span style=\"color:#75715e\">// src/app/param.service.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">@Injectable</span>()\n<span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">ParamService</span> {\n  <span style=\"color:#a6e22e\">showImage</span>: <span style=\"color:#66d9ef\">boolean</span>\n  <span style=\"color:#a6e22e\">filterBy</span>: <span style=\"color:#66d9ef\">string</span>\n}\n\n<span style=\"color:#75715e\">// src/app/product.list.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">ProductListComponent</span> {\n  <span style=\"color:#66d9ef\">get</span> <span style=\"color:#a6e22e\">ShowImage</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">boolean</span> {\n    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">paramService</span>.<span style=\"color:#a6e22e\">showImage</span>\n  }\n  <span style=\"color:#66d9ef\">get</span> <span style=\"color:#a6e22e\">listFilter</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">string</span> {\n    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">paramService</span>.<span style=\"color:#a6e22e\">filterBy</span>\n  }\n  <span style=\"color:#66d9ef\">set</span> <span style=\"color:#a6e22e\">listFilter</span>(<span style=\"color:#a6e22e\">value</span>: <span style=\"color:#66d9ef\">string</span>) {\n    <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">paramservice</span>.<span style=\"color:#a6e22e\">filterBy</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">value</span>\n  }\n}\n</code></pre></div><ul>\n<li>property bags are great for retaining view state &amp; user selections</li>\n<li>property bags can also communicate with other components</li>\n<li>great for sharing data or other state &amp; communicating state changes</li>\n<li>caveat: any component can read and change values</li>\n<li>components are only notified of state changes if they use template binding</li>\n<li>consider service scope and lifetime</li>\n</ul>\n<h3 id=\"communicating-through-a-state-management-service\">Communicating Through a State Management Service</h3>\n<ul>\n<li>good for retrieving entity state and share with others</li>\n<li>purpose: provide state values, maintain and update state, observe state changes</li>\n<li>add a property to retain the list - on get: return the list - on get by id: return an item from the list - on create: add the item the list - on delete: remove the item from the list</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ts\" data-lang=\"ts\"><span style=\"color:#75715e\">// src/app/product.service.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">private</span> <span style=\"color:#a6e22e\">products</span>: <span style=\"color:#66d9ef\">IProduct</span>[];\n\n<span style=\"color:#a6e22e\">getProducts</span>()<span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">Observable</span>&lt;<span style=\"color:#f92672\">IProduct</span><span style=\"color:#960050;background-color:#1e0010\">[]</span>&gt; {\n  <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">products</span>) {\n    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">of</span>(<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">products</span>);\n  }\n  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">http</span>.<span style=\"color:#66d9ef\">get</span>&lt;<span style=\"color:#f92672\">IProduct</span><span style=\"color:#960050;background-color:#1e0010\">[]</span>&gt;(<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">productsUrl</span>)\n    .<span style=\"color:#a6e22e\">pipe</span>(\n      <span style=\"color:#a6e22e\">tap</span>(<span style=\"color:#a6e22e\">data</span> <span style=\"color:#f92672\">=&gt;</span> <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">data</span>))),\n      <span style=\"color:#a6e22e\">tap</span>(<span style=\"color:#a6e22e\">data</span> <span style=\"color:#f92672\">=&gt;</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">products</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">data</span>),\n      <span style=\"color:#a6e22e\">catchError</span>(<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">handleError</span>)\n      );\n}\n</code></pre></div><ul>\n<li>benefits: encapsulates retrieve and store operations, retains and shares state values, caches values, provides change notification for bound values using a getter</li>\n<li>cons: stale data, no explicit change notification, state is not immutable</li>\n</ul>\n<h3 id=\"communicating-through-service-notification\">Communicating Through Service Notification</h3>\n<ul>\n<li>you can use <code>Subject</code> or <code>BehaviorSubject</code> (multi-cast) to broadcast changes</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ts\" data-lang=\"ts\"><span style=\"color:#75715e\">// src/app/product-list.component.html\n</span><span style=\"color:#75715e\"></span>&lt;<span style=\"color:#f92672\">button</span> <span style=\"color:#a6e22e\">type</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#39;button&#39;</span>\n  <span style=\"color:#960050;background-color:#1e0010\">*</span><span style=\"color:#a6e22e\">ngFor</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#39;let product of products&#39;</span>\n  <span style=\"color:#960050;background-color:#1e0010\">(</span><span style=\"color:#a6e22e\">click</span><span style=\"color:#960050;background-color:#1e0010\">)=&#39;</span><span style=\"color:#a6e22e\">onSelected</span><span style=\"color:#960050;background-color:#1e0010\">(</span><span style=\"color:#a6e22e\">product</span><span style=\"color:#960050;background-color:#1e0010\">)&#39;</span>&gt;\n\n<span style=\"color:#75715e\">// src/app/product-list.component.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">onSelected</span>(<span style=\"color:#a6e22e\">product</span>: <span style=\"color:#66d9ef\">IProduct</span>) {\n  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">productService</span>.<span style=\"color:#a6e22e\">changeSelectedProduct</span>(<span style=\"color:#a6e22e\">product</span>);\n}\n\n<span style=\"color:#75715e\">// src/app/product.service.ts\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">private</span> <span style=\"color:#a6e22e\">selectedProductSource</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">Subject</span>&lt;<span style=\"color:#f92672\">IProduct</span>&gt;();\n<span style=\"color:#a6e22e\">selectedProductChanges$</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">selectedProductSource</span>.<span style=\"color:#a6e22e\">asObservable</span>();\n\n<span style=\"color:#a6e22e\">changeSelectedProduct</span>(<span style=\"color:#a6e22e\">selectedProduct</span>: <span style=\"color:#66d9ef\">IProduct</span>) {\n  <span style=\"color:#75715e\">// broadcast the notification\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">selectedProductSource</span>.<span style=\"color:#a6e22e\">next</span>(<span style=\"color:#a6e22e\">selectedProduct</span>);\n}\n\n<span style=\"color:#75715e\">// Component or Service\n</span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">onSelected</span>(<span style=\"color:#a6e22e\">product</span>: <span style=\"color:#66d9ef\">IProduct</span>) {\n  <span style=\"color:#75715e\">// listen for and respond to the notification\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">productService</span>.<span style=\"color:#a6e22e\">changeSelectedProduct</span>(<span style=\"color:#a6e22e\">product</span>);\n}\n\n</code></pre></div><h3 id=\"communicating-using-the-router\">Communicating Using the Router</h3>\n<ul>\n<li>route parameters: required, optional, query parameters</li>\n<li>benefits: simple, resulting URLs are bookmarkable &amp; sharable</li>\n<li>cons: parameters appear in the URL, not good for large amounts of data</li>\n</ul>\n<h2 id=\"thoughts\">Thoughts</h2>\n<p>Deborah Kurata is an excellent teacher who can break concepts down to a digestible level.<br>\nThe course slides and examples helped me immensely.</p>\n<p>All in all, the class proved to be fantastic for people new to Angular.</p>\n<p>I am sure that I will reference the course&rsquo;s <a href=\"https://github.com/DeborahK/Angular-Communication\">GitHub repository</a> in the future.</p>\n<h2 id=\"resources\">Resources</h2>\n<ul>\n<li><a href=\"https://app.pluralsight.com/library/courses/angular-component-communication/table-of-contents\">Angular Component Communication</a> Pluralsight course by <a href=\"https://twitter.com/deborahkurata\">Deborah Kurata</a></li>\n<li><a href=\"https://github.com/DeborahK/Angular-Communication\">GitHub repository</a></li>\n</ul>\n\n  <hr />\n  <p>Thank you for reading my blog posts.</p>\n  <p>Don't hesitate to reach out via <a href=\"mailto:hi@rockyourcode.com\">email</a> or <a href=\"https://twitter.com/hisophiabrandt\">Twitter</a>!\n  "}