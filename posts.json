{"titles":[" Use Vim for C# Development on Linux"],"content":"\n  <p>Hello ðŸ‘‹! Thanks for subscribing.</p>\n  \n  <h2><a href=https://www.rockyourcode.com/use-vim-for-c-sharp-development-on-linux/>Use Vim for C# Development on Linux</a></h2>\n  <p>Published on: 2021-01-12</p>\n  <p>tags: C-Sharp, Vim, DevTools</p>\n  <blockquote>\n<p>Vim Language Server Protocol support for C#</p>\n</blockquote>\n<p>If you&rsquo;re an avid Vim user, you&rsquo;ll likely try to use the terminal editor for <em>everything</em> text-related.<br>\nIn this post, I&rsquo;ll show you how to get convenient support for C# with Vim on Linux.</p>\n<p>C# is traditionally one of those programming languages that profit from an <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\">IDE</a>, an integrated development environment.</p>\n<p>Vim can still be a viable alternative if you need minimal features like type definitions or auto-completion.</p>\n<h2 id=\"install-netcore\">Install NET.Core</h2>\n<p>As an Arch Linux user, my first instinct is to install packages with the Arch package manager.<br>\nSomehow, this seems to <a href=\"https://github.com/OmniSharp/omnisharp-roslyn/issues/1667\">conflict with the language server we&rsquo;ll install in a later step</a>.</p>\n<p>Thus, I recommend a manual install. The <a href=\"https://wiki.archlinux.org/index.php/.NET_Core#Install_multiple_versions_manually\">Arch Linux wiki</a> explains how. The instructions work for other distributions, too.</p>\n<ol>\n<li>\n<p>Download the <a href=\"https://dot.net/v1/dotnet-install.sh\">dotnet-install.sh</a> script for Linux.</p>\n</li>\n<li>\n<p>Run the script for the stable version:</p>\n</li>\n</ol>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-sh\" data-lang=\"sh\">chmod +x dotnet-install.sh\n./dotnet-install.sh --install-dir /usr/share/dotnet -channel LTS -version latest\n</code></pre></div><p>(You might need <code>sudo</code> because the normal user does not have permissions for the <code>/usr/share/dotnet</code> folder.)</p>\n<h2 id=\"install-language-server\">Install Language Server</h2>\n<p>We need <strong><a href=\"https://github.com/OmniSharp/omnisharp-roslyn\">OmniSharp Roslyn</a></strong>, a cross-platform language server implementation.</p>\n<p>The README of the project is densely packed with information. I originality tried to build the executable from scratch because that&rsquo;s prominently featured. But it&rsquo;s <em>not</em> necessary and can lead to frustration.</p>\n<p>Go to the <a href=\"https://github.com/OmniSharp/omnisharp-roslyn/releases\">releases tab</a> and choose a suitable pre-build release.</p>\n<p>For example, download the 1.37.5 release for 64-bit Linux with <a href=\"https://curl.se\">curl</a> and extract it to <code>$HOME/.bin</code> folder:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-sh\" data-lang=\"sh\">curl -sL https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.37.5/omnisharp-linux-x64.tar.gz | tar xvzf - -C ~/home/.bin\n</code></pre></div><h2 id=\"install-lsp\">Install LSP</h2>\n<p>Vim needs a plugin for the <a href=\"https://github.com/Microsoft/language-server-protocol\">Language Server Protocol</a>.</p>\n<p>I am using <strong><a href=\"https://github.com/prabirshrestha/vim-lsp\">prabirshrestha/vim-lsp</a></strong>, an asynchronous implementation that works both in Vim 8 and NeoVim. The plugin uses VimL and thus has no external dependencies.</p>\n<p>Install with <a href=\"https://shapeshed.com/vim-packages/\">native package support</a> or a plugin manager of your choice. Example:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-sh\" data-lang=\"sh\">cd ~/vim/pack\ngit submodule init\ngit submodule add https://github.com/prabirshrestha/vim-lsp.git\ngit add .gitmodules vim/pack/prabirshrestha/vim-lsp\ngit commit\n</code></pre></div><p>Now register the OmniSharp Language Server. I&rsquo;ve copied my setup from <a href=\"https://hauleth.dev/post/vim-for-elixir/#completion-and-language-server\">an article by a fellow tech blogger (hauleth.dev)</a>. I created a new file in my Vim folder (<code>~/vim/plugin/lsp.vim</code>) with the following content:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-vim\" data-lang=\"vim\"><span style=\"color:#a6e22e\">func</span>! <span style=\"color:#a6e22e\">s</span>:<span style=\"color:#a6e22e\">setup_ls</span>(...) <span style=\"color:#a6e22e\">abort</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>    <span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">servers</span> = <span style=\"color:#a6e22e\">lsp</span>#<span style=\"color:#a6e22e\">get_whitelisted_servers</span>()<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>    <span style=\"color:#a6e22e\">for</span> <span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">server</span> <span style=\"color:#a6e22e\">in</span> <span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">servers</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">cap</span> = <span style=\"color:#a6e22e\">lsp</span>#<span style=\"color:#a6e22e\">get_server_capabilities</span>(<span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">server</span>)<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">has_key</span>(<span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">cap</span>, <span style=\"color:#e6db74\">&#39;completionProvider&#39;</span>)<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>            <span style=\"color:#a6e22e\">setlocal</span> <span style=\"color:#a6e22e\">omnifunc</span>=<span style=\"color:#a6e22e\">lsp</span>#<span style=\"color:#a6e22e\">complete</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">endif</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">has_key</span>(<span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">cap</span>, <span style=\"color:#e6db74\">&#39;hoverProvider&#39;</span>)<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>            <span style=\"color:#a6e22e\">setlocal</span> <span style=\"color:#a6e22e\">keywordprg</span>=:<span style=\"color:#a6e22e\">LspHover</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">endif</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">has_key</span>(<span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">cap</span>, <span style=\"color:#e6db74\">&#39;definitionProvider&#39;</span>)<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>            <span style=\"color:#a6e22e\">nmap</span> &lt;<span style=\"color:#a6e22e\">silent</span>&gt; &lt;<span style=\"color:#a6e22e\">buffer</span>&gt; <span style=\"color:#a6e22e\">gd</span> &lt;<span style=\"color:#a6e22e\">plug</span>&gt;(<span style=\"color:#a6e22e\">lsp</span>-<span style=\"color:#a6e22e\">definition</span>)<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">endif</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">if</span> <span style=\"color:#a6e22e\">has_key</span>(<span style=\"color:#a6e22e\">l</span>:<span style=\"color:#a6e22e\">cap</span>, <span style=\"color:#e6db74\">&#39;referencesProvider&#39;</span>)<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>            <span style=\"color:#a6e22e\">nmap</span> &lt;<span style=\"color:#a6e22e\">silent</span>&gt; &lt;<span style=\"color:#a6e22e\">buffer</span>&gt; <span style=\"color:#a6e22e\">gr</span> &lt;<span style=\"color:#a6e22e\">plug</span>&gt;(<span style=\"color:#a6e22e\">lsp</span>-<span style=\"color:#a6e22e\">references</span>)<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>        <span style=\"color:#66d9ef\">endif</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>    <span style=\"color:#a6e22e\">endfor</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#a6e22e\">endfunc</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#a6e22e\">augroup</span> <span style=\"color:#a6e22e\">LSC</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>    <span style=\"color:#a6e22e\">autocmd</span>!<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>    <span style=\"color:#a6e22e\">autocmd</span> <span style=\"color:#a6e22e\">User</span> <span style=\"color:#a6e22e\">lsp_setup</span> <span style=\"color:#a6e22e\">call</span> <span style=\"color:#a6e22e\">lsp</span>#<span style=\"color:#a6e22e\">register_server</span>({<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>                \\ <span style=\"color:#e6db74\">&#39;name&#39;</span>: <span style=\"color:#e6db74\">&#39;omnisharp-roslyn&#39;</span>,<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>                \\ <span style=\"color:#e6db74\">&#39;cmd&#39;</span>: {<span style=\"color:#a6e22e\">_</span>-&gt;[&amp;<span style=\"color:#a6e22e\">shell</span>, &amp;<span style=\"color:#a6e22e\">shellcmdflag</span>, <span style=\"color:#e6db74\">&#39;mono $HOME/.bin/omnisharp/OmniSharp.exe --languageserver&#39;</span>]},<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>                \\ <span style=\"color:#e6db74\">&#39;whitelist&#39;</span>: [<span style=\"color:#e6db74\">&#39;cs&#39;</span>]<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>                \\})<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>    <span style=\"color:#a6e22e\">autocmd</span> <span style=\"color:#a6e22e\">User</span> <span style=\"color:#a6e22e\">lsp_server_init</span> <span style=\"color:#a6e22e\">call</span> &lt;<span style=\"color:#a6e22e\">SID</span>&gt;<span style=\"color:#a6e22e\">setup_ls</span>()<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span>    <span style=\"color:#a6e22e\">autocmd</span> <span style=\"color:#a6e22e\">BufEnter</span> * <span style=\"color:#a6e22e\">call</span> &lt;<span style=\"color:#a6e22e\">SID</span>&gt;<span style=\"color:#a6e22e\">setup_ls</span>()<span style=\"color:#960050;background-color:#1e0010\">\n</span><span style=\"color:#960050;background-color:#1e0010\"></span><span style=\"color:#a6e22e\">augroup</span> <span style=\"color:#a6e22e\">END</span><span style=\"color:#960050;background-color:#1e0010\">\n</span></code></pre></div><p><em>Note</em>: You don&rsquo;t need to create a new file for the setup, of course. Just find a way to add the settings to Vim/NeoVim (for example, via <code>init.vim</code> configuration).</p>\n<p><em>Note</em>: If you installed OmniSharp into a different directory than <code>$HOME/.bin</code>, you need to adjust the <code>cmd</code> section.</p>\n<p><code>&amp;shell</code> and <code>&amp;shellcmdflag</code> are specific to <a href=\"https://github.com/prabirshrestha/vim-lsp\">vim-lsp</a> (and not really necessary on Linux):</p>\n<blockquote>\n<p>It is recommended to use &amp;shell with &amp;shellcmdflag when running script files that can be executed specially on windows where _.bat and _.cmd files cannot be started without running the shell first. This is common for executable installed by npm for nodejs.</p>\n</blockquote>\n<p><code>mono</code> is the utility that allows you to run <code>.exe</code> files under Linux. It should be on your machine thanks to the .NET Core installation.</p>\n<p>Now, as soon as you open a file with filetype <code>cs</code> (for C#), the language server will automatically kick in.<br>\nYou could type <code>K</code> (in normal mode) when you hover over a keyword, and you&rsquo;ll get some informations about the word under the cursor.</p>\n<h2 id=\"syntax-highlighting\">Syntax Highlighting</h2>\n<p>Syntax highlighting works out of the box with the <a href=\"https://github.com/vim/vim/blob/master/runtime/syntax/cs.vim\">Vim runtime</a>.</p>\n<h2 id=\"bonus-formatting\">Bonus: Formatting</h2>\n<p>I could not find a sanctioned solution for formatting C#. For now, I&rsquo;m using <strong><a href=\"https://github.com/uncrustify/uncrustify\">Uncrustify</a></strong>, a code beautifier for C-style languages.</p>\n<p>This tool is not Vim-specific. I run it from the terminal or via <a href=\"https://www.rockyourcode.com/til-how-to-execute-an-external-command-in-vim-and-reload-the-file/\">external shell command in Vim</a>.</p>\n<p>Install a pre-compiled binary from <a href=\"https://github.com/uncrustify/uncrustify\">GitHub</a> or use your operating system&rsquo;s package manager.</p>\n<p>You can customize Uncrustify to your liking and you need a default configuration file.</p>\n<p>Here are my settings (<code>~/.uncrustify.cfg</code>):</p>\n<pre><code>#\n# Formatter for c#, java, etc.\n#\n\nnewlines = LF\t\t# AUTO (default), CRLF, CR, or LF\n\nindent_with_tabs\t\t= 0\t\t# 1=indent to level only, 2=indent with tabs\ninput_tab_size\t\t\t= 8\t\t# original tab size\noutput_tab_size\t\t\t= 3\t\t# new tab size\nindent_columns\t\t\t= output_tab_size\n# indent_label\t\t\t= 0\t\t# pos: absolute col, neg: relative column\nindent_align_string\t\t= False\t\t# align broken strings\nindent_brace\t\t\t= 0\nindent_class\t\t\t= true\n\nnl_start_of_file\t\t    = remove\n# nl_start_of_file_min\t\t= 0\nnl_end_of_file\t\t\t    = force\nnl_end_of_file_min\t\t    = 1\nnl_max\t\t\t\t        = 4\nnl_before_block_comment\t\t= 2\nnl_after_func_body\t\t    = 2\nnl_after_func_proto_group \t= 2\n\nnl_assign_brace\t\t\t= add\t\t# &quot;= {&quot; vs &quot;= \\n {&quot;\nnl_enum_brace\t\t\t= add\t\t# &quot;enum {&quot; vs &quot;enum \\n {&quot;\nnl_union_brace\t\t\t= add\t\t# &quot;union {&quot; vs &quot;union \\n {&quot;\nnl_struct_brace\t\t\t= add\t\t# &quot;struct {&quot; vs &quot;struct \\n {&quot;\nnl_do_brace\t\t\t    = add\t\t# &quot;do {&quot; vs &quot;do \\n {&quot;\nnl_if_brace\t\t\t    = add\t\t# &quot;if () {&quot; vs &quot;if () \\n {&quot;\nnl_for_brace\t\t\t= add\t\t# &quot;for () {&quot; vs &quot;for () \\n {&quot;\nnl_else_brace\t\t\t= add\t\t# &quot;else {&quot; vs &quot;else \\n {&quot;\nnl_while_brace\t\t\t= add\t\t# &quot;while () {&quot; vs &quot;while () \\n {&quot;\nnl_switch_brace\t\t\t= add\t\t# &quot;switch () {&quot; vs &quot;switch () \\n {&quot;\nnl_func_var_def_blk\t\t= 1\nnl_before_case\t\t\t= 1\nnl_fcall_brace\t\t\t= add\t\t# &quot;foo() {&quot; vs &quot;foo()\\n{&quot;\nnl_fdef_brace\t\t\t= add\t\t# &quot;int foo() {&quot; vs &quot;int foo()\\n{&quot;\nnl_after_return\t\t\t= TRUE\nnl_brace_while\t\t\t= remove\nnl_brace_else\t\t\t= add\nnl_squeeze_ifdef\t\t= TRUE\n\npos_bool\t\t\t= trail\t\t# BOOL ops on trailing end\n\neat_blanks_before_close_brace\t= TRUE\neat_blanks_after_open_brace\t= TRUE\n\n\nmod_paren_on_return\t\t    = add\t\t# &quot;return 1;&quot; vs &quot;return (1);&quot;\nmod_full_brace_if\t\t    = add\t\t# &quot;if (a) a--;&quot; vs &quot;if (a) { a--; }&quot;\nmod_full_brace_for\t\t    = add\t\t# &quot;for () a--;&quot; vs &quot;for () { a--; }&quot;\nmod_full_brace_do\t\t    = add\t\t# &quot;do a--; while ();&quot; vs &quot;do { a--; } while ();&quot;\nmod_full_brace_while\t\t= add\t\t# &quot;while (a) a--;&quot; vs &quot;while (a) { a--; }&quot;\n\nsp_before_byref\t\t\t         = remove\nsp_before_semi\t\t\t         = remove\nsp_paren_paren\t\t\t         = remove\t# space between (( and ))\nsp_return_paren\t\t\t         = remove\t# &quot;return (1);&quot; vs &quot;return(1);&quot;\nsp_sizeof_paren\t\t\t         = remove\t# &quot;sizeof (int)&quot; vs &quot;sizeof(int)&quot;\nsp_before_sparen\t\t         = force\t\t# &quot;if (&quot; vs &quot;if(&quot;\nsp_after_sparen\t\t\t         = force\t\t# &quot;if () {&quot; vs &quot;if (){&quot;\nsp_after_cast\t\t\t         = remove\t# &quot;(int) a&quot; vs &quot;(int)a&quot;\nsp_inside_braces\t\t         = force\t\t# &quot;{ 1 }&quot; vs &quot;{1}&quot;\nsp_inside_braces_struct\t\t     = force\t\t# &quot;{ 1 }&quot; vs &quot;{1}&quot;\nsp_inside_braces_enum\t\t     = force\t\t# &quot;{ 1 }&quot; vs &quot;{1}&quot;\nsp_inside_paren\t\t\t         = remove\nsp_inside_fparen\t\t         = remove\nsp_inside_sparen\t\t         = remove\nsp_inside_square\t\t         = remove\n#sp_type_func\t\t\t         = ignore\nsp_assign\t\t\t             = force\nsp_arith\t\t\t             = force\nsp_bool\t\t\t\t             = force\nsp_compare\t\t\t             = force\nsp_assign\t\t\t             = force\nsp_after_comma\t\t\t         = force\nsp_func_def_paren\t\t         = remove\t# &quot;int foo (){&quot; vs &quot;int foo(){&quot;\nsp_func_call_paren\t\t         = remove\t# &quot;foo (&quot; vs &quot;foo(&quot;\nsp_func_proto_paren\t\t         = remove\t# &quot;int foo ();&quot; vs &quot;int foo();&quot;\nsp_func_class_paren\t\t         = remove\nsp_before_angle\t\t\t         = remove\nsp_after_angle\t\t\t         = remove\nsp_angle_paren\t\t\t         = remove\nsp_angle_paren_empty\t\t\t = remove\nsp_angle_word\t\t\t         = ignore\nsp_inside_angle\t\t\t         = remove\nsp_inside_angle_empty\t\t\t = remove\nsp_sparen_brace\t\t\t         = add\nsp_fparen_brace\t\t\t         = add\nsp_after_ptr_star\t\t         = remove\nsp_before_ptr_star\t\t         = force\nsp_between_ptr_star\t\t         = remove\n\nalign_with_tabs\t\t\t    = FALSE\t\t# use tabs to align\nalign_on_tabstop\t\t    = FALSE\t\t# align on tabstops\nalign_enum_equ_span\t\t    = 4\nalign_nl_cont\t\t\t    = TRUE\nalign_var_def_span\t\t    = 1\nalign_var_def_thresh\t\t= 12\nalign_var_def_inline\t\t= TRUE\nalign_var_def_colon\t\t    = TRUE\nalign_assign_span\t\t    = 1\nalign_assign_thresh\t\t    = 12\nalign_struct_init_span\t\t= 3\nalign_var_struct_span\t\t= 99\nalign_right_cmt_span\t\t= 3\nalign_pp_define_span\t\t= 3\nalign_pp_define_gap\t\t    = 4\nalign_number_right\t\t    = TRUE\nalign_typedef_span\t\t    = 5\nalign_typedef_gap\t\t    = 3\nalign_var_def_star_style    = 0\n\ncmt_star_cont\t\t\t= TRUE\n</code></pre><p>Above you see the options from <a href=\"https://github.com/uncrustify/uncrustify/blob/master/documentation/htdocs/ben.cfg.txt\">a GitHub configuration file</a> with changes made from <a href=\"https://github.com/uncrustify/uncrustify/issues/2949\">this issue</a>.</p>\n<h2 id=\"thoughts\">Thoughts</h2>\n<p>Using Vim for C# development is a tad wonky. I&rsquo;ve had better success with languages like Go or OCaml. But in a pinch, it works â€” even on Linux.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://wiki.archlinux.org/index.php/.NET_Core#Install_multiple_versions_manually\">Install multiple .NET Core versions manually</a></li>\n<li><a href=\"https://github.com/prabirshrestha/vim-lsp\">vim-lsp</a></li>\n<li><a href=\"http://www.omnisharp.net/\">OmniSharp Roslyn</a></li>\n<li><a href=\"https://shapeshed.com/vim-packages/\">Vim: So long Pathogen, hello native package loading</a></li>\n<li><a href=\"https://hauleth.dev/post/vim-for-elixir/#completion-and-language-server\">Dumb Elixir VIsual (and iMproved) editor</a></li>\n<li><a href=\"https://github.com/uncrustify/uncrustify\">Uncrustify</a></li>\n</ul>\n\n  <hr />\n  <p>Thank you for reading my blog posts.</p>\n  <p>Don't hesitate to reach out via <a href=\"mailto:hi@rockyourcode.com\">email</a> or <a href=\"https://twitter.com/hisophiabrandt\">Twitter</a>!\n  "}