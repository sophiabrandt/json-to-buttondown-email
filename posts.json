{"titles":[" Notes on ‚ÄùAdvice for Your First Dev Role‚Äù"," Notes on ‚ÄúHow to Become a Better Developer With Nacho Iacovino‚Äú"," Notes on ‚ÄúEnterprise Architecture Patterns‚Äú"," Notes on ‚ÄúRamping Up at Your First Developer Job‚Äù"," Receive Webhooks via ifttt"," TIL: GitHub Actions on cron Job Might Be Late"," My Git Aliases And Abbreviations"],"content":"Hello üëã! Thanks for subscribing.\n\n\nHere are the articles from last week:\n\n## [Notes on ‚ÄùAdvice for Your First Dev Role‚Äù](https://www.rockyourcode.com/notes-on-advice-for-your-first-dev-role/)\nPublished on: 2021-06-14\n\ntags: Notes, Lab\n\n\n[Virtual Coffee][virtualcoffee] is a remote community for developers that aim to support each other.  \nThey offer \"brown bags\" which are talks and discussions about a specific topic.\n\nHere are my notes from **[Advice for your first dev role][youtube]** by Bryan Healey:\n\nRemember that there will be a **ramp-up period**. You should take the time to talk to other engineers in your team.  \nLearn about the tooling stack as soon as possible.  \nTalk to your manager regularly.\n\nKeep in mind what you want to achieve in a year, 5 years, etc. Be proactive. Don't wait for tasks to come to you ‚Äî _gradually_ ask for more complex tasks. Take ownership.\n\nMany juniors try to jump in and contribute at scale. That hinders them from seeking help, and **opening a dialog**. Having a \"set of fresh eyes\" is valuable for a company.\n\nBryan looks for **continuous contributions on an escalating scale**. He doesn't expect a junior to contribute major features right away.  \n\nGood engineers should be **comfortable with asking questions** as its part of the process.  \nA functional team will collaborate and discuss, so your questions should be welcomed, too.\n\n_When_ should you ask questions? As a beginner, don't spend too much time on trouble-shooting. Nobody gains much when you try to solve a problem yourself that could be solved faster by asking for help.  \nRule of thumb: don't spend more than 30 minutes banging your head against the wall.\n\nWhen you start a new job, there is a \"grace period\" where everyone expects you to ask questions. Build trust by doing your due diligence (take notes, learn, listen for feedback, etc.).\n\nAlso remember that seniors developers can learn from _you_.\n\nBryan hires junior developers for their personality, creativity, problem-solving, not for their technical skills. He looks for people that can push the team. He doesn't care about failure, not delivering things.  \nDon't be quiet, be part of the team.\n\n## Links\n\n- [Advice for your first dev role ‚Äì Bryan Healey ‚Äì Virtual Coffee Brownbag][youtube]\n- [Bryan Healey's website](https://www.healeyengineering.com/consultants/Bryan-Healey) and [Twitter account](https://twitter.com/Bryan_Healey)\n- [Virtual Coffee][virtualcoffee]\n\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/SYTO3xs06fU\">Marvin Meyer</a></em></small>{{</rawhtml>}}\n\n[youtube]: https://www.youtube.com/watch?v=cwTFHDgDDeY\n[virtualcoffee]: https://virtualcoffee.io/\n\n\n<hr />\n## [Notes on ‚ÄúHow to Become a Better Developer With Nacho Iacovino‚Äú](https://www.rockyourcode.com/notes-on-how-to-become-a-better-developer-with-nacho-iacovino/)\nPublished on: 2021-06-13\n\ntags: Notes, Lab\n\n\nNotes from the Twitch stream with Francesco Ciulla and Nacho Iacovino (1 hour 17 mins):\n[![How to become a better Developer | with Nacho Iacovino](https://i.ytimg.com/vi/AbdcoJHVutk/sddefault.jpg)](https://youtube.com/watch?v=AbdcoJHVutk 'How to become a better Developer | with Nacho Iacovino')\n\nNacho Iacovino is a self-taught developer from Spain who grew his Twitter account in a short time.\n\nHere are some tips that he shared.\n\n**Coding interviews**: He learned from each interview. Even if you can't answer a question, you can go home, research, and then you can answer the question on the next interview. It's a process.  \nYou also need to interview the company.\n\n**Marketing/Followers**: Nacho made some useful Twitter threads and pinged the influential Twitter accounts for feedback (no spam, no selling, add value), hit a niche (Tailwind CSS).  \n_Engage with bigger account._ Add value to other people's tweets. Use common sense.  \nChoose one platform and be consistent.\n\n**Becoming a better developer**: He quit JavaScript twice before he managed to become a developer full-time. _Be consistent._ You might not have 6 hours a day to learn to code, but at least do a little bit every day.  \nFind the best way that works for you (video, tutorials, books).  \nDon't copy a tutorial verbatim, try to experiment, embrace breaking the application and find out how to fix it. Challenge yourself.\n\n**Portfolio**: Show what you're capable of. Udemy project clones are dimes and dozens, make it your own. Make it easy for others to contact you.  \nShow the newest work first. Be concise. Say where you're based, so it's easy to see if the company can hire you.\n\n**Learn in Public**: Nacho shared what he learned publicly on Twitter. People were reaching out to him, because they knew what he learned.  \nBe your own teacher. What you write down you can use later.\n\n## Links\n\n- [How to become a better Developer | with Nacho Iacovino][youtube] on\n  Francesco Ciulla's [YouTube channel](https://www.youtube.com/channel/UCBRxDSTfr2aJVODDh4WG_7g)\n\n[youtube]: https://youtube.com/watch?v=AbdcoJHVutk\n\n\n<hr />\n## [Notes on ‚ÄúEnterprise Architecture Patterns‚Äú](https://www.rockyourcode.com/notes-on-enterprise-architecture-patterns/)\nPublished on: 2021-06-12\n\ntags: Lab, Notes\n\n\nThe goal of the [workshop][enterprisepatterns] is to learn the mental models and patterns to reduce complexity in software development.\n\nThe principles from the course are framework-agnostic, but the teacher uses examples from Angular.\n\n(I found the concepts front-end centric. That's unsurprising as the course platform targets [front-end developers][enterprisepatterns]).\n\n## What are \"enterprise patterns\"?\n\nThe core problem across all enterprise software is complexity. We strive to solve complexity by diligently applying first principles.\n\nIf you run into a problem, it's tempting to blame it on the framework. More often than not, the problem stems from a problematic implementation. Simplify the architecture to solve the root cause.\n\n## Complexity\n\n_Out of the Tar Pit_ by Ben Moseley and Peter Marks [^1]:\n\n> We believe that the major contributor to this complexity in many systems is the handling of _state_ and the burden that this adds when trying to analyse and reason about the system. Other closely related contributors are _code volume_, and explicit concern with the _flow of control_ through the system.\n\nLook at the code:\n\n- Can I **know** the result of this code at all times?\n- Can I **reuse** the code?\n- Can I **test** this code?\n\n> It is _impossible_ to write **good tests** for **bad code**.\n\nThe friction to testing is high because you must write _testable_ code.\n\n**The Axis of Evil**:\n\n- hidden state\n- violating the _Single Responsibility Principle_\n- nested logic\n\nSolve via **dependency injection** and **method extraction**.\n\nAim for fine-grained code.\n\n## Four Elements of Programming\n\n1. Describing things (nouns, data structures)\n2. Performing Actions (verbs)\n3. Making Decisions (conditions)\n4. Repeating (iterators)\n\n### Object Modeling as Nouns\n\n_Take the time to properly model the domain._\n\nUse (TypeScript) interfaces to communicate your intent.\n\n_State_ is a data structure.\n\n### Methods as Verbs\n\n### Managing Flow Control\n\nIdentify the things that are conventionally equivalent, and optimize/automate them.\n\nFind the things that are not conventionally equivalent (UI, business logic), and focus 95% of your time on that.\n\n### Collections & Iterators\n\nPrefer higher order functions (declarative vs. imperative approach).\n\nPrefer immutability.\n\nUse the [flux pattern][flux].\n\n### The Fifth Element of Programming\n\n- _Time Management_\n- _Observables_: encapsulate, transport_ and _transform_ data from user interactions\n- combines Iterator and Observer pattern [^2]\n- Observable streams: initial output -> final input\n\n### Distributed Complexity\n\n- create _space_ between interactions and effects (when using the Redux pattern: actions)\n- thin components\n- example: create stateless front-end application with web sockets and server-side state\n\n## Links\n\n- [Enterprise Architecture Patterns][enterprisepatterns] by ≈Åukasz Ruebbelke\n- [Out of the Tar Pit][tarpit] by Ben Moseley and Peter Marks\n- [An introduction to the Flux architectural pattern][flux]\n- [Two Fundamental Abstractions][twoabstractions] by Andr√© Staltz\n- [JavaScript Getter-Setter Pyramid](https://staltz.com/javascript-getter-setter-pyramid.html) by Andr√© Staltz\n\n[tarpit]: http://curtclifton.net/papers/MoseleyMarks06a.pdf\n[enterprisepatterns]: https://frontendmasters.com/courses/enterprise-patterns\n[flux]: https://www.freecodecamp.org/news/an-introduction-to-the-flux-architectural-pattern-674ea74775c9/\n[twoabstractions]:https://www.youtube.com/watch?v=fdol03pcvMA\n\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/tSEiF1ZWUTo\">Stefan Cosma</a></em></small>{{</rawhtml>}}\n\n[^1]: [_Out of the Tar Pit_ by Ben Moseley and Peter Marks][tarpit]\n[^2]: the best explanation I found about Observables is Andr√© Staltz's video [Two Fundamental Abstractions][twoabstractions]\n\n\n\n<hr />\n## [Notes on ‚ÄúRamping Up at Your First Developer Job‚Äù](https://www.rockyourcode.com/notes-on-ramping-up-at-your-first-developer-job/)\nPublished on: 2021-06-11\n\ntags: Notes, Lab\n\n\nThe talk [WebOfficeHours - Ramping Up at Your First Developer Job][youtube] by Mark Noonan is a 1-hour video with useful info for junior developers.\n\nHere are my condensed notes:\n\n### First Week on the Job\n\n- tedious computer setup using skills you never need in any other situation\n- take notes for the next person\n\n### Imposter Syndrome\n\n- remember they hired you on purpose\n\n### Communication\n\n- you might get trained on some of the stuff you'll need to do in your job\n- _BUT_: people have no idea what other people have told you or not yet, so they might assume that you know XYZ, when nobody told you about it\n\n### Social Circle\n\n- figure out what everybody does and where you fit\n- smaller vs bigger team: in bigger teams there are more layers\n- in quickly moving teams: it's still not expected that you magically produce work, but you might have to stand up for yourself\n\n### Learning a New Codebase\n\n- take a look at the most recent commits/work\n\n### Git (Version Control) && Jira (Ticketing System)\n\n- the culture of how Git is used is often different (and might not be documented)\n- make sure to ask how to approach version control\n- workflows are always different: ask\n\n### Be a Little Cynical\n\n- make sure that others see your effort \n- don't get stuck even on the things you were hired to do\n\n### Asking for Help Is a Superpower\n\n### Managing Frustration Is Your Job\n\n- working as a developer is often hard\n- learn how to be patient\n\n### Debugging\n\n- learn how to debug (inspector, dev tools, break points)\n\n### Make a Lot of Notes\n\n- ask a lot of questions\n\n### Don't Be Too Shy in Meetings\n\n- it's ok to mostly hang back in meetings, but say at least one thing if you can\n\n### Carving Out \"Your Job\"\n\n- try to find the things you're good at\n\n### You Can Do Anything if You Have Enough Time\n\n- your motivation for asking for help is not that you can't get it to work ‚Äî it's that it's not worth your time to spend too much time on learning all the stuff\n- you will often need to work on something that you haven't worked on before\n\n## Links\n\n- [WebOfficeHours - Ramping Up at Your First Developer Job][youtube] by [Mark Noonan](https://twitter.com/marktnoonan)\n- [How to ask good questions](https://jvns.ca/blog/good-questions/) by Julia Evans\n\n[youtube]: https://youtube.com/watch?v=oXfuyCMXJR8\n\n\n<hr />\n## [Receive Webhooks via ifttt](https://www.rockyourcode.com/receive-webhooks-via-ifttt/)\nPublished on: 2021-06-10\n\ntags: DevTools, TIL\n\n\n**[ifttt][ifttt]** is a no-code/low-code tool for automation.\n\nYou can chain trigger events (\"if someone tweets a new tweet with the hash-tag coding\") to commands (\"then send me an email\").\n\nMy goal was to **receive a webhook event**, so that I can send an email.\n\nI create my newsletter via [buttondown.email][buttondown]. I have a [script][script] that creates a new newsletter draft from my blog posts via GitHub actions.\n\nEverything happens automatically.\n\nWhen a new draft drops, I want to receive a notification. Buttondown has a webhooks API that can send POST requests to an endpoint ‚Äî for example, to ifttt.\n\nYou have to create a new ifttt \"recipe\" with the webhooks trigger.\n\nIn your ifttt webhooks settings, you will see an URL that looks like this:\n\n```\nhttps://maker.ifttt.com/use/<some-random-string>\n```\n\nI need to tell buttondown.email to send a webhooks request to that URL.\n\n**But the correct URL is different** than the one shown in the ifttt UI.\n\nYou'll need to chain it like this:\n\n```\nhttps://maker.ifttt.com/trigger/<the-trigger-name>/with/key/<the-random-string>\n```\n\nLet's say you call your trigger action `buttondown.email_draft.created`.\n\n{{< figure src=\"/static/img/2021-06-10-ifttt-webhook-trigger.png\" alt=\"ifttt webhook trigger field\" position=\"center\" style=\"border-radius: 4px;\" caption=\"ifttt webhook trigger field\" captionPosition=\"right\" >}}\n\nThen the URL for the POST request looks like this (replace `<the-random-string>` with your unique ID):\n\n```\nhttps://maker.ifttt.com/trigger/buttondown.email_draft.created/with/key/<the-random-string>\n```\n\n{{< figure src=\"/static/img/2021-06-10-buttondown.email_webhooks.png\" alt=\"buttondown.email add webhooks\" position=\"center\" style=\"border-radius: 4px;\" caption=\"buttondown.email add webhooks field\" captionPosition=\"right\" >}}\n\nI could not find that information on the official website, but some third-party blog posts (see below) pointed me in the right direction.\n\n## Links\n\n- [ifttt webhooks][ifttt]\n- [buttondown.email webhooks][buttondown]\n- [Linking IFTTT & Processing with Webhooks](https://medium.com/measuring-the-great-indoors/linking-ifttt-processing-with-webhooks-6b20c6ed722d)\n- [Use IFTTT web requests to send email alerts](https://medium.com/measuring-the-great-indoors/linking-ifttt-processing-with-webhooks-6b20c6ed722d)\n\n[buttondown]: https://blog.buttondown.email/2021/01/06/webhooks-and-the-programming-page\n[ifttt]: https://ifttt.com/maker_webhooks\n[script]: https://github.com/sophiabrandt/json-to-buttondown-email\n\n\n<hr />\n## [TIL: GitHub Actions on cron Job Might Be Late](https://www.rockyourcode.com/til-github-actions-on-cron-job-might-be-late/)\nPublished on: 2021-06-09\n\ntags: TIL, Git\n\n\nToday I learned that [scheduled GitHub Actions][scheduled] might be late or not run at all. üò†\n\nI've written a [script][jsontobuttondownemail] which fetches my blog posts every week on Monday and creates a draft with my newsletter provider.\n\nThe script uses a cron job.\n\nI assumed that the cron job will run at the specified time.\n\nUnfortunately, that's not the case as [per this post in the GitHub support forums][forums]:\n\n> Many times, there is a delay when triggering the scheduled workflow.  \nGenerally the delay time is about 3 to 10 minutes. Sometimes it may be more time, even dozens of minutes or more than one hour. However, if the delay time is too long, the scheduled workflow may be not triggered at that day.\n\nA possible work-around is using [a third-party service][upptime] like [IFTTT](https://ifttt.com) to trigger the GitHub Action Workflow.\n\n[forums]: https://github.community/t/no-assurance-on-scheduled-jobs/133753\n[jsontobuttondownemail]: https://github.com/sophiabrandt/json-to-buttondown-email\n[upptime]: https://upptime.js.org/blog/2021/01/22/github-actions-schedule-not-working/\n[scheduled]: https://jasonet.co/posts/scheduled-actions/\n\n\n<hr />\n## [My Git Aliases And Abbreviations](https://www.rockyourcode.com/my-git-aliases-and-abbreviations/)\nPublished on: 2021-06-08\n\ntags: Git, DevTools, Shell\n\n\nAs a developer, Git is one of the essential tools in my daily work.\n\nToday I want to share my git aliases and fish abbreviations that make working with Git more comfortable.\n\nIn my `~/.gitconfig` file:\n\n```\n[alias]\n  # Git Commit, and Push ‚Äî in one step.\n  cmp = \"!f() { git commit -m \\\"$@\\\"; }; f\"\n  # NEW.\n  new = \"!f() { git cmp \\\"üì¶ NEW: $@\\\"; }; f\"\n  # IMPROVE.\n  imp = \"!f() { git cmp \\\"üëå IMPROVE: $@\\\"; }; f\"\n  # FIX.\n  fix = \"!f() { git cmp \\\"üêõ FIX: $@\\\"; }; f\"\n  # RELEASE.\n  rlz = \"!f() { git cmp \\\"üöÄ RELEASE: $@\\\"; }; f\"\n  # DOC.\n  doc = \"!f() { git cmp \\\"üìñ DOC: $@\\\"; }; f\"\n  # TEST.\n  tst = \"!f() { git cmp \\\"ü§ñ TEST: $@\\\"; }; f\"\n  # BREAKING CHANGE.\n  brk = \"!f() { git cmp \\\"‚ÄºÔ∏è BREAKING: $@\\\"; }; f\"\n  # Logline\n  lol = log --graph --decorate --oneline\n  lola = log --graph --decorate --oneline --all\n  # Diff, Status\n  df = diff --color=always --color-words --abbrev\n  st = status -s\n  last = log -1 HEAD\n  unstage = reset HEAD --\n  pj = !which onefetch && onefetch\n```\n\nThe first few are from **[Emoji-Log][emojilog]**, a method to decorate git commits with emojis. What I like about the method is that it uses a small subset of defined emojis and make the commits look prettier.\n\nI also have utility commands, like `git st` which gives me a condensed version of `git status`.\n\nThe logline commands are useful to show a graph of the commits.\n\n`git pj` (`pj` for \"project\") uses **[onefetch][onefetch]**, a CLI that displays project information and code statistics. It's pretty neat.\n\nI also have [fish abbreviations][fishabbrev] that make it easier for me to type common git commands.\n\nOne of my favorite ones is `gapn` which expands to `git add --intent-to-add . && git add --patch`.\n\nThis command shows you all your changes from the last commit with the option to stage hunks.\n\n[This blogpost][nuclearsquid] explains how `git add --patch` works.\n\nI'll leave a list of my fish abbreviations here:\n\n```\nabbr -a -U -- g git\nabbr -a -U -- ga 'git add'\nabbr -a -U -- gadn 'git add . && git diff --cached'\n# interactive git add\nabbr -a -U -- gai 'git add -i'\n# git add --patch\nabbr -a -U -- gap 'git add -p'\nabbr -a -U -- gapn 'git add --intent-to-add . && git add --patch'\nabbr -a -U -- gbr 'git branch'\nabbr -a -U -- gc 'git commit'\nabbr -a -U -- gca 'git commit --amend'\nabbr -a -U -- gcm 'git commit -m'\nabbr -a -U -- gco 'git checkout'\nabbr -a -U -- gd 'git pull'\n# git diff\nabbr -a -U -- gdf 'git df'\nabbr -a -U -- gdif 'git diff'\nabbr -a -U -- gdoc 'git doc'\nabbr -a -U -- gfom 'git fetch origin master'\nabbr -a -U -- gft 'git fetch'\nabbr -a -U -- gfu 'git fetch upstream'\n# git --intent-to-add\nabbr -a -U -- gin 'git add -N .'\nabbr -a -U -- glst 'git last'\nabbr -a -U -- gmg 'git merge'\nabbr -a -U -- gnew 'git new'\nabbr -a -U -- gp 'git push'\nabbr -a -U -- gpl 'git pull'\nabbr -a -U -- gpo 'git pull origin'\nabbr -a -U -- gpu 'git pull upstream'\nabbr -a -U -- grb 'git rebase'\nabbr -a -U -- grs 'git reset'\nabbr -a -U -- gst 'git status -sb'\nabbr -a -U -- gsw 'git switch'\n```\n\nAbbreviations like `gcm` are handy: The abbreviation expands to `git commit -m`, so that I now can type my commit message.\n\n## Links\n\n- [git add --patch and --interactive][nuclearsquid]\n- [Git Aliases](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\n- [Fish Abbreviations][fishabbrev]\n- [onefetch][onefetch]\n\n[emojilog]: https://github.com/ahmadawais/Emoji-Log\n[onefetch]: https://github.com/o2sh/onefetch\n[nuclearsquid]: https://nuclearsquid.com/writings/git-add/\n[fishabbrev]: https://fishshell.com/docs/current/cmds/abbr.html\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}