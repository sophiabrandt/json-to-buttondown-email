{"titles":[" Angular Workspaces as Alternative to Nx Monorepo"],"content":"Hello ðŸ‘‹! Thanks for subscribing.\n\n\nHere are my latest articles:\n\n## [Angular Workspaces as Alternative to Nx Monorepo](https://www.rockyourcode.com/angular-workspaces-as-alternative-to-nx-monorepo/)\n\nPublished on: 2023-02-18\n\ntags: Angular, TIL\n\n\nToday I learned that you can create [monorepo workspaces with Angular][angular].  \nI've always used [nx](https://nx.dev), but if you don't want to use a third-party tool,  the built-in Angular capabilities might be enough.\n\n## Angular Workspaces\n\n```bash\nng new my-workspace --no-create-application\ncd my-workspace\n```\n\nIf you use [pnpm](https://pnpm.io):\n```bash\npnpm dlx @angular/cli new my-workspace --no-create-application --package-manager pnpm\ncd my-workspace\n```\n\nThis creates the following directory structure:\n```bash\n.\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ angular.json\nâ”œâ”€â”€ node_modules\nâ”œâ”€â”€ package.json\nâ”œâ”€â”€ pnpm-lock.yaml\nâ””â”€â”€ tsconfig.json\n```\n\nNow you can create new applications like so:\n\n```bash\nng generate application my-first-app\n```\n\nFor pnpm:\n```bash\npnpm dlx @angular/cli g application my-first-app\n```\n\nOr libraries:\n```bash\npnpm dlx @angular/cli g lib my-first-lib\n```\n\nHere is an example folder structure with a `dashboard` app and a `shared-ui` library:\n\n```bash\n.\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ angular.json\nâ”œâ”€â”€ package.json\nâ”œâ”€â”€ pnpm-lock.yaml\nâ”œâ”€â”€ projects\nâ”‚Â Â  â”œâ”€â”€ dashboard\nâ”‚Â Â  â”‚Â Â  â”œâ”€â”€ src\nâ”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ app\nâ”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ assets\nâ”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ favicon.ico\nâ”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ index.html\nâ”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ main.ts\nâ”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ styles.scss\nâ”‚Â Â  â”‚Â Â  â”œâ”€â”€ tsconfig.app.json\nâ”‚Â Â  â”‚Â Â  â””â”€â”€ tsconfig.spec.json\nâ”‚Â Â  â””â”€â”€ shared-ui\nâ”‚Â Â      â”œâ”€â”€ README.md\nâ”‚Â Â      â”œâ”€â”€ ng-package.json\nâ”‚Â Â      â”œâ”€â”€ package.json\nâ”‚Â Â      â”œâ”€â”€ src\nâ”‚Â Â      â”‚Â Â  â”œâ”€â”€ lib\nâ”‚Â Â      â”‚Â Â  â””â”€â”€ public-api.ts\nâ”‚Â Â      â”œâ”€â”€ tsconfig.lib.json\nâ”‚Â Â      â”œâ”€â”€ tsconfig.lib.prod.json\nâ”‚Â Â      â””â”€â”€ tsconfig.spec.json\nâ””â”€â”€ tsconfig.json\n```\n\nNow you can easily import components from the `shared-ui` in your `dashboard` app.\n\nAnother option is to use npm workspaces or [pnpm workspaces][pnpm]. I found a [good tutorial for creating a workspace with pnpm][pnpmworkspaceguide], so I won't rehash it here.\n\nIf you use an npm/pnpm workspace _together_ with Angular workspaces, you should take care to let Angular handle the Angular parts and npm/pnpm to handle the parts.\n\nWhy?\n\nnpm expects that the output of the build folder is in the same folder as the library. But if you create an Angular library, the output of the build will be in the main dist folder. This confuses npm.\n\n## Links\n\n* [Angular Workspaces][angular]\n* [Setup a Monorepo with PNPM workspaces and speed it up with Nx!][pnpmworkspaceguide]\n\n\n[angular]: https://angular.io/guide/file-structure\n[pnpmworkspaceguide]: https://12ft.io/blog.nrwl.io/setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx-bc5d97258a7e\n[pnpm]: https://pnpm.io/workspaces\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com) or [Mastodon](https://hachyderm.io/@sbr)!\n"}