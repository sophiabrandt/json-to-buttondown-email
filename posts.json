{"titles":[" What All New Software Developers Need to Know"," Algorithmic Problem Solving Approach"," ‚ÄúHow to Think‚Äù by Andr√© Staltz ‚Äì Uphill Conf 2019"," TIL: Angular Configuration Detected Running in Production Mode"],"content":"Hello üëã! Thanks for subscribing.\n\n\nHere are the articles from last week:\n\n## [What All New Software Developers Need to Know](https://www.rockyourcode.com/what-all-new-software-developers-need-to-know/)\n\nPublished on: 2021-12-16\n\ntags: Lab, Notes\n\n\nHere are the bulletpoints from the ~ 30 minute video [What All New Software Developers Need To Know][youtube] by Dave Farley.\n\n[![What All New Software Developers Need To Know](https://i.ytimg.com/vi/hjIlTaAMsbI/sddefault.jpg)](https://youtube.com/watch?v=hjIlTaAMsbI 'What All New Software Developers Need To Know')\n\n1. Nobody Knows Everything\n\n   Everyone is a junior in something. It's OK to say \"I don't know\".\n\n2. Apply \"Engineering Thinking\" to Solving Problems\n\n   Learn from your failures.\n\n3. Make Progress in Small Controlled Experiments\n\n   Get comfortable with not knowing. Always work in small steps.\n\n4. Be Suspicious of Your Ideas and Guesses\n\n   Always test your assumptions.\n\n5. Seek Mentors\n\n   Look to chose your own boss. Interview the organization you apply to.\n\n6. Seek Out Pair Programming\n\n7. Find Like Minds\n\n   Go to meetups, find open-source projects to contribute to.\n\n8. Don't Be Obsessed With Tools\n\n   Software development is about understanding the problem we are working on. Develop the skills to analyze problems. Talk to other people, make diagrams.\n\n9. Focus on the Problem You Are Solving\n\n   Your real job is not coding.\n\n10. Write Lots of Code - Play With It\n\n    Explore. Try coding exercises.\n\n11. It's About Thinking, Not Typing!\n\n    Learn the fundamentals and apply them. Learn test-driven-development.\n\n12. Fundamentals Are More Important Than Tools\n\n    Tools come and go, but the fundamentals stay.\n\n13. Language & Frameworks Should Be Incidental\n\n    Spend some time to learn them, but look for the deeper, profound skills.\n\n14. Solving Problems > Design > Coding > Language & Frameworks\n\n15. TDD Focus Maintain Focus on the Problem & Improves Design Quality\n\n16. Take Coupling/Dependencies Seriously\n\n17. Concurrency Requires Caution\n\n18. Optimise for Learning & Discovery\n\n19. Work Iteratively\n\n    Gather feedback.\n\n20. Work Incrementally\n\n    Make progress as a series of experiments.\n\n21. Be Empirical\n\n    Observe. Evaluate ideas in the real world.\n\n22. Optimise to Manage Complexity\n\n    Create modular systems. Improve cohesion. Separation of concerns. Manage Coupling. Use abstractions.\n\n## Source\n\n- [What All New Software Developers Need To Know][youtube] by Dave Farley\n\n[youtube]: https://www.youtube.com/watch?v=hjIlTaAMsbI\n\n\n<hr />\n## [Algorithmic Problem Solving Approach](https://www.rockyourcode.com/algorithmic-problem-solving-approach/)\n\nPublished on: 2021-12-14\n\ntags: Lab, Notes\n\n\nI bought the course [JavaScript Algorithms and Data Structures Masterclass][udemy] a while ago because I feared that I needed to do algorithm challenges when applying for a job. Luckily, that was not the case.\n\nIt's still a useful resource and I liked the tips for **solving problems**.\n\nThe tips come from the book [How to Solve It][solveit] by George Polya. It's a book on mathematics, but the principles apply to programming, too.\n\n## 1. Understanding the Problem\n\n1. Can I restate the problem in my own words?\n2. What are the inputs that go into the problem?\n3. What are the outputs that should come from the solution to the problem?\n4. Can the outputs be determined from the inputs? Do I have enough information to solve the problem?\n5. How should I label the important pieces of data that are a part of the problem?\n\n## 2. Concrete Examples\n\nComing up with examples can help you understand the problem better. Examples provide sanity checks: **user stories** and **unit tests**.\n\n- start with simple examples\n- progress to more complex examples\n- examples with empty inputs\n- examples with invalid inputs\n\n## 3. Break It Down\n\nUse pseudo-code or code comments. In an interview, explain the steps you want to take without worrying about details like language syntax.\n\n## 4. Solve the Problem (or Solve a Simpler Problem)\n\nIf you can't solve the complete problem, try to solve a simplified version.\n\n## 5. Look Back and Refactor\n* Can you check the result (does it work)?\n* Can you derive the result differently?\n* Can you understand it at a glance?\n* Can you use the result or method for some other problem?\n* Can you improve the performance of your solution?\n* Can you think of other ways to refactor?\n* How have other people solved this problem?\n\n## Links\n\n- [JavaScript Algorithms and Data Structures Masterclass][udemy] by Colt Steele\n- [How to Solve It][solveit] by George Polya\n\n[udemy]: https://www.udemy.com/course/js-algorithms-and-data-structures-masterclass/\n[solveit]: https://wikiless.org/wiki/How_to_Solve_It\n\n\n<hr />\n## [‚ÄúHow to Think‚Äù by Andr√© Staltz ‚Äì Uphill Conf 2019](https://www.rockyourcode.com/how-to-think-by-andre-staltz-uphill-conf-2019/)\n\nPublished on: 2021-12-12\n\ntags: Lab, Notes\n\n\nHere are short bullet points on the talk [How to Think][you].\n\n[![Andr√© Staltz - How to Think - Uphill Conf 2019](https://i.ytimg.com/vi/_fB8GRotdrc/sddefault.jpg)](https://youtube.com/watch?v=_fB8GRotdrc 'Andr√© Staltz - How to Think - Uphill Conf 2019')\n\n- mind map as a data structure\n- thinking as an algorithm\n- **have a structure for your thoughts**\n- humans imitate each other\n- humans have limited working memory\n- avoid blindly imitating each other, give new ideas at least 10 seconds to think about\n- acknowledge your feelings\n- improve your memory with tools (put your thoughts on paper)\n- debugging = investigating\n- deduction\n- git bisect\n- induction: make a good guess\n- backtracking: question everything\n- brainstorming\n- documentation: code that instruct humans\n- **think slowly and methodically**\n- be aware of your biases, feelings, and limitations\n- specialize, but keep learning\n\n## Links\n\n- [Andr√© Staltz - How to Think - Uphill Conf 2019][you]\n\n[you]: https://www.youtube.com/watch?v=_fB8GRotdrc\n\n\n<hr />\n## [TIL: Angular Configuration Detected Running in Production Mode](https://www.rockyourcode.com/til-angular-configuration-detected-running-in-production-mode/)\n\nPublished on: 2021-12-08\n\ntags: Angular, TIL\n\n\n> How to fix development mode for Angular\n\n## The Problem\n\nMy Angular 12 application was quite slow when I started it with `ng serve`. When I open the [Angular DevTools][devtools] I get the error:\n\n> We detected an application built with production configuration. Angular DevTools only supports development builds.\n\n## The Solution\n\nYou'll need an extra configuration for the development build if your `angular.json` doesn't have it. That's the case if you migrated from an earlier Angular version to v12 or later.\n\nAdjust `angular.json`:\n\nAdd the development options in the `architect` section under `configurations`:\n\nI disabled all optimizations for the development mode, but you can fine-tune them if you like. See the [documentation][optconfig] for details.\n\nYou'll also need a `browserTarget` for your configuration:\n```js\n\n{\n// previous configuration\n  \"projects\": {\n    \"your-project-name\": {\n\t// some options\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n\t\t  // options outcommented\n          },\n\t\t  /* add the development configuration with disabled\n\t\t  optimizations */\n          \"configurations\": {\n            \"development\": {\n              \"optimization\": false\n            },\n            \"production\": {\n\t\t\t// production options\n            }\n          }\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"options\": {\n            \"browserTarget\": \"your-project-name:build\"\n          },\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"your-project-name:build:production\"\n            },\n\t\t\t/* add a new development configuration\n\t\t\twith a `browserTarget` */\n            \"development\": {\n              \"browserTarget\": \"your-project-name:build:development\"\n            }\n          },\n\t\t  /* add the development mode\n\t\t  as default configuration */\n          \"defaultConfiguration\": \"development\"\n        },\n      }\n    }\n  },\n  \"defaultProject\": \"your-project-name\"\n}\n```\n\nThat should do the trick.\n\n## Links\n\n- [Angular always detected running in production mode](https://github.com/rangle/angular-devtools/issues/916)\n- [Angular Optimization configuration][optconfig]\n- [Angular - Configuration is not set in the workspace](https://stackoverflow.com/questions/58876170/angular-configuration-is-not-set-in-the-workspace)\n\n[optconfig]: https://angular.io/guide/workspace-config#optimization-configuration\n[devtools]: https://chrome.google.com/webstore/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}