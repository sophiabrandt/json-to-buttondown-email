{"titles":[" Tailwind CSS With Tailwind CLI"," Notes on ‚ÄúHow to Learn Anything 5x Faster (Joe Eames)‚Äù"," Notes on ‚ÄúDOM Angular Manipulation Techniques in Depth‚Äù by Nir Kaufman"," Notes on ‚ÄúWhich Tests Should We Automate by Angie Jones‚Äù"," Nvidia Hybrid GPU on Manjaro"," Notes on ‚ÄúRxJS Patterns in Angular‚Äú"," Apollo Server Express 3 With TypeScript"],"content":"Hello üëã! Thanks for subscribing.\n\n\nHere are the articles from last week:\n\n## [Tailwind CSS With Tailwind CLI](https://www.rockyourcode.com/tailwind-css-with-tailwind-cli/)\n\nPublished on: 2021-11-29\n\ntags: CSS, Node.js\n\n\n> How to install Tailwind CSS without a front-end framework\n\nHere's my cheat sheet to Tailwind CSS with [PostCSS][postcss] and [CSSNano][cssnano]. The guide follows the official [documentation][docs] with a few modifications.\n\n## Installation\n\nYou'll need a recent version of [Node.js](https://nodejs.org/en/).\n\n```bash\nnpm install -D tailwindcss@latest postcss@latest \\\n\tautoprefixer@latest cssnano\n```\n\n## PostCSS Configuration\n\nCreate a file `postcss.config.js`:\n\n```js\nconst cssnano = require('cssnano')\nconst tailwindcss = require('tailwindcss')\nconst autoprefixer = require('autoprefixer')\n\nconst plugins =\n  process.env.NODE_ENV === 'production'\n    ? [tailwindcss, autoprefixer, cssnano]\n    : [tailwindcss, autoprefixer]\n\nmodule.exports = { plugins }\n```\n\n## Tailwind Configuration\n\nCreate a file `tailwind.config.js`:\n\n```js\nmodule.exports = {\n  mode: 'jit',\n  purge: ['**/*.html'],\n  darkMode: false,\n  theme: {\n    extend: {},\n  },\n  variants: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n**Important**: Adjust the `purge` option to your use case.  \nI copy/pasted the configuration from somewhere else and Tailwind didn't work properly for me.\n\n## Use Tailwind CLI\n\n### 1. Without Customization\n\n```bash\nnpx tailwindcss --postcss \\\n\t-o <name and location of your css file>.css\n```\n\nReference the compiled CSS file in your HTML:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- ... -->\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link href=\"/main.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n### 2. With Customization\n\nCreate a stylesheet and add the required utility classes:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* add any custom styles here */\n```\n\n```bash\nnpx tailwindcss --postcss \\\n\t-i <above stylesheet location>.css \\\n\t-o <name and location of your css file>.css\n```\n\n## Links\n\n- [Tailwind Installation][docs]\n- [Using Tailwind CSS in production](https://blog.logrocket.com/using-tailwind-css-in-production/)\n\n[docs]: https://tailwindcss.com/docs/installation\n[cssnano]: https://cssnano.co/\n[postcss]: https://postcss.org/\n\n\n<hr />\n## [Notes on ‚ÄúHow to Learn Anything 5x Faster (Joe Eames)‚Äù](https://www.rockyourcode.com/notes-on-how-to-learn-anything-5x-faster/)\n\nPublished on: 2021-11-27\n\ntags: Lab\n\n\nThese are my notes on the video [How to Learn Anything 5X Faster | ng-conf & Thinkster.io | #ngconf][howto] by Joe Eames from thinkster.io.\n\n[![How to Learn Anything 5X Faster | ng-conf & Thinkster.io | #ngconf](https://i.ytimg.com/vi/SNbT1vquB6k/sddefault.jpg)](https://youtube.com/watch?v=SNbT1vquB6k 'How to Learn Anything 5X Faster | ng-conf & Thinkster.io | #ngconf')\n\n## Concepts\n\n- education is a process: many steps\n- content today provides only 1 step (Udemy, Pluralsight, blogs, books)\n- you have to do the rest\n- **retention is KEY**: what matters is what you know tomorrow, not what you know today\n- **motivation**: current process is demotivating, as it's ineffective\n- passive learning: retention of 7 - 15%\n- active learning: retention of 75 - 90%\n- teaching: 90+%\n- **typing is not coding**: mechanical tasks (like typing) even hinder the learning process\n- missing piece of education: **generation**\n\n## Role of Teachers\n\n- tutoring/coaching\n- teach\n- _assign proper exercises_\n\n## Building Knowledge\n\n- like a building\n- foundation\n- build a framework upon the foundation\n- details\n\n## Effective Learning Plan\n\n1. consume the content\n   - watch content max. 10 minutes\n   - take notes (writing down helps processing)\n2. practice\n3. take breaks\n4. personal project\n5. spaced repetition\n\n## tips\n\n- get a \"map\"/overview\n- strategize your learning\n\n## Links\n\n- [How to Learn Anything 5X Faster | ng-conf & Thinkster.io | #ngconf][howto]\n\n[howto]: https://www.youtube.com/watch?v=SNbT1vquB6k\n\n\n<hr />\n## [Notes on ‚ÄúDOM Angular Manipulation Techniques in Depth‚Äù by Nir Kaufman](https://www.rockyourcode.com/notes-on-angular-dom-manipulation-techniques-in-depth/)\n\nPublished on: 2021-11-23\n\ntags: Angular\n\n\nMinimal notes from [Nir Kaufman](https://nir.life)'s talk.\n\n[![Nir Kaufman - Angular DOM Manipulation Techniques in Dept | JS VidCon](https://i.ytimg.com/vi/5AWh6Qhp-7s/sddefault.jpg)](https://youtube.com/watch?v=5AWh6Qhp-7s 'Nir Kaufman - Angular DOM Manipulation Techniques in Dept | JS VidCon')\n\n## There Is No DOM\n\n- Angular provides an abstraction on the DOM\n- creates a \"View\" object from a (TypeScript) class and a template file\n- **Embedded views** are linked to a template\n- **Host views** are linked to a component\n- Angular creates a **view hierarchy**: the DOM hierarchy can be different!\n\n## View Manipulation\n\n- **Structure manipulation**: `ViewContainer` API\n- **Property modification**: `Renderer2` API\n\n## Links\n\n- [Angular Portal GitHub repository](https://github.com/nirkaufman/teleport)\n- [Nir Kaufman - Angular DOM Manipulation Techniques in Dept | JS VidCon](https://www.youtube.com/watch?v=5AWh6Qhp-7s)\n\n\n<hr />\n## [Notes on ‚ÄúWhich Tests Should We Automate by Angie Jones‚Äù](https://www.rockyourcode.com/notes-on-which-tests-should-we-automate-by-angie-jones/)\n\nPublished on: 2021-11-07\n\ntags: Testing, Lab, Notes\n\n\nNotes from **[Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter][you]**.\n\n[![Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter](https://i.ytimg.com/vi/VL-_pnICmGY/sddefault.jpg)](https://youtube.com/watch?v=VL-_pnICmGY 'Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter')\n\n## Automate All the Things?\n\n- automation requires maintenance\n- lots of automation requires lots of time\n- redundant automation is noisy\n\n## Automate the Right Things\n\nShould we automate this:\n\n1. What is my gut feeling?\n2. What is the risk?\n\n   x-axis multiplied by y-axis\n   **probability** (frequency of use by customers) vs **impact** (if broken, what's the impact to customers?)\n\n3. Value\n\n   **distinctness** (does this test provide new info?) vs **induction to action** (how quickly would this failure be fixed?)\n\n4. Cost-Efficiency\n\n   **quickness** (how quickly can this be scripted) vs **ease** (how easy will it be to script this)\n\n5. History\n\n   **similar to weak areas** (volume of historical failures in related areas) vs **frequency of breaks** (volume of historical failures for this test)\n\nTally up the scores into 3 categories:\n\n- Automate: 67 - 100\n- Possibly automate: 34 - 66\n- Don't automate 0 - 33\n\n## Links\n\n- [Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter][you]\n- [Slides from the talk](https://slides.com/angiejones/which-tests-should-we-automate)\n\n[you]: https://www.youtube.com/watch?v=VL-_pnICmGY\n\n\n<hr />\n## [Nvidia Hybrid GPU on Manjaro](https://www.rockyourcode.com/nvidia-hybrid-gpu-on-manjaro/)\n\nPublished on: 2021-11-02\n\ntags: Unix\n\n\nMy laptop is rocking a dual hybrid GPU with an Intel chip:\n\n> For hybrid GPU laptops with Intel and Nvidia the best solution usually is to have switchable graphics: Intel for normal, everyday usage (uses less power and saves battery) and NVIDIA for games or more graphic intense programs (uses more battery). ([Source][optimusman])\n\nInstalling the correct Nvidia driver and setting up the dual mode was surprisingly tricky on my Manjaro machine.\n\nHere's a reference that worked with an Acer Nitro 5 and a Nvidia GTX 1050 Mobile (GP107M).\n\n## Install Graphics Drivers\n\nManjaro has an inbuilt [settings manager][settings] which allows you to install hardware drivers for your spec.\n\nPer default, my machine was running the `video-hybrid-intel-nvidia-prime`. That sounds like the correct driver, but it didn't load.\n\nRun this command in your terminal for more information:\n\n```bash\ninxi -G\n```\n\nThe [Manjaro wiki][settings] recommends an automatic installation like this:\n\n```bash\nsudo mhwd -a pci nonfree 300\n```\n\nThe above command installs the recommended proprietary drivers for your graphic cards.\n\nThe recommended settings did not work for me. I settled on [optimus-switch][optswitch] for managing my graphic cards.\n\n[optimus-switch][optswitch] allows you to change between running in Intel standalone mode or in hybrid mode with Nvidia.\n\nFirst, we need to install the _correct_ driver for this setup.\n\nInstall `video-nvidia-xxxxx` with the [manjaro settings manager][settings], in my case that's `video-nvidia-390xx`. _Make sure it's NOT `video-nvidia` without the extra number._\n\n## Optimus-Switch\n\nChoose the correct version of [optimus-switch][optswitch] for your login manager. The program supports LightDM, GDM and SDDM.\n\nAs [LightDM](https://wiki.archlinux.org/title/LightDM) always gave me trouble when upgrading my system, I've chosen [SDDM](https://wiki.archlinux.org/title/SDDM) as my display manager.\n\nIf you don't know how to install a display manager, check the [Manjaro wiki](https://wiki.manjaro.org/index.php/Install_Display_Managers).\n\nFollow the instructions in the GitHub repository, here is the example for [SDDM](https://github.com/dglt1/optimus-switch-sddm):\n\n```bash\ngit clone https://github.com/dglt1/optimus-switch-sddm.git\ncd ~/optimus-switch-sddm\nchmod +x install.sh\nsudo ./install.sh\n```\n\nThe installation script will also remove any settings that will interfere with optimus-switch.\n\nIf you encounter any problems, make sure to manually remove the files:\n\n```bash\nsudo rm /etc/X11/xorg.conf.d/90-mhwd.conf\nsudo rm /etc/modprobe.d/mhwd-gpu.conf\nsudo rm /etc/modules-load.d/mhwd-gpu.conf\n```\n\nMake sure to read the [Usage section of the optimus-switch documentation](https://github.com/dglt1/optimus-switch-sddm#usage). You'll need to adjust a few settings to disable the Nvidia GPU if you run in Intel-only mode.\n\nReboot.\n\n## Links\n\n- [optimus-switch][optswitch]\n- [Guide: Install and configure optimus-manager for hybrid GPU setups (Intel/NVIDIA)][optimusman]\n- [Configure Graphics Cards][settings]\n\n[optimusman]: https://archived.forum.manjaro.org/t/guide-install-and-configure-optimus-manager-for-hybrid-gpu-setups-intel-nvidia/92196\n[settings]: https://wiki.manjaro.org/index.php/Configure_Graphics_Cards\n[optswitch]: https://archived.forum.manjaro.org/t/call-for-testing-optimus-switch/75773\n\n\n<hr />\n## [Notes on ‚ÄúRxJS Patterns in Angular‚Äú](https://www.rockyourcode.com/notes-on-rxjs-patterns-in-angular/)\n\nPublished on: 2021-10-27\n\ntags: RxJS, JavaScript, TypeScript, Notes\n\n\nHere is the code from Deborah Kurata's talk **[RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020 #ngconf][you]**, so that I can quickly look it up if I need it.\n\n[![RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020¬†#ngconf](https://i.ytimg.com/vi/uv_sblwIJag/sddefault.jpg)](https://youtube.com/watch?v=uv_sblwIJag 'RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020¬†#ngconf')\n\n## Declarative Data Retrieving\n\n```typescript\nproducts$ = this.http.get<Product[]>(this.productsUrl).pipe(\n  tap((data) => console.log(JSON.stringify(data))),\n  catchError(this.handleError)\n)\n```\n\n```typescript\nproducts$ = this.productService.products$\n```\n\nUse the `async` pipe in the template.\n\n## \"Passing\" Data\n\nTo respond to an action, use a `Subject` or `BehaviorSubject`.\n\n```typescript\nprivate categorySubject = new Subject<number>();\ncategorySelectedAction$ = this.categorySubject.asObservable();\n```\n\n```typescript\nproducts$ = this.categorySelectedAction$.pipe(\n  switchMap((categoryId) =>\n    this.http.get<Product[]>(`${this.url}?cat=${catId}`)\n  ).pipe(\n    tap((data) => console.log(data)),\n    catchError(this.handleError)\n  )\n)\n```\n\n- `switchMap`: stops the current operation and performs the new operation\n- `concatMap`: performs each operation one at a time, in order\n- `mergeMap`: performs each operation concurrently\n\n## Shape on Action Pattern\n\n```typescript\nproducts$ = this.categorySelectedAction$.pipe(\n  switchMap((categoryId) =>\n    this.http.get<Product[]>(`${this.url}?cat=${catId}`)\n  ).pipe(\n    tap((data) => console.log(data)),\n    catchError(this.handleError)\n  )\n)\n```\n\n```typescript\nprivate categorySubject = new Subject<number>();\ncategorySelectedAction$ = this.categorySubject.asObservable();\n```\n\n- `combineLatest`: emits a combined value when any of the Observables emits; won't emit until all Observables have emitted at least once\n- `merge`: emits one value when any of the Observables emit\n- `forkJoin`: when all Observables complete, emit the last value from each Observable into an array\n\n```typescript\nselectedProducts$ = combineLatest([\n  this.products$,\n  this.productSelectedAction$,\n]).pipe(\n  map((products, selectedProductId) =>\n    products.find((product) => product.id === selectedProdudctId)\n  )\n)\n```\n\n## Retrieve Related Data Pattern\n\n### One to One\n\n```typescript\nselectedProduct$ = this.productSelectedAction$.pipe(\n  switchMap((categoryId) => this.http.get<Product>(`${this.url}?/${id}`)).pipe(\n    tap((data) => console.log(data)),\n    catchError(this.handleError)\n  )\n)\n```\n\n```typescript\nproductSupplier$ = this.selectedProduct$.pipe(\n  switchMap((product) =>\n    this.http.get<Supplier>(`${this.url}/${product.supplierId}`)\n  )\n)\n```\n\n### One to Many\n\n```typescript\nproductSuppliers$ = this.selectedProduct$.pipe(\n  switchMap((product) =>\n    forkJoin(\n      product.supplierIds.map((supplierId) =>\n        this.http.get<Supplier>(`${this.url}/${supplierId}`)\n      )\n    )\n  )\n)\n```\n\n## Links\n- [RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020 #ngconf][you]\n- [Deborah Kurata GitHub Angular Action Streams](https://github.com/DeborahK/Angular-ActionStreams)\n\n[you]: https://www.youtube.com/watch?v=uv_sblwIJag\n\n\n<hr />\n## [Apollo Server Express 3 With TypeScript](https://www.rockyourcode.com/apollo-server-express-3-with-typescript/)\n\nPublished on: 2021-10-17\n\ntags: GraphQL, TypeScript, JavaScript, Node.js\n\n\n> apollo-server-express GraphQL + TypeScript + esm\n\nApollo released [Apollo Server 3][server3] in July 2021 with the goal of offering more flexibility and a leaner code-base to build new features.\n\nThe core package for the server is [apollo-server][apollo-server]. If you want to integrate Apollo into an existing Express application or wish to use more advanced features, you'll need [apollo-server-express][ase].\n\nThe [documentation][documentation] is user-friendly but does not provide a turn-key solution to get you started.  \nApollo Server Express needs to start asynchronously which caused some problems.\n\nIn this article, I'll show you the steps to create a simple Apollo Server with TypeScript, nodemon, ts-node and [ESM (ES Modules)][esm].\n\n## Skeleton\n\nCreate a new project with `npm` (you'll need Node.js 12 or later).\n\nI use Linux, so the code in my blog post works for Unix. If you're a Windows user, you'll probably need to adjust some of the commands.\n\n```bash\nmkdir apollo-3-ts && cd apollo-3-ts\nnpm init -y\n```\n\nInstall dependencies:\n\n```bash\nnpm i apollo-server-express apollo-server-core express graphql\nnpm i --save-dev typescript nodemon ts-node tsc-watch @types/node @types/express\n```\n\nSetup TypeScript:\n\n```bash\nnpx tsc --init\n```\n\nThe above command creates a new file called `tsconfig.json`. Adjust the following parts in the file:\n\n```json\n{\n  \"module\": \"ES2020\",\n  \"moduleResolution\": \"Node\",\n  \"outDir\": \"./dist\"\n}\n```\n\nCompiled files (from TypeScript to JavaScript) will land in the dist folder.\n\nAdd these lines to `package.json` to enable ECMAScript modules and allow imports from your compiled TypeScript files:\n\n```json\n{\n  \"type\": \"module\",\n  \"exports\": \"./dist/index.js\"\n}\n```\n\nNow, we will add a script for the development server into `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"watch\": \"nodemon --watch './**/*.{ts,graphql}' --exec 'node --experimental-specifier-resolution=node --loader ts-node/esm' src/index.ts\",\n    \"dev\": \"tsc-watch --onSuccess \\\"npm run watch\\\"\"\n  }\n}\n```\n\nYou can find more details in the links at the end of the article.\n\n## Apollo Server Setup\n\nCreate a new folder called `src` with a file `index.ts`.\n\n```bash\nmkdir src && touch src/index.ts\n```\n\nYou should now have a file structure like this:\n\n```bash\napollo-3-ts <- folder name\n‚îú‚îÄ‚îÄ node_modules\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ package-lock.json\n‚îú‚îÄ‚îÄ src\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts\n‚îî‚îÄ‚îÄ tsconfig.json\n```\n\nCopy the next code snippet into `src/index.ts`. The code is [from the documentation][documentation] with [a fix to promisify the http listener][promisify] with TypeScript.\n\n```ts\nimport { ApolloServer, gql } from 'apollo-server-express'\nimport { ApolloServerPluginDrainHttpServer } from 'apollo-server-core'\nimport express from 'express'\nimport http from 'http'\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`\n\nconst resolvers = {\n  Query: {\n    hello() {\n      return 'world'\n    },\n  },\n}\n\nasync function listen(port: number) {\n  const app = express()\n  const httpServer = http.createServer(app)\n\n  const server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n  })\n  await server.start()\n\n  server.applyMiddleware({ app })\n\n  return new Promise((resolve, reject) => {\n    httpServer.listen(port).once('listening', resolve).once('error', reject)\n  })\n}\n\nasync function main() {\n  try {\n    await listen(4000)\n    console.log('üöÄ Server is ready at http://localhost:4000/graphql')\n  } catch (err) {\n    console.error('üíÄ Error starting the node server', err)\n  }\n}\n\nvoid main()\n```\n\nThe code bootstraps the Apollo server with a minimal \"Hello, world\" resolver to get you started.\n\nNow you can fire off the server from the command line:\n\n```bash\nnpm run dev\n```\n\nYou should be able to reach the GraphQL endpoint in your browser under `http://localhost:4000/graphql` and Apollo Studio should pop up.\n\n## Thoughts\n\nIt was tricky to find out how to get the [documentation example][documentation] to work as it needs a JavaScript promise to listen to the server.\n\nLuckily, [GitHub][promisify] had the solution. I only needed to know what to look for.\n\n## Links\n\n- [Choosing an Apollo Server package][documentation]\n- [Typescript And Native esm on Node.js](https://2ality.com/2021/06/typescript-esm-nodejs.html)\n- [Node.js Setup With TypeScript, Nodemon and ESM][tsesm]\n- [Unable to import ESM .ts module in node][so]\n- [Promisify server.listen][promisify]\n\n[promisify]: https://github.com/nodejs/node/issues/21482\n[server3]: https://www.apollographql.com/blog/announcement/backend/its-here-introducing-apollo-server-3/\n[apollo-server]: https://npm.im/apollo-server\n[ase]: https://npm.im/apollo-server-express\n[esm]: https://2ality.com/2021/06/typescript-esm-nodejs.html\n[documentation]: https://www.apollographql.com/docs/apollo-server/integrations/middleware/#apollo-server-express\n[tsesm]: https://www.rockyourcode.com/nodejs-setup-with-typescript-nodemon-and-esm/\n[so]: https://stackoverflow.com/questions/63742790/unable-to-import-esm-ts-module-in-node\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}