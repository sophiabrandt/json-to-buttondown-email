{"titles":[" Next.js With Apollo, SSR, Cookies, and Typescript"],"content":"\n  <p>Hello ðŸ‘‹! Thanks for subscribing.</p>\n  \n  <h2><a href=https://www.rockyourcode.com/nextjs-with-apollo-ssr-cookies-and-typescript/>Next.js With Apollo, SSR, Cookies, and Typescript</a></h2>\n  <p>Published on: 2021-04-17</p>\n  <p>tags: React.js, TypeScript, JavaScript</p>\n  <blockquote>\n<p>How to wire up a Next.js TypeScript application with Apollo Client, using Server Side Rendering and Static Site Generation</p>\n</blockquote>\n<p>In this blog post I&rsquo;ll show you how I created a working Next.js TypeScript setup with Apollo Client.</p>\n<p>You can fetch data from a GraphQL endpoint both on the Node.js server as well as on the Next.js client, utilizing the Apollo Cache.</p>\n<p>You are also able to work with protected endpoints using cookie-based authentication.</p>\n<p>With minor adjustments, this setup should be applicable for JWT (JSON Web Tokens), too.</p>\n<h2 id=\"initial-situation\">Initial Situation</h2>\n<p>I have a GraphQL server that uses sessions for authentication (in the form of cookies). In production, the server will share the same root domain as the client (Next.js application).</p>\n<p>For example, the server will be on <code>backend.example.com</code> and Next.js will be on <code>frontend.example.com</code>.</p>\n<p>It&rsquo;s important to have both on the same domain to prevent problems with <code>SameSite</code>. Newer browsers will prevent you to set third-party cookies if you don&rsquo;t mark them as <code>SameSite=None</code> and <code>Secure</code>.<br>\nYou will need to configure these settings on the back-end server. Depending on how you&rsquo;ve created your GraphQL server, this won&rsquo;t be possible.<br>\nFor example, I am using <a href=\"https://www.keystonejs.com/\">Keystone.js (Next)</a> <em>which does not allow the developer to set <code>SameSite=none</code></em>.</p>\n<p>You can read more about cookies on <a href=\"https://www.valentinog.com/blog/cookies/#working-with-samesite\">Valentino Gagliardi&rsquo;s post</a>.</p>\n<h2 id=\"nextjs-setup\">Next.js Setup</h2>\n<p>I&rsquo;ve been using Poulin Trognon&rsquo;s <a href=\"https://paulintrognon.fr/blog/typescript-prettier-eslint-next-js\">guide on how to setup Next.js with TypeScript</a>.</p>\n<p>The basics are clear-cut. Create a new Next.js application with their CLI (<code>create-next-app</code>), install TypeScript and create a <code>tsconfig.json</code> file.</p>\n<p>Please follow the steps in the <a href=\"https://nextjs.org/docs/getting-started\">Next.js documentation for getting started</a> and <a href=\"https://nextjs.org/docs/basic-features/typescript\">their documentation about using TypeScript</a>.</p>\n<h2 id=\"apollo-client\">Apollo Client</h2>\n<p>The following material originally is from <a href=\"https://github.com/vercel/next.js/blob/canary/examples/with-apollo/lib/apolloClient.js\">Vercel&rsquo;s Next.js example</a> as well as the <a href=\"https://github.com/borisowsky/next-advanced-apollo-starter\">Next Advanced Starter</a> by Nikita Borisowsky.</p>\n<p>While these two resource were invaluable, they needed some minor tweaks for my setup and some searching in GitHub issues.</p>\n<p>Create a file for the Apollo client:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ts\" data-lang=\"ts\"><span style=\"color:#66d9ef\">import</span> {\n  <span style=\"color:#a6e22e\">ApolloClient</span>,\n  <span style=\"color:#a6e22e\">ApolloLink</span>,\n  <span style=\"color:#a6e22e\">InMemoryCache</span>,\n  <span style=\"color:#a6e22e\">NormalizedCacheObject</span>,\n} <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;@apollo/client&#39;</span>\n<span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">onError</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;@apollo/link-error&#39;</span>\n<span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">createUploadLink</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;apollo-upload-client&#39;</span>\n<span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">merge</span> <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;deepmerge&#39;</span>\n<span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">IncomingHttpHeaders</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;http&#39;</span>\n<span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">fetch</span> <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;isomorphic-unfetch&#39;</span>\n<span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">isEqual</span> <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;lodash/isEqual&#39;</span>\n<span style=\"color:#66d9ef\">import</span> <span style=\"color:#66d9ef\">type</span> { <span style=\"color:#a6e22e\">AppProps</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;next/app&#39;</span>\n<span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">useMemo</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;react&#39;</span>\n<span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">paginationField</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;./paginationField&#39;</span>\n\n<span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">APOLLO_STATE_PROP_NAME</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;__APOLLO_STATE__&#39;</span>\n\n<span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">apolloClient</span>: <span style=\"color:#66d9ef\">ApolloClient</span>&lt;<span style=\"color:#f92672\">NormalizedCacheObject</span>&gt; <span style=\"color:#f92672\">|</span> <span style=\"color:#66d9ef\">undefined</span>\n\n<span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">createApolloClient</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">headers</span>: <span style=\"color:#66d9ef\">IncomingHttpHeaders</span> <span style=\"color:#f92672\">|</span> <span style=\"color:#66d9ef\">null</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">null</span>) <span style=\"color:#f92672\">=&gt;</span> {\n  <span style=\"color:#75715e\">// isomorphic fetch for passing the cookies along with each GraphQL request\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">enhancedFetch</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">url</span>: <span style=\"color:#66d9ef\">RequestInfo</span>, <span style=\"color:#a6e22e\">init</span>: <span style=\"color:#66d9ef\">RequestInit</span>) <span style=\"color:#f92672\">=&gt;</span> {\n    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">fetch</span>(<span style=\"color:#a6e22e\">url</span>, {\n      ...<span style=\"color:#a6e22e\">init</span>,\n      <span style=\"color:#a6e22e\">headers</span><span style=\"color:#f92672\">:</span> {\n        ...<span style=\"color:#a6e22e\">init</span>.<span style=\"color:#a6e22e\">headers</span>,\n        <span style=\"color:#e6db74\">&#39;Access-Control-Allow-Origin&#39;</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;*&#39;</span>,\n        <span style=\"color:#75715e\">// here we pass the cookie along for each request\n</span><span style=\"color:#75715e\"></span>        <span style=\"color:#a6e22e\">Cookie</span>: <span style=\"color:#66d9ef\">headers?.cookie</span> <span style=\"color:#f92672\">??</span> <span style=\"color:#e6db74\">&#39;&#39;</span>,\n      },\n    }).<span style=\"color:#a6e22e\">then</span>((<span style=\"color:#a6e22e\">response</span>) <span style=\"color:#f92672\">=&gt;</span> <span style=\"color:#a6e22e\">response</span>)\n  }\n\n  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">ApolloClient</span>({\n    <span style=\"color:#75715e\">// SSR only for Node.js\n</span><span style=\"color:#75715e\"></span>    <span style=\"color:#a6e22e\">ssrMode</span>: <span style=\"color:#66d9ef\">typeof</span> window <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;undefined&#39;</span>,\n    <span style=\"color:#a6e22e\">link</span>: <span style=\"color:#66d9ef\">ApolloLink.from</span>([\n      <span style=\"color:#a6e22e\">onError</span>(({ <span style=\"color:#a6e22e\">graphQLErrors</span>, <span style=\"color:#a6e22e\">networkError</span> }) <span style=\"color:#f92672\">=&gt;</span> {\n        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">graphQLErrors</span>)\n          <span style=\"color:#a6e22e\">graphQLErrors</span>.<span style=\"color:#a6e22e\">forEach</span>(({ <span style=\"color:#a6e22e\">message</span>, <span style=\"color:#a6e22e\">locations</span>, <span style=\"color:#a6e22e\">path</span> }) <span style=\"color:#f92672\">=&gt;</span>\n            <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(\n              <span style=\"color:#e6db74\">`[GraphQL error]: Message: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">message</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">, Location: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">locations</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">, Path: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">path</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">`</span>\n            )\n          )\n        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">networkError</span>)\n          <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(\n            <span style=\"color:#e6db74\">`[Network error]: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">networkError</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">. Backend is unreachable. Is it running?`</span>\n          )\n      }),\n      <span style=\"color:#75715e\">// this uses apollo-link-http under the hood, so all the options here come from that package\n</span><span style=\"color:#75715e\"></span>      <span style=\"color:#a6e22e\">createUploadLink</span>({\n        <span style=\"color:#a6e22e\">uri</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;http://localhost:3000/api/graphql&#39;</span>,\n        <span style=\"color:#75715e\">// Make sure that CORS and cookies work\n</span><span style=\"color:#75715e\"></span>        <span style=\"color:#a6e22e\">fetchOptions</span><span style=\"color:#f92672\">:</span> {\n          <span style=\"color:#a6e22e\">mode</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;cors&#39;</span>,\n        },\n        <span style=\"color:#a6e22e\">credentials</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;include&#39;</span>,\n        <span style=\"color:#a6e22e\">fetch</span>: <span style=\"color:#66d9ef\">enhancedFetch</span>,\n      }),\n    ]),\n    <span style=\"color:#a6e22e\">cache</span>: <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">InMemoryCache</span>(),\n  })\n}\n\n<span style=\"color:#66d9ef\">type</span> <span style=\"color:#a6e22e\">InitialState</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">NormalizedCacheObject</span> <span style=\"color:#f92672\">|</span> <span style=\"color:#66d9ef\">undefined</span>\n\n<span style=\"color:#66d9ef\">interface</span> <span style=\"color:#a6e22e\">IInitializeApollo</span> {\n  <span style=\"color:#a6e22e\">headers?</span>: <span style=\"color:#66d9ef\">IncomingHttpHeaders</span> <span style=\"color:#f92672\">|</span> <span style=\"color:#66d9ef\">null</span>\n  <span style=\"color:#a6e22e\">initialState?</span>: <span style=\"color:#66d9ef\">InitialState</span> <span style=\"color:#f92672\">|</span> <span style=\"color:#66d9ef\">null</span>\n}\n\n<span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">initializeApollo</span> <span style=\"color:#f92672\">=</span> (\n  { <span style=\"color:#a6e22e\">headers</span>, <span style=\"color:#a6e22e\">initialState</span> }<span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">IInitializeApollo</span> <span style=\"color:#f92672\">=</span> {\n    <span style=\"color:#a6e22e\">headers</span>: <span style=\"color:#66d9ef\">null</span>,\n    <span style=\"color:#a6e22e\">initialState</span>: <span style=\"color:#66d9ef\">null</span>,\n  }\n) <span style=\"color:#f92672\">=&gt;</span> {\n  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">_apolloClient</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">apolloClient</span> <span style=\"color:#f92672\">??</span> <span style=\"color:#a6e22e\">createApolloClient</span>(<span style=\"color:#a6e22e\">headers</span>)\n\n  <span style=\"color:#75715e\">// If your page has Next.js data fetching methods that use Apollo Client, the initial state\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// get hydrated here\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">initialState</span>) {\n    <span style=\"color:#75715e\">// Get existing cache, loaded during client side data fetching\n</span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">existingCache</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">_apolloClient</span>.<span style=\"color:#a6e22e\">extract</span>()\n\n    <span style=\"color:#75715e\">// Merge the existing cache into data passed from getStaticProps/getServerSideProps\n</span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">data</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">merge</span>(<span style=\"color:#a6e22e\">initialState</span>, <span style=\"color:#a6e22e\">existingCache</span>, {\n      <span style=\"color:#75715e\">// combine arrays using object equality (like in sets)\n</span><span style=\"color:#75715e\"></span>      <span style=\"color:#a6e22e\">arrayMerge</span><span style=\"color:#f92672\">:</span> (<span style=\"color:#a6e22e\">destinationArray</span>, <span style=\"color:#a6e22e\">sourceArray</span>) <span style=\"color:#f92672\">=&gt;</span> [\n        ...<span style=\"color:#a6e22e\">sourceArray</span>,\n        ...<span style=\"color:#a6e22e\">destinationArray</span>.<span style=\"color:#a6e22e\">filter</span>((<span style=\"color:#a6e22e\">d</span>) <span style=\"color:#f92672\">=&gt;</span>\n          <span style=\"color:#a6e22e\">sourceArray</span>.<span style=\"color:#a6e22e\">every</span>((<span style=\"color:#a6e22e\">s</span>) <span style=\"color:#f92672\">=&gt;</span> <span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">isEqual</span>(<span style=\"color:#a6e22e\">d</span>, <span style=\"color:#a6e22e\">s</span>))\n        ),\n      ],\n    })\n\n    <span style=\"color:#75715e\">// Restore the cache with the merged data\n</span><span style=\"color:#75715e\"></span>    <span style=\"color:#a6e22e\">_apolloClient</span>.<span style=\"color:#a6e22e\">cache</span>.<span style=\"color:#a6e22e\">restore</span>(<span style=\"color:#a6e22e\">data</span>)\n  }\n\n  <span style=\"color:#75715e\">// For SSG and SSR always create a new Apollo Client\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> window <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;undefined&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">_apolloClient</span>\n  <span style=\"color:#75715e\">// Create the Apollo Client once in the client\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">apolloClient</span>) <span style=\"color:#a6e22e\">apolloClient</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">_apolloClient</span>\n\n  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">_apolloClient</span>\n}\n\n<span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">addApolloState</span> <span style=\"color:#f92672\">=</span> (\n  <span style=\"color:#a6e22e\">client</span>: <span style=\"color:#66d9ef\">ApolloClient</span>&lt;<span style=\"color:#f92672\">NormalizedCacheObject</span>&gt;,\n  <span style=\"color:#a6e22e\">pageProps</span>: <span style=\"color:#66d9ef\">AppProps</span>[<span style=\"color:#e6db74\">&#39;pageProps&#39;</span>]\n) <span style=\"color:#f92672\">=&gt;</span> {\n  <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">pageProps</span><span style=\"color:#f92672\">?</span>.<span style=\"color:#a6e22e\">props</span>) {\n    <span style=\"color:#a6e22e\">pageProps</span>.<span style=\"color:#a6e22e\">props</span>[<span style=\"color:#a6e22e\">APOLLO_STATE_PROP_NAME</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">client</span>.<span style=\"color:#a6e22e\">cache</span>.<span style=\"color:#a6e22e\">extract</span>()\n  }\n\n  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">pageProps</span>\n}\n\n<span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">useApollo</span>(<span style=\"color:#a6e22e\">pageProps</span>: <span style=\"color:#66d9ef\">AppProps</span>[<span style=\"color:#e6db74\">&#39;pageProps&#39;</span>]) {\n  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">state</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">pageProps</span>[<span style=\"color:#a6e22e\">APOLLO_STATE_PROP_NAME</span>]\n  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">store</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">useMemo</span>(() <span style=\"color:#f92672\">=&gt;</span> <span style=\"color:#a6e22e\">initializeApollo</span>({ <span style=\"color:#a6e22e\">initialState</span>: <span style=\"color:#66d9ef\">state</span> }), [\n    <span style=\"color:#a6e22e\">state</span>,\n  ])\n  <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">store</span>\n}\n</code></pre></div><p>Of course, you will need to install a few libraries:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-sh\" data-lang=\"sh\">yarn add @apollo/client @apollo/link-error @apollo/react-common @apollo/react-hooks deepmerge lodash graphql graphql-upload isomorphic-unfetch apollo-upload-client\n</code></pre></div><p>The code above uses the <a href=\"https://github.com/jaydenseric/apollo-upload-client#apollo-upload-client\">apollo-upload-client</a> as an alternative for the standard <code>HttpLink</code>. If you don&rsquo;t plan on uploading files, you can replace the <code>createUploadLink</code> part above:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ts\" data-lang=\"ts\"><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">httpLink</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">HttpLink</span>({\n  <span style=\"color:#a6e22e\">uri</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;http://localhost:3000/api-graphql&#39;</span>,\n  <span style=\"color:#a6e22e\">credentials</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;include&#39;</span>,\n  <span style=\"color:#a6e22e\">fetch</span>: <span style=\"color:#66d9ef\">enhancedFetch</span>,\n})\n</code></pre></div><p>After you&rsquo;ve created all the scaffolding, you will need to connect it to your Next.js application.</p>\n<p><a href=\"https://nextjs.org/docs/advanced-features/custom-app\">Next.js uses the <code>App</code> component to initialize pages.</a> You need to create the component as <code>./pages/_app.tsx</code>:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ts\" data-lang=\"ts\"><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">AppProps</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;next/app&#39;</span>\n<span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">ApolloProvider</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;@apollo/client&#39;</span>\n\n<span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">useApollo</span> } <span style=\"color:#66d9ef\">from</span> <span style=\"color:#e6db74\">&#39;../lib/apollo&#39;</span>\n\n<span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">App</span> <span style=\"color:#f92672\">=</span> ({ <span style=\"color:#a6e22e\">Component</span>, <span style=\"color:#a6e22e\">pageProps</span> }<span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">AppProps</span>) <span style=\"color:#f92672\">=&gt;</span> {\n  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">apolloClient</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">useApollo</span>(<span style=\"color:#a6e22e\">pageProps</span>)\n\n  <span style=\"color:#66d9ef\">return</span> (\n    &lt;<span style=\"color:#f92672\">ApolloProvider</span> <span style=\"color:#a6e22e\">client</span><span style=\"color:#f92672\">=</span>{<span style=\"color:#a6e22e\">apolloClient</span>}&gt;\n      &lt;<span style=\"color:#f92672\">Component</span> {<span style=\"color:#a6e22e\">...pageProps</span>} /&gt;\n    &lt;/<span style=\"color:#f92672\">ApolloProvider</span>&gt;\n  )\n}\n\n<span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">default</span> <span style=\"color:#a6e22e\">App</span>\n</code></pre></div><h2 id=\"use-apollo-for-incremental-static-site-generation\">Use Apollo for (Incremental) Static Site Generation</h2>\n<p>Let&rsquo;s say that you have a list of products that you want to statically create at build time. The products don&rsquo;t require authentication/authorization.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ts\" data-lang=\"ts\"><span style=\"color:#75715e\">// first create an Apollo client for the server\n</span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">client</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">initializeApollo</span>()\n\n<span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">getStaticPaths</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">async</span> () <span style=\"color:#f92672\">=&gt;</span> {\n  <span style=\"color:#75715e\">// here we use the Apollo client to retrieve all products\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">const</span> {\n    <span style=\"color:#a6e22e\">data</span><span style=\"color:#f92672\">:</span> { <span style=\"color:#a6e22e\">allProducts</span> },\n  } <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">await</span> <span style=\"color:#a6e22e\">client</span>.<span style=\"color:#a6e22e\">query</span>&lt;<span style=\"color:#f92672\">AllProductsQuery</span>&gt;({ <span style=\"color:#a6e22e\">query</span>: <span style=\"color:#66d9ef\">ALL_PRODUCTS_QUERY</span> })\n  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">ids</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">allProducts</span><span style=\"color:#f92672\">?</span>.<span style=\"color:#a6e22e\">map</span>((<span style=\"color:#a6e22e\">product</span>) <span style=\"color:#f92672\">=&gt;</span> <span style=\"color:#a6e22e\">product</span><span style=\"color:#f92672\">?</span>.<span style=\"color:#a6e22e\">id</span>)\n  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">paths</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">ids</span><span style=\"color:#f92672\">?</span>.<span style=\"color:#a6e22e\">map</span>((<span style=\"color:#a6e22e\">id</span>) <span style=\"color:#f92672\">=&gt;</span> ({ <span style=\"color:#a6e22e\">params</span><span style=\"color:#f92672\">:</span> { <span style=\"color:#a6e22e\">id</span> } }))\n\n  <span style=\"color:#66d9ef\">return</span> {\n    <span style=\"color:#a6e22e\">paths</span>,\n    <span style=\"color:#a6e22e\">fallback</span>: <span style=\"color:#66d9ef\">true</span>,\n  }\n}\n\n<span style=\"color:#66d9ef\">interface</span> <span style=\"color:#a6e22e\">IStaticProps</span> {\n  <span style=\"color:#a6e22e\">params</span><span style=\"color:#f92672\">:</span> { <span style=\"color:#a6e22e\">id</span>: <span style=\"color:#66d9ef\">string</span> <span style=\"color:#f92672\">|</span> <span style=\"color:#66d9ef\">undefined</span> }\n}\n\n<span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">getStaticProps</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">params</span><span style=\"color:#f92672\">:</span> { <span style=\"color:#a6e22e\">id</span> } }<span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">IStaticProps</span>) <span style=\"color:#f92672\">=&gt;</span> {\n  <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">id</span>) {\n    <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">&#39;Parameter is invalid&#39;</span>)\n  }\n\n  <span style=\"color:#66d9ef\">try</span> {\n    <span style=\"color:#66d9ef\">const</span> {\n      <span style=\"color:#a6e22e\">data</span><span style=\"color:#f92672\">:</span> { <span style=\"color:#a6e22e\">Product</span>: <span style=\"color:#66d9ef\">product</span> },\n    } <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">await</span> <span style=\"color:#a6e22e\">client</span>.<span style=\"color:#a6e22e\">query</span>({\n      <span style=\"color:#a6e22e\">query</span>: <span style=\"color:#66d9ef\">PRODUCT_QUERY</span>,\n      <span style=\"color:#a6e22e\">variables</span><span style=\"color:#f92672\">:</span> { <span style=\"color:#a6e22e\">id</span> },\n    })\n    <span style=\"color:#66d9ef\">return</span> {\n      <span style=\"color:#a6e22e\">props</span><span style=\"color:#f92672\">:</span> {\n        <span style=\"color:#a6e22e\">id</span>: <span style=\"color:#66d9ef\">product?.id</span>,\n        <span style=\"color:#a6e22e\">title</span>: <span style=\"color:#66d9ef\">product?.name</span>,\n      },\n      <span style=\"color:#a6e22e\">revalidate</span>: <span style=\"color:#66d9ef\">60</span>,\n    }\n  } <span style=\"color:#66d9ef\">catch</span> (<span style=\"color:#a6e22e\">err</span>) {\n    <span style=\"color:#66d9ef\">return</span> {\n      <span style=\"color:#a6e22e\">notFound</span>: <span style=\"color:#66d9ef\">true</span>,\n    }\n  }\n}\n</code></pre></div><p>The full <a href=\"https://github.com/sophiabrandt/nextjs-ecommerce/blob/main/frontend/pages/product/%5Bid%5D/index.tsx\">example is available on GitHub</a>.</p>\n<h2 id=\"use-apollo-for-server-side-rendering\">Use Apollo for Server-Side Rendering</h2>\n<p>Let&rsquo;s see an example for the orders page where authenticated users can see a list of their orders:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ts\" data-lang=\"ts\"><span style=\"color:#66d9ef\">export</span> <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">getServerSideProps</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">async</span> (\n  <span style=\"color:#a6e22e\">context</span>: <span style=\"color:#66d9ef\">GetServerSidePropsContext</span>\n) <span style=\"color:#f92672\">=&gt;</span> {\n  <span style=\"color:#75715e\">// pass along the headers for authentication\n</span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">client</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">initializeApollo</span>({ <span style=\"color:#a6e22e\">headers</span>: <span style=\"color:#66d9ef\">context?.req?.headers</span> })\n  <span style=\"color:#66d9ef\">try</span> {\n    <span style=\"color:#66d9ef\">await</span> <span style=\"color:#a6e22e\">client</span>.<span style=\"color:#a6e22e\">query</span>&lt;<span style=\"color:#f92672\">AllOrdersQuery</span>&gt;({\n      <span style=\"color:#a6e22e\">query</span>: <span style=\"color:#66d9ef\">ALL_ORDERS_QUERY</span>,\n    })\n\n    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">addApolloState</span>(<span style=\"color:#a6e22e\">client</span>, {\n      <span style=\"color:#a6e22e\">props</span><span style=\"color:#f92672\">:</span> {},\n    })\n  } <span style=\"color:#66d9ef\">catch</span> {\n    <span style=\"color:#66d9ef\">return</span> {\n      <span style=\"color:#a6e22e\">props</span><span style=\"color:#f92672\">:</span> {},\n      <span style=\"color:#a6e22e\">redirect</span><span style=\"color:#f92672\">:</span> {\n        <span style=\"color:#a6e22e\">destination</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;/signin&#39;</span>,\n        <span style=\"color:#a6e22e\">permanent</span>: <span style=\"color:#66d9ef\">false</span>,\n      },\n    }\n  }\n}\n</code></pre></div><p>You can also see the <a href=\"https://github.com/sophiabrandt/nextjs-ecommerce/blob/main/frontend/pages/orders.tsx\">complete code on GitHub</a>.</p>\n<h2 id=\"running-in-production\">Running in Production</h2>\n<p>You can see the <a href=\"https://github.com/sophiabrandt/nextjs-ecommerce\">repository on GitHub</a>.</p>\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n<li><a href=\"https://www.valentinog.com/blog/cookies/\">A practical, Complete Tutorial on HTTP cookies</a> by Valentino Gagliardi</li>\n<li><a href=\"https://paulintrognon.fr/blog/typescript-prettier-eslint-next-js\">Start a clean Next.js project with TypeScript, ESLint and Prettier from scratch</a> by Poulin Trognon</li>\n<li><a href=\"https://github.com/borisowsky/next-advanced-apollo-starter\">Next.js Advanced Apollo Starter w/ Apollo Client 3, TypeScript, I18n, Docker and more&hellip;</a> by Nikita Borisowsky</li>\n<li><a href=\"https://github.com/wesbos/Advanced-React\">Wes Bos: Advanced React</a></li>\n</ul>\n\n  <hr />\n  <p>Thank you for reading my blog posts.</p>\n  <p>Don't hesitate to reach out via <a href=\"mailto:hi@rockyourcode.com\">email</a> or <a href=\"https://twitter.com/hisophiabrandt\">Twitter</a>!\n  "}