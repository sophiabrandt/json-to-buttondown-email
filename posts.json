{"titles":[" Setting Up a Modern Preact Application With Typescript, Vite and Vitest"," Notes on ‚ÄúHow to Speak‚Äù"," Use Ionic Angular With pnpm"," Notes on ‚ÄúKeeping Your Career Current‚Äù"],"content":"Hello üëã! Thanks for subscribing.\n\n\nHere are my latest articles:\n\n## [Setting Up a Modern Preact Application With Typescript, Vite and Vitest](https://www.rockyourcode.com/setting-up-a-modern-preact-application-with-typescript-vite-and-vitest/)\n\nPublished on: 2022-09-19\n\ntags: TypeScript, React.js, Preact.js, Testing\n\n\n> Wiring up a TypeScript environment with Preact, Vite and Vitest and vitest-dom\n\nI have heard good things about Vite and Vitest. When I gave them a test-drive, I stumbled over some minor annoyances in getting the whole suite running.\n\nI'm writing down the steps I took, maybe they help you.\n\nThe article is basically a re-write of [a blog post by Tomoki Miyaci][miyauci] adjusted to my needs.\n\nTooling:\n\n- TypeScript\n- Vite\n- Vitest (with vitest-dom)\n- Preact\n- Prettier\n- ESLint\n- husky & lint-staged\n- commitlint\n\nAll my commands use [pnpm](https://pnpm.io), feel free to replace them with npm or yarn.\n\n## Vite\n\n```sh\npnpm create vite <project-name> --template preact-ts\ncd <project-name>\npnpm install\n```\n\n## ESLint & prettier\n\n```sh\npnpm i -D eslint eslint-config-prettier \\\n          prettier \\\n          @typescript-eslint/parser\n```\n\nCreate a new file called `.eslintrc` with the following content:\n\n```json\n{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true\n  },\n  \"extends\": [\"eslint:recommended\", \"preact\", \"prettier\"],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"ecmaVersion\": \"latest\",\n    \"sourceType\": \"module\"\n  },\n  \"settings\": {\n    \"jest\": {\n      \"version\": 27\n    }\n  },\n  \"ignorePatterns\": [\"*.d.ts\"],\n  \"rules\": {}\n}\n```\n\nOne wrinkle was the Jest settings option. I know I wanted to use Vite, but eslint needs to know the Jest version for some of its tests.\n\nPrettier configuration (`.prettierrc`), adjust to your needs:\n\n```\n{\n  \"trailingComma\": \"es5\",\n  \"semi\": false,\n  \"singleQuote\": true\n}\n```\n\nLet's adjust `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"lint:fix\": \"eslint --fix --ext .ts,tsx --ignore-path .gitignore .\",\n    \"prettier:write\": \"prettier -u -w --ignore-path .gitignore \\\"*.{ts,tsx,css,html}\\\"\",\n}\n```\n\n## husky & lint-staged\n\nConfigure [lint-staged](https://www.npmjs.com/package/lint-staged) inside `package.json`:\n\n```json\n{\n  \"lint-staged\": {\n    \"*.{ts,tsx}\": [\"pnpm run lint:fix\", \"pnpm run prettier:write\"],\n    \"*.{html,css,js,json}\": \"pnpm run prettier:write\"\n  }\n}\n```\n\nWe run ESLint and prettier on TypeScript files in sequential order. For other files, prettier suffices.\n\nNow we need [husky](https://typicode.github.io/husky/#/).\n\nWe initialize it with a script:\n\n```sh\npnpm dlx husky-init && pnpm install\n```\n\nThe above command will setup the tool and create the necessary files and hooks.\n\nThe default hook runs before committing the files to the staging area.  \nYou can find it under `.husky/pre-commit`:\n\n```sh\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\npnpm exec lint-staged\n## if you want to run your tests before commiting,\n## uncomment next line\n# pnpm exec vitest run\n```\n\n## commitlint\n\n> commitlint checks if your commit messages meet the [conventional commit](https://conventionalcommits.org/) format.\n\nExample:\n\n> chore: run tests on travis ci\n\nI personally find it quite useful to enforce a uniform commit style.  \n[commitlint](https://github.com/conventional-changelog/commitlint/) pairs well with husky.\n\n```sh\npnpm add -D @commitlint/{config-conventional,cli}\n```\n\nLet's add a configuration file (`.commitlintrc.json`):\n\n```sh\n{\n  \"extends\": [\"@commitlint/config-conventional\"]\n}\n```\n\nNow we need a hook for husky. Run the following command in your terminal:\n\n```sh\npnpm dlx husky add \\\n  .husky/commit-msg 'pnpm exec commitlint --edit'\n```\n\n## Vitest\n\nInstallation:\n\n```sh\npnpm add -D vitest vitest-dom happy-dom\n```\n\n[vitest-dom](https://github.com/chaance/vitest-dom) extends the standard Jest matchers with convenient methods like `.toBeDisabled`.  \nNow you can write tests that assert on the state of the DOM.  \nThe package is a fork of [@testing-library/jest-dom](https://github.com/testing-library/jest-dom).\n\nConfiguring vitest with the `.vite.config.ts`:\n\n```ts\n/// <reference types=\"vitest\" />\nimport { fileURLToPath } from 'url'\nimport { defineConfig } from 'vite'\nimport preact from '@preact/preset-vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  define: {\n    'import.meta.vitest': 'undefined',\n  },\n  plugins: [preact()],\n  test: {\n    environment: 'happy-dom',\n    setupFiles: ['./__test__/test-setup.ts'],\n    includeSource: ['src/**/*.{ts,tsx}'],\n    coverage: {\n      reporter: ['text-summary', 'text'],\n    },\n    mockReset: true,\n    restoreMocks: true,\n  },\n})\n```\n\nThe code section `import.meta.vitest` allows you to [run tests within your source code](https://vitest.dev/guide/in-source.html).\n\nFor my test setup I've made a separate `__test__` folder with a file called `test-setup.ts`:\n\n```ts\nimport 'vitest-dom/extend-expect'\nimport * as domMatchers from 'vitest-dom/matchers'\nimport { expect } from 'vitest'\n\nexpect.extend(domMatchers)\n```\n\nHere I add the `vitest-dom` extra matchers. You can add more setup logic if needed.\n\n## Sources\n\n- [Building a Typescript Environment for Preact with Vite][miyauci]\n- [Diving Into Husky and lint-staged][laurie]\n\n[laurie]: https://laurieontech.com/posts/husky/\n[miyauci]: https://miyauchi.dev/posts/vite-preact-typescript/\n\n\n<hr />\n## [Notes on ‚ÄúHow to Speak‚Äù](https://www.rockyourcode.com/notes-on-how-to-speak/)\n\nPublished on: 2022-08-16\n\ntags: Lab, Notes\n\n\nHere are notes on the MIT lecture **[How to Speak][youtube]** by Patrick Winston:\n\n[![How to Speak](https://i.ytimg.com/vi/Unzc731iCUY/sddefault.jpg)](https://youtube.com/watch?v=Unzc731iCUY 'How to Speak')\n\n## How to Start\n\nStart with an empowerment **promise**.\n\n## Heuristics\n\nCycle on the subject.\n\nBuild a fence around an idea. This helps distinguish your idea.\n\nUse verbal punctuation.  \nPeople occasionally fog out. Provide landmarks for them to get back on track.\n\nAsk a question.  \nYou can wait for 7 seconds for an answer. Choose your question carefully. Not too obvious, not too hard.\n\n## Time and Place\n\nAround 11am: people are awake, before the meal.\n\nPlace: well-lit, audience should not fall asleep.\n\nCase the place before.\n\n## Tools\n\nSlides: for exposing knowledge\n\nAlways: too many slides, too many words.\n\nBlackboard & chalk: for informing, teaching, lecturing.\n\nBoard:\n\n- has a graphic quality\n- speed: The speed in which you write down things corresponds to the speed on which the audience can grasp your ideas\n- target: speaker has something to do with their hands\n\n**Props** are important for mirror neurons: audience is more engaged because they feel like writing on the board or using the prop.\n\n### How to Improve Slides\n\n- do not read\n- be in the image\n- keep images simple\n- eliminate clutter\n\nForce the audience to listen to you instead of reading the slides.\n\nAvoid the laser pointer crime: you need to point to the slides and lose contact to the audience.\n\n## How to Inspire\n\nExhibit passion.\n\n## How to Teach People How to Think\n\nProvide people with\n\n- the stories they need to know\n- questions they need to ask about those stories\n- mechanisms for analyzing\n- ways of putting stories together\n- ways of evaluating how reliable a story is\n\n## How to Persuade\n\n### Job Talks\n\nYou have 5 minutes to show that\n* you have vision\n* done something\n\nVision relates to a problem that somebody cares about. You offer something new in your approach.\n\nList the steps to solve the problem you presented - you don't have to have completed all steps.\n\nEnumerate your contributions to establish that you've done something.\n\n### Get Recognition\n\nWhy should you care?  \nYou never get used to being ignored.\n\nHow?\n\nYou need a\n* symbol for your work\n* slogan\n* surprise\n* salient idea\n* story\n\n## How to Stop\n\n### Final Slide\n\nDon'ts:\n\n* thank collaborators (put it on the first slide)\n* questions?\n* more details see link\n* \"the end\"\n* conclusions\n\nInstead:\n\nContributions\n\n### Final Words\n\n\"Thank you\" is a weak move.\n\nYou can tell a joke.\n\nSalute the audience.\n\n[youtube]: https://youtube.com/watch?v=Unzc731iCUY\n\n\n<hr />\n## [Use Ionic Angular With pnpm](https://www.rockyourcode.com/use-ionic-angular-with-pnpm/)\n\nPublished on: 2022-06-27\n\ntags: Angular, Ionic\n\n\nIonic is an \"open source UI toolkit for building performant, high-quality mobile and desktop apps using web technologies\".\n\nI use it to explore building native apps for iOs and Android using Angular.\n\nIonic has a CLI (command line interface) to scaffold a project.\n\nIf you want to use [pnpm](https://pnpm.io), run the following command in your terminal to create a new project:\n\n```bash\npnpm --package=@ionic/cli dlx ionic start \\\n  MyFirstApp \\\n  blank \\\n  --type angular\n```\n\n`pnpm dlx` fetches packages from the registry [without installing them as a dependency](https://pnpm.io/next/cli/dlx). It is the equivalent to `npx`.\n\nThe CLI will use `pnpm` to install packages, too.\n\nIf you encounter problems later, you can also manually set the package manager in your project:\n\n```bash\npnpm exec ionic config set -g npmClient pnpm\n```\n\nThe above command assumes that the ionic CLI is a dev dependency inside `package.json`.\n\n\n<hr />\n## [Notes on ‚ÄúKeeping Your Career Current‚Äù](https://www.rockyourcode.com/notes-on-keeping-your-career-current/)\n\nPublished on: 2022-04-26\n\ntags: Lab, Notes\n\n\nHere is some advice from [Joe Eames](https://twitter.com/josepheames) from the [Angular Plus Show, Episode 075: Keeping Your Career Current][aplus]:\n\n- conferences & talks show you the lay of the land, they don't teach you how to do things, only what is possible\n- **retention**: you forget a lot, so passively watching a video is almost a waste of time\n- make it interactive: take notes - you can even delete them later, but engaging with the material will increase your retention rate\n- pause, try things out (e.g., use [Stackblitz](https://stackblitz.com/))\n- better than following along: come up with an idea and do that (don't wait until the end of the video/course); this is like **assigning yourself homework**\n- consistency matters: be realistic, a lot of things take time\n- heuristics: are you able to use this at your job? If not, do you have a side project where you can use it? If neither is true, and you're not trying to switch your job, think about if it's worth learning\n\n## Links\n* [Angular Plus Show E075][aplus]\n* [Notes on ‚ÄúHow to Learn Anything 5x Faster (Joe Eames)‚Äù](https://www.rockyourcode.com/notes-on-how-to-learn-anything-5x-faster/)\n\n[aplus]: https://podtail.com/podcast/the-angular-show/e075-keeping-your-career-current/\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}