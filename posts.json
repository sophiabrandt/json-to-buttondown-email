{"titles":[" Notes on Angular Component Communication (Pluralsight Course)"],"content":"\n  <p>Hello ðŸ‘‹! Thanks for subscribing.</p>\n  \n  <h2><a href=https://www.rockyourcode.com/notes-on-angular-component-communication-pluralsight/>Notes on Angular Component Communication (Pluralsight Course)</a></h2>\n  <p>Published on: 2021-05-01</p>\n  <p>tags: Lab, Angular, TypeScript</p>\n  \n_cover image from [PluralSight][ac]_\n\nI'm learning Angular right now â€“ as a React.js fangirl.\n\n[Pluralsight][ps] offered a free month of learning in April. I've taken advantage of it.\n\nHere are some notes on the course **[Angular Component Communication][ac]** by Deborah Kurata.\n\n## [Angular Component Communication][ac]\n\n### Introduction\n\n- components need to communicate with each other, with its template, with the router, can use a service as an intermediary\n- check [GitHub repository][gh]\n\n### Communication with a Template\n\n- template binding, e.g., [interpolation](https://angular.io/guide/interpolation), [property binding](https://angular.io/guide/property-binding), [event binding](https://angular.io/guide/event-binding)\n\nInterpolation:\n\n```tsx\n// src/app/app.component.ts\ncurrentCustomer = 'Maria'\n\n// src/app/app.component.html\n<h3>Current customer: {{ currentCustomer }}</h3>\n```\n\nProperty Binding:\n\n```tsx\n// src/app/app.component.ts\nimageWidth: number = 50;\n\n// src/app/app.component.html\n<img [style.width.px]='imageWidth'>\n```\n\nEvent Binding\n\n```tsx\n// src/app/app.component.ts\ntoggleImage(): void {\n  this.showImage = !this.showImage;\n}\n\n// src/app/app.component.html\n<button (click)='toggleImage()'>Show Image</button>\n```\n\n- [structural directives](https://angular.io/guide/structural-directives)\n\n```tsx\n// src/app/app.component.ts\n<p *ngIf=\"condition\">Show this sentence unless the condition is true.</p>\n```\n\n- \"two-way binding\" between template and component\n\n```tsx\n// src/app/app.component.ts\nlistFilter: string = 'Cart';\n\nonFilterChange(filter:string): void {\n  this.listFilter = filter;\n  this.performFilter(this.listFilter);\n}\n\n// src/app/app.component.html\n<input type='text' [ngModel]='listFilter' (ngModelChange)='onFilterChange=($event)' />\n```\n\n- getters and setters\n\n```tsx\n// src/app/app.component.ts\nprivate _listFilter: string;\n\nget listFilter(): string {\n  return this._listFilter;\n}\n\nset listFilter(value: string) {\n  this._listFilter = value;\n}\n\n// src/app/app.component.html\n<input type='text' [(ngModel)]='listFilter' />\n```\n\n### ViewChild and ViewChildren\n\n- `valueChanges` observable\n- [ViewChild](https://angular.io/api/core/ViewChild)\n- useful for [template-driven forms](https://angular.io/guide/forms)\n- remember that a component is first constructed (`constructor()`) and initialized(`ngOnInit()`), after that the view initializes and renders\n\n```tsx\n// src/app/app.component.ts\n@ViewChild('filterElement') filterElementRef: ElementRef;\n\nngAfterViewInit(): void {\n  this.filterElementRef.nativeElement.focus();\n}\n\n// src/app/app.component.html\n<input type='text' #filterElement [(ngModel)]='listFilter' />\n```\n\n- use `NgAfterViewInit()` to access the native HTML element (DOM)\n- subscribe to changes\n\n```tsx\n// src/app/app.component.ts\nlistFilter: string;\n\n@ViewChild(NgModel) filterInput: NgModel;\n\nngAfterViewInit(): void {\n  this.filterInput.valueChanges.subscribe(() => this.performFilter(this.listFilter));\n}\n\n// src/app/app.component.html\n<input type='text' #filterElement [(ngModel)]='listFilter' />\n```\n\n- [ViewChildren](https://angular.io/api/core/ViewChildren): returns a QueryList of element or directive references\n- method does not work well with `*ngIf`: in this case the `@ViewChild` might be undefined\n\n## Communicating with a Child Component\n\n- parent component's template must contain the child component\n- components connected via routing don't have a parent-child-relationship\n\n```tsx\n// src/app/parent.component.html\n<pm-criteria></pm-criteria>\n\n// src/app/child.component.ts\n@Component({\nselector: 'pm-criteria',\ntemplateUrl: './criteria.component.html',\nstyleUrls: ['./criteria.component.css']})\n```\n\n- push from parent to child: `@Input`, Getter/Setter, `OnChanges`\n- pull from child to parent: [Template Reference Variable](https://angular.io/guide/template-reference-variables), `@ViewChild`\n\n`@Input` example:\n\n```tsx\n// src/app/parent.component.html\n<pm-criteria [displayDetail]='includeDetail'></pm-criteria>\n\n// src/app/parent.component.ts\nincludeDetail: boolean = true;\n\n// src/app/child.component.ts\n@Input() displayDetail: boolean;\n```\n\n- Getter/Setter: favor if child only reacts to changes to specific properties\n- `OnChanges`: favor if child reacts to any input property changes or if you need to access current and prior values\n- Template Reference Variable: use from the parent's template\n- `@ViewChild` use from the parent's class\n\n### Communicating with a Parent Component\n\n- use cases: event notification (`@Output`), provide information to parent (Template Reference Variable, `@Viewchild`)\n\n```tsx\n// src/app/parent.component.html\n<pm-criteria\n  [displayDetail]='includeDetail'\n  (valueChange)='onValueChange($event)'>\n</pm-criteria>\n\n// src/app/parent.component.ts\nincludeDetail: boolean = true;\n\nonValueChange(value: string): void {\n  this.performFilter(value);\n}\n\n// src/app/child.component.ts\n@Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\n\nprivate _listFilter: string;\n\nget listFilter(): string {\n  return this._listFilter;\n}\n\nset listFilter(value: string) {\n  this._listFilter = value;\n  this.valueChange.emit(value);\n}\n\n// src/app/app.component.html\n<input type='text' [(ngModel)]='listFilter' />\n```\n\n## Communication Through a Service\n\n- state: view state, user information, entity data, user selection and input, etc.\n- managing state: property bag, basic state management (via service), state management with notifications (services with `BehaviorSubject`), ngrx/Redux\n\nExample Property Bag:\n\n```tsx\n// src/app/param.service.ts\n@Injectable()\nexport class ParamService {\n  showImage: boolean\n  filterBy: string\n}\n\n// src/app/product.list.component.ts\nexport class ProductListComponent {\n  get ShowImage(): boolean {\n    return this.paramService.showImage\n  }\n  get listFilter(): string {\n    return this.paramService.filterBy\n  }\n  set listFilter(value: string) {\n    this.paramservice.filterBy = value\n  }\n}\n```\n\n- property bags are great for retaining view state & user selections\n- property bags can also communicate with other components\n- great for sharing data or other state & communicating state changes\n- caveat: any component can read and change values\n- components are only notified of state changes if they use template binding\n- consider service scope and lifetime\n\n### Communicating Through a State Management Service\n\n- good for retrieving entity state and share with others\n- purpose: provide state values, maintain and update state, observe state changes\n- add a property to retain the list - on get: return the list - on get by id: return an item from the list - on create: add the item the list - on delete: remove the item from the list\n\n```ts\n// src/app/product.service.ts\nprivate products: IProduct[];\n\ngetProducts(): Observable<IProduct[]> {\n  if (this.products) {\n    return of(this.products);\n  }\n  return this.http.get<IProduct[]>(this.productsUrl)\n    .pipe(\n      tap(data => console.log(JSON.stringify(data))),\n      tap(data => this.products = data),\n      catchError(this.handleError)\n      );\n}\n```\n\n- benefits: encapsulates retrieve and store operations, retains and shares state values, caches values, provides change notification for bound values using a getter\n- cons: stale data, no explicit change notification, state is not immutable\n\n### Communicating Through Service Notification\n\n- you can use `Subject` or `BehaviorSubject` (multi-cast) to broadcast changes\n\n```ts\n// src/app/product-list.component.html\n<button type='button'\n  *ngFor='let product of products'\n  (click)='onSelected(product)'>\n\n// src/app/product-list.component.ts\nonSelected(product: IProduct) {\n  this.productService.changeSelectedProduct(product);\n}\n\n// src/app/product.service.ts\nprivate selectedProductSource = new Subject<IProduct>();\nselectedProductChanges$ = this.selectedProductSource.asObservable();\n\nchangeSelectedProduct(selectedProduct: IProduct) {\n  // broadcast the notification\n  this.selectedProductSource.next(selectedProduct);\n}\n\n// Component or Service\nonSelected(product: IProduct) {\n  // listen for and respond to the notification\n  this.productService.changeSelectedProduct(product);\n}\n\n```\n\n### Communicating Using the Router\n\n- route parameters: required, optional, query parameters\n- benefits: simple, resulting URLs are bookmarkable & sharable\n- cons: parameters appear in the URL, not good for large amounts of data\n\n## Thoughts\n\nDeborah Kurata is an excellent teacher who can break concepts down to a digestible level.  \nThe course slides and examples helped me immensely.\n\nAll in all, the class proved to be fantastic for people new to Angular.\n\nI am sure that I will reference the course's [GitHub repository][gh] in the future.\n\n## Resources\n\n- [Angular Component Communication][ac] Pluralsight course by [Deborah Kurata](https://twitter.com/deborahkurata)\n- [GitHub repository][gh]\n\n[ps]: https://pluralsight.com\n[ac]: https://app.pluralsight.com/library/courses/angular-component-communication/table-of-contents\n[gh]: https://github.com/DeborahK/Angular-Communication\n\n  <hr />\n  <p>Thank you for reading my blog posts.</p>\n  <p>Don't hesitate to reach out via <a href=\"mailto:hi@rockyourcode.com\">email</a> or <a href=\"https://twitter.com/hisophiabrandt\">Twitter</a>!\n  "}