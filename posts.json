{"titles":[" Notes on ‚ÄúWhich Tests Should We Automate by Angie Jones‚Äù"," Nvidia Hybrid GPU on Manjaro"," Notes on RxJS Patterns in Angular"," Apollo Server Express 3 With TypeScript"," Inline Critical CSS With Hugo Pipes"," Node.js Setup With TypeScript, Nodemon and ESM"," Create a PostCSS Pipe With Hugo"],"content":"Hello üëã! Thanks for subscribing.\n\n\nHere are the articles from last week:\n\n## [Notes on ‚ÄúWhich Tests Should We Automate by Angie Jones‚Äù](https://www.rockyourcode.com/notes-on-which-tests-should-we-automate-by-angie-jones/)\n\nPublished on: 2021-11-07\n\ntags: Testing, Lab, Notes\n\n\nNotes from **[Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter][you]**.\n\n[![Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter](https://i.ytimg.com/vi/VL-_pnICmGY/sddefault.jpg)](https://youtube.com/watch?v=VL-_pnICmGY 'Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter')\n\n## Automate All the Things?\n\n- automation requires maintenance\n- lots of automation requires lots of time\n- redundant automation is noisy\n\n## Automate the Right Things\n\nShould we automate this:\n\n1. What is my gut feeling?\n2. What is the risk?\n\n   x-axis multiplied by y-axis\n   **probability** (frequency of use by customers) vs **impact** (if broken, what's the impact to customers?)\n\n3. Value\n\n   **distinctness** (does this test provide new info?) vs **induction to action** (how quickly would this failure be fixed?)\n\n4. Cost-Efficiency\n\n   **quickness** (how quickly can this be scripted) vs **ease** (how easy will it be to script this)\n\n5. History\n\n   **similar to weak areas** (volume of historical failures in related areas) vs **frequency of breaks** (volume of historical failures for this test)\n\nTally up the scores into 3 categories:\n\n- Automate: 67 - 100\n- Possibly automate: 34 - 66\n- Don't automate 0 - 33\n\n## Links\n\n- [Which Tests Should We Automate - Angie Jones ‚Äì Sr. Automation Engineer, Twitter][you]\n- [Slides from the talk](https://slides.com/angiejones/which-tests-should-we-automate)\n\n[you]: https://www.youtube.com/watch?v=VL-_pnICmGY\n\n\n<hr />\n## [Nvidia Hybrid GPU on Manjaro](https://www.rockyourcode.com/nvidia-hybrid-gpu-on-manjaro/)\n\nPublished on: 2021-11-02\n\ntags: Unix\n\n\nMy laptop is rocking a dual hybrid GPU with an Intel chip:\n\n> For hybrid GPU laptops with Intel and Nvidia the best solution usually is to have switchable graphics: Intel for normal, everyday usage (uses less power and saves battery) and NVIDIA for games or more graphic intense programs (uses more battery). ([Source][optimusman])\n\nInstalling the correct Nvidia driver and setting up the dual mode was surprisingly tricky on my Manjaro machine.\n\nHere's a reference that worked with an Acer Nitro 5 and a Nvidia GTX 1050 Mobile (GP107M).\n\n## Install Graphics Drivers\n\nManjaro has an inbuilt [settings manager][settings] which allows you to install hardware drivers for your spec.\n\nPer default, my machine was running the `video-hybrid-intel-nvidia-prime`. That sounds like the correct driver, but it didn't load.\n\nRun this command in your terminal for more information:\n\n```bash\ninxi -G\n```\n\nThe [Manjaro wiki][settings] recommends an automatic installation like this:\n\n```bash\nsudo mhwd -a pci nonfree 300\n```\n\nThe above command installs the recommended proprietary drivers for your graphic cards.\n\nThe recommended settings did not work for me. I settled on [optimus-switch][optswitch] for managing my graphic cards.\n\n[optimus-switch][optswitch] allows you to change between running in Intel standalone mode or in hybrid mode with Nvidia.\n\nFirst, we need to install the _correct_ driver for this setup.\n\nInstall `video-nvidia-xxxxx` with the [manjaro settings manager][settings], in my case that's `video-nvidia-390xx`. _Make sure it's NOT `video-nvidia` without the extra number._\n\n## Optimus-Switch\n\nChoose the correct version of [optimus-switch][optswitch] for your login manager. The program supports LightDM, GDM and SDDM.\n\nAs [LightDM](https://wiki.archlinux.org/title/LightDM) always gave me trouble when upgrading my system, I've chosen [SDDM](https://wiki.archlinux.org/title/SDDM) as my display manager.\n\nIf you don't know how to install a display manager, check the [Manjaro wiki](https://wiki.manjaro.org/index.php/Install_Display_Managers).\n\nFollow the instructions in the GitHub repository, here is the example for [SDDM](https://github.com/dglt1/optimus-switch-sddm):\n\n```bash\ngit clone https://github.com/dglt1/optimus-switch-sddm.git\ncd ~/optimus-switch-sddm\nchmod +x install.sh\nsudo ./install.sh\n```\n\nThe installation script will also remove any settings that will interfere with optimus-switch.\n\nIf you encounter any problems, make sure to manually remove the files:\n\n```bash\nsudo rm /etc/X11/xorg.conf.d/90-mhwd.conf\nsudo rm /etc/modprobe.d/mhwd-gpu.conf\nsudo rm /etc/modules-load.d/mhwd-gpu.conf\n```\n\nMake sure to read the [Usage section of the optimus-switch documentation](https://github.com/dglt1/optimus-switch-sddm#usage). You'll need to adjust a few settings to disable the Nvidia GPU if you run in Intel-only mode.\n\nReboot.\n\n## Links\n\n- [optimus-switch][optswitch]\n- [Guide: Install and configure optimus-manager for hybrid GPU setups (Intel/NVIDIA)][optimusman]\n- [Configure Graphics Cards][settings]\n\n[optimusman]: https://archived.forum.manjaro.org/t/guide-install-and-configure-optimus-manager-for-hybrid-gpu-setups-intel-nvidia/92196\n[settings]: https://wiki.manjaro.org/index.php/Configure_Graphics_Cards\n[optswitch]: https://archived.forum.manjaro.org/t/call-for-testing-optimus-switch/75773\n\n\n<hr />\n## [Notes on RxJS Patterns in Angular](https://www.rockyourcode.com/notes-on-rxjs-patterns-in-angular/)\n\nPublished on: 2021-10-27\n\ntags: RxJS, JavaScript, TypeScript, Notes\n\n\nHere is the code from Deborah Kurata's talk **[RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020 #ngconf][you]**, so that I can quickly look it up if I need it.\n\n[![RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020¬†#ngconf](https://i.ytimg.com/vi/uv_sblwIJag/sddefault.jpg)](https://youtube.com/watch?v=uv_sblwIJag 'RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020¬†#ngconf')\n\n## Declarative Data Retrieving\n\n```typescript\nproducts$ = this.http.get<Product[]>(this.productsUrl).pipe(\n  tap((data) => console.log(JSON.stringify(data))),\n  catchError(this.handleError)\n)\n```\n\n```typescript\nproducts$ = this.productService.products$\n```\n\nUse the `async` pipe in the template.\n\n## \"Passing\" Data\n\nTo respond to an action, use a `Subject` or `BehaviorSubject`.\n\n```typescript\nprivate categorySubject = new Subject<number>();\ncategorySelectedAction$ = this.categorySubject.asObservable();\n```\n\n```typescript\nproducts$ = this.categorySelectedAction$.pipe(\n  switchMap((categoryId) =>\n    this.http.get<Product[]>(`${this.url}?cat=${catId}`)\n  ).pipe(\n    tap((data) => console.log(data)),\n    catchError(this.handleError)\n  )\n)\n```\n\n- `switchMap`: stops the current operation and performs the new operation\n- `concatMap`: performs each operation one at a time, in order\n- `mergeMap`: performs each operation concurrently\n\n## Shape on Action Pattern\n\n```typescript\nproducts$ = this.categorySelectedAction$.pipe(\n  switchMap((categoryId) =>\n    this.http.get<Product[]>(`${this.url}?cat=${catId}`)\n  ).pipe(\n    tap((data) => console.log(data)),\n    catchError(this.handleError)\n  )\n)\n```\n\n```typescript\nprivate categorySubject = new Subject<number>();\ncategorySelectedAction$ = this.categorySubject.asObservable();\n```\n\n- `combineLatest`: emits a combined value when any of the Observables emits; won't emit until all Observables have emitted at least once\n- `merge`: emits one value when any of the Observables emit\n- `forkJoin`: when all Observables complete, emit the last value from each Observable into an array\n\n```typescript\nselectedProducts$ = combineLatest([\n  this.products$,\n  this.productSelectedAction$,\n]).pipe(\n  map((products, selectedProductId) =>\n    products.find((product) => product.id === selectedProdudctId)\n  )\n)\n```\n\n## Retrieve Related Data Pattern\n\n### One to One\n\n```typescript\nselectedProduct$ = this.productSelectedAction$.pipe(\n  switchMap((categoryId) => this.http.get<Product>(`${this.url}?/${id}`)).pipe(\n    tap((data) => console.log(data)),\n    catchError(this.handleError)\n  )\n)\n```\n\n```typescript\nproductSupplier$ = this.selectedProduct$.pipe(\n  switchMap((product) =>\n    this.http.get<Supplier>(`${this.url}/${product.supplierId}`)\n  )\n)\n```\n\n### One to Many\n\n```typescript\nproductSuppliers$ = this.selectedProduct$.pipe(\n  switchMap((product) =>\n    forkJoin(\n      product.supplierIds.map((supplierId) =>\n        this.http.get<Supplier>(`${this.url}/${supplierId}`)\n      )\n    )\n  )\n)\n```\n\n## Links\n- [RxJS Patterns in Angular | Deborah Kurata | EnterpriseNG 2020 #ngconf][you]\n- [Deborah Kurata GitHub Angular Action Streams](https://github.com/DeborahK/Angular-ActionStreams)\n\n[you]: https://www.youtube.com/watch?v=uv_sblwIJag\n\n\n<hr />\n## [Apollo Server Express 3 With TypeScript](https://www.rockyourcode.com/apollo-server-express-3-with-typescript/)\n\nPublished on: 2021-10-17\n\ntags: GraphQL, TypeScript, JavaScript, Node.js\n\n\n> apollo-server-express GraphQL + TypeScript + esm\n\nApollo released [Apollo Server 3][server3] in July 2021 with the goal of offering more flexibility and a leaner code-base to build new features.\n\nThe core package for the server is [apollo-server][apollo-server]. If you want to integrate Apollo into an existing Express application or wish to use more advanced features, you'll need [apollo-server-express][ase].\n\nThe [documentation][documentation] is user-friendly but does not provide a turn-key solution to get you started.  \nApollo Server Express needs to start asynchronously which caused some problems.\n\nIn this article, I'll show you the steps to create a simple Apollo Server with TypeScript, nodemon, ts-node and [ESM (ES Modules)][esm].\n\n## Skeleton\n\nCreate a new project with `npm` (you'll need Node.js 12 or later).\n\nI use Linux, so the code in my blog post works for Unix. If you're a Windows user, you'll probably need to adjust some of the commands.\n\n```bash\nmkdir apollo-3-ts && cd apollo-3-ts\nnpm init -y\n```\n\nInstall dependencies:\n\n```bash\nnpm i apollo-server-express apollo-server-core express graphql\nnpm i --save-dev typescript nodemon ts-node tsc-watch @types/node @types/express\n```\n\nSetup TypeScript:\n\n```bash\nnpx tsc --init\n```\n\nThe above command creates a new file called `tsconfig.json`. Adjust the following parts in the file:\n\n```json\n{\n  \"module\": \"ES2020\",\n  \"moduleResolution\": \"Node\",\n  \"outDir\": \"./dist\"\n}\n```\n\nCompiled files (from TypeScript to JavaScript) will land in the dist folder.\n\nAdd these lines to `package.json` to enable ECMAScript modules and allow imports from your compiled TypeScript files:\n\n```json\n{\n  \"type\": \"module\",\n  \"exports\": \"./dist/index.js\"\n}\n```\n\nNow, we will add a script for the development server into `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"watch\": \"nodemon --watch './**/*.{ts,graphql}' --exec 'node --experimental-specifier-resolution=node --loader ts-node/esm' src/index.ts\",\n    \"dev\": \"tsc-watch --onSuccess \\\"npm run watch\\\"\"\n  }\n}\n```\n\nYou can find more details in the links at the end of the article.\n\n## Apollo Server Setup\n\nCreate a new folder called `src` with a file `index.ts`.\n\n```bash\nmkdir src && touch src/index.ts\n```\n\nYou should now have a file structure like this:\n\n```bash\napollo-3-ts <- folder name\n‚îú‚îÄ‚îÄ node_modules\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ package-lock.json\n‚îú‚îÄ‚îÄ src\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts\n‚îî‚îÄ‚îÄ tsconfig.json\n```\n\nCopy the next code snippet into `src/index.ts`. The code is [from the documentation][documentation] with [a fix to promisify the http listener][promisify] with TypeScript.\n\n```ts\nimport { ApolloServer, gql } from 'apollo-server-express'\nimport { ApolloServerPluginDrainHttpServer } from 'apollo-server-core'\nimport express from 'express'\nimport http from 'http'\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`\n\nconst resolvers = {\n  Query: {\n    hello() {\n      return 'world'\n    },\n  },\n}\n\nasync function listen(port: number) {\n  const app = express()\n  const httpServer = http.createServer(app)\n\n  const server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],\n  })\n  await server.start()\n\n  server.applyMiddleware({ app })\n\n  return new Promise((resolve, reject) => {\n    httpServer.listen(port).once('listening', resolve).once('error', reject)\n  })\n}\n\nasync function main() {\n  try {\n    await listen(4000)\n    console.log('üöÄ Server is ready at http://localhost:4000/graphql')\n  } catch (err) {\n    console.error('üíÄ Error starting the node server', err)\n  }\n}\n\nvoid main()\n```\n\nThe code bootstraps the Apollo server with a minimal \"Hello, world\" resolver to get you started.\n\nNow you can fire off the server from the command line:\n\n```bash\nnpm run dev\n```\n\nYou should be able to reach the GraphQL endpoint in your browser under `http://localhost:4000/graphql` and Apollo Studio should pop up.\n\n## Thoughts\n\nIt was tricky to find out how to get the [documentation example][documentation] to work as it needs a JavaScript promise to listen to the server.\n\nLuckily, [GitHub][promisify] had the solution. I only needed to know what to look for.\n\n## Links\n\n- [Choosing an Apollo Server package][documentation]\n- [Typescript And Native esm on Node.js](https://2ality.com/2021/06/typescript-esm-nodejs.html)\n- [Node.js Setup With TypeScript, Nodemon and ESM][tsesm]\n- [Unable to import ESM .ts module in node][so]\n- [Promisify server.listen][promisify]\n\n[promisify]: https://github.com/nodejs/node/issues/21482\n[server3]: https://www.apollographql.com/blog/announcement/backend/its-here-introducing-apollo-server-3/\n[apollo-server]: https://npm.im/apollo-server\n[ase]: https://npm.im/apollo-server-express\n[esm]: https://2ality.com/2021/06/typescript-esm-nodejs.html\n[documentation]: https://www.apollographql.com/docs/apollo-server/integrations/middleware/#apollo-server-express\n[tsesm]: https://www.rockyourcode.com/nodejs-setup-with-typescript-nodemon-and-esm/\n[so]: https://stackoverflow.com/questions/63742790/unable-to-import-esm-ts-module-in-node\n\n\n<hr />\n## [Inline Critical CSS With Hugo Pipes](https://www.rockyourcode.com/inline-critical-css-with-hugo-pipes/)\n\nPublished on: 2021-10-03\n\ntags: Hugo\n\n\n> How to inline critical CSS transformed via Hugo Pipes\n\nI use [Hugo pipes][pipes] to process my CSS files written in Sass.\n\nExample:\n\n```go-html-template\n{{- $critical := resources.Get \"scss/critical.scss\" | resources.ToCSS }}\n{{- if hugo.IsProduction }}\n{{- $critical = resources.Get \"scss/critical.scss\" | resources.ToCSS | resources.Minify }}\n{{- end }}\n<head>\n  <link rel=\"stylesheet\" href=\"{{ $critical.RelPermalink }}\" />\n// more code\n```\n\nEasy, peasy. I can use the optimized CSS as an external link to my stylesheet.\n\nBut how can I inline CSS?\n\nThe [Hugo documentation][docs] is extensive, but sometimes it's hard to find what you need.\n\nThe solution is easy after all, but it still took me two days to find.\n\nYou need to take the Hugo resource's content and pipe it to the [safeCSS][safecss] function:\n\n```go-html-template {linenos=table,hl_lines=[6]}\n{{- $critical := resources.Get \"scss/critical.scss\" | resources.ToCSS }}\n{{- if hugo.IsProduction }}\n{{- $critical = resources.Get \"scss/critical.scss\" | resources.ToCSS | resources.Minify }}\n{{- end }}\n<head>\n  <style>{{ $critical.Content | safeCSS }}</style>\n// more code\n```\n\n## Resources\n\n- [Hugo Pipes Introduction][pipes]\n- [Inlining Critical Path CSS with Hugo Pipes](https://discourse.gohugo.io/t/inlining-critical-path-css-with-hugo-pipes/12998)\n\n[pipes]: https://gohugo.io/hugo-pipes/introduction/\n[safecss]: https://gohugo.io/functions/safecss\n[docs]: https://gohugo.io/\n\n\n<hr />\n## [Node.js Setup With TypeScript, Nodemon and ESM](https://www.rockyourcode.com/nodejs-setup-with-typescript-nodemon-and-esm/)\n\nPublished on: 2021-10-01\n\ntags: TypeScript, Node.js, JavaScript\n\n\n> Let's try to set up a Node.js/Express.js TypeScript project with nodemon and ESM!\n\nYesterday someone in the [ZTM Discord server][ztmdiscord] asked if it was possible to use `nodemon` with TypeScript and native ECMAScript modules.\n\nIt is!\n\nI used Node.js (version 14 works) and a bit of internet sleuthing to figure out how to do it.\n\n## TypeScript\n\nCreate a new directory. Inside that directory, we'll need to initialize a new Node.js project:\n\n```bash\nnpm init -y\n```\n\nNow for the dependencies. First, [Express.js][express]:\n\n```bash\nnpm i express\n```\n\nAs development dependencies, we use TypeScript, [nodemon][nodemon], [ts-node][tsnode] and the necessary types:\n\n```bash\nnpm i --save-dev typescript nodemon ts-node @types/node @types/express\n```\n\nNow, TypeScript setup:\n\n```bash\nnpx tsc --init\n```\n\nThe above command creates a new file called `tsconfig.json`. Adjust the following parts in the file:\n\n```json\n{\n  \"module\": \"ES2020\",\n  \"moduleResolution\": \"Node\",\n  \"outDir\": \"./dist\"\n}\n```\n\nCompiled files (from TypeScript to JavaScript) will land in the dist folder.\n\nAdd these lines to `package.json` to enable ECMAScript modules and allow imports from your compiled TypeScript files:\n\n```json\n{\n  \"type\": \"module\",\n  \"exports\": \"./dist/index.js\"\n}\n```\n\n## Minimal Server\n\nLet's create our source code. Make a new folder called `src` and add a file called `index.ts` inside that directory.\n\nHere's a minimal Express server:\n\n```ts\nimport express, { Request, Response } from 'express'\n\nconst app = express()\nconst port = 5000\n\napp.get('/', (req: Request, res: Response) => {\n  res.json({ greeting: 'Hello world!' })\n})\n\napp.listen(port, () => {\n  console.log(`üöÄ server started at http://localhost:${port}`)\n})\n```\n\n## Wiring Up Scripts\n\nNow, the magic will come together. Add the following script to `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"dev:server\": \"nodemon --watch './**/*.ts' --exec 'node --experimental-specifier-resolution=node --loader ts-node/esm' src/index.ts\"\n  }\n}\n```\n\nFirst, we'll use `nodemon` with the `--watch` flag to keep track of all TypeScript files. We can use `--execute` to run other scripts.\n\nWe use the [experimental loader feature with hooks][expf] to run `ts-node`. We need the library so that we can directly run TypeScript on Node.js:\n\n> It JIT transforms TypeScript into JavaScript, enabling you to directly execute TypeScript on Node.js without precompiling. This is accomplished by hooking node's module loading APIs, enabling it to be used seamlessly alongside other Node.js tools and libraries.\n\nStart the server now:\n\n```bash\nnpm run dev:server\n```\n\nYay, it works!\n\n## Importing Files\n\nYou probably want to split up your code into different files and import them.\n\n_You cannot import a TypeScript file directly._\n\nThat means that **you first have to transpile all TypeScript files it into JavaScript** and then import the JavaScript files.\n\nUsing the `node --experimental-specifier-resolution=node` in the start command is a first step. Enabling the flag allows you to use the standard import syntax without using a file ending. This works as known:\n\n```ts\nimport { blababla } from './some-folder/some-file'\n```\n\nI will use [tsc-watch](https://www.npmjs.com/package/tsc-watch) to run `tsc` in watch mode and delegate to `nodemon` if the compilation is successful.\n\n```bash\nnpm install --save-dev tsc-watch\n```\n\nAdjust `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"watch\": \"nodemon --watch './**/*.{ts,graphql}' --exec 'node --experimental-specifier-resolution=node --loader ts-node/esm' src/index.ts\",\n    \"dev\": \"tsc-watch --onSuccess \\\"npm run watch\\\"\"\n  }\n}\n```\n\n`tsc` will write the JavaScript files into the specified `outDir` location (see `tsconfig.json`). We've set the folder to `./dist`.\n\nIn `package.json` we added an `exports` key-value-pair which allows us to import those transpiled files from the `dist` folder _as if they were the original TypeScript files_.\n\nLet's say that you have a folder structure like this:\n\n```bash\n.\n‚îú‚îÄ‚îÄ dist\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.js\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ services\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ accounts\n‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.js\n‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ resolvers.js\n‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ typeDefs.js\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils\n‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ apollo.js\n‚îú‚îÄ‚îÄ node_modules\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ package-lock.json\n‚îú‚îÄ‚îÄ src\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.ts\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ services\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ accounts\n‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.ts\n‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ resolvers.ts\n‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ typeDefs.ts\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils\n‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ apollo.ts\n‚îî‚îÄ‚îÄ tsconfig.json\n\n```\n\nIn `src/index.ts` you want to import something from `src/services/accounts/index.ts`. It works like normal JavaScript _even though the files are TypeScript files_:\n\n```js\n// src/index.ts\nimport { startApolloServer } from './services/accounts/index'\n```\n\nNode.js will use your configuration to import the according JavaScript file under the hood.\n\n## Thoughts\n\nIt was a bit tricky to find out how to pair `nodemon` with the Node.js loader feature. While you'll get console warnings about using this experimental feature, it works fine on the latest Node.js v14.\n\nSuccess.\n\n## Resources\n\n- [Use TypeScript to Build a Node API with Express](https://developer.okta.com/blog/2018/11/15/node-express-typescript)\n- [TypeScript and native ESM on Node.js](https://2ality.com/2021/06/typescript-esm-nodejs.html)\n- [ts-node on GitHub][expf]\n- [Restart Your Server When Changing Your TypeScript Code](https://futurestud.io/tutorials/typescript-use-nodemon-to-restart-your-server-on-changes)\n- [Unable to import ESM .ts module in node][so]\n\n[ztmdiscord]: https://zerotomastery.io/\n[nodemon]: https://www.npmjs.com/package/nodemon\n[tsnode]: https://www.npmjs.com/package/ts-node\n[express]: https://expressjs.com/\n[expf]: https://github.com/TypeStrong/ts-node/issues/1007\n[so]: https://stackoverflow.com/questions/63742790/unable-to-import-esm-ts-module-in-node\n\n\n<hr />\n## [Create a PostCSS Pipe With Hugo](https://www.rockyourcode.com/create-a-postcss-pipe-with-hugo/)\n\nPublished on: 2021-09-24\n\ntags: Hugo\n\n\nI'm trying to create a new theme for Hugo.\n\nHugo offers powerful features, for example, **[Hugo pipes][pipes]**. Pipes allow you to transform data in your Hugo templates.\n\nI want to use [PurgeCSS][purgecss] to remove unused CSS from my production bundle.\n\nThe official website has [a guide for using PostCSS with Hugo][postcss], but it was not 100% clear to me how to use the instructions.\n\n## 1. Template\n\nYou will have a html template in your `themes` folder. Mine has the folllowing path: `themes/<name-of-theme>/layouts/partials/head.html`:\n\n```go-html-template\n{{- $critical := resources.Get \"scss/critical.scss\" | resources.ToCSS }}\n{{- $fonts := resources.Get \"scss/fonts.scss\" | resources.ToCSS | resources.Minify | resources.Fingerprint }}\n{{- if hugo.IsProduction }}\n{{- $critical = resources.Get \"scss/critical.scss\" | resources.ToCSS |  resources.PostProcess | resources.Minify | resources.Fingerprint }}\n{{- end }}\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n  <link rel=\"stylesheet\" href=\"{{ $critical.RelPermalink }}\" />\n  <link rel=\"stylesheet\" media=\"print\" href=\"{{ $fonts.RelPermalink }}\" onload=\"this.media='all'\" />\n  <title>\n    {{ if not .IsHome }}{{ with .Title }}{{ . }} | {{ end }}{{ end }}{{\n    .Site.Title }}\n  </title>\n  <meta\n    name=\"description\"\n    content=\"{{ with .Description }}{{ . }}{{ else }}{{ with .Summary }}{{ . }}{{ else }}{{ .Site.Params.description }}{{end }}{{ end }} \"\n  />\n  {{ template \"_internal/opengraph.html\" . }}\n  {{ template \"_internal/twitter_cards.html\" . }}\n  {{ template \"_internal/schema.html\" . }}\n</head>\n```\n\nIf we make a production build with the command `hugo`, we will process the Sass SCSS file with several transformations.\n\n## 2. Main Folder\n\nThe above code sits in the `theme` folder, nested in your main Hugo project.\n\nExample folder structure:\n\n```bash\n‚îú‚îÄ‚îÄ archetypes\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default.md\n‚îú‚îÄ‚îÄ config.toml\n‚îú‚îÄ‚îÄ content\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ about.md\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ blog\n‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 2021\n‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hipsum.md\n‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ lorem-ipsum.md\n‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ _index.md\n‚îú‚îÄ‚îÄ data\n‚îú‚îÄ‚îÄ layouts\n‚îú‚îÄ‚îÄ static\n‚îî‚îÄ‚îÄ themes\n    ‚îî‚îÄ‚îÄ sample-hugo-theme\n        ‚îú‚îÄ‚îÄ archetypes\n        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default.md\n        ‚îú‚îÄ‚îÄ assets\n        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ scss\n        ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ _config.scss\n        ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ critical.scss\n        ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ _reset.scss\n        ‚îú‚îÄ‚îÄ layouts\n        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 404.html\n        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ blog\n        ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ single.html\n        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ _default\n        ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ about.html\n        ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ baseof.html\n        ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ list.html\n        ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ single.html\n        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html\n        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ partials\n        ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ footer.html\n        ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ header.html\n        ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ head.html\n        ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ page-header.html\n        ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ pagination.html\n        ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ post_pagination.html\n        ‚îú‚îÄ‚îÄ LICENSE\n        ‚îî‚îÄ‚îÄ theme.toml\n```\n\nWe run the necessary commands from the main folder. For development mode, we use `hugo server`, for production mode, we use `hugo`.\n\nDepending on which command you run, Hugo will recognize the mode.\n\nThat means that you'll need to set configuration settings from [guide][postcss] **in the main folder** (not the themes folder where your HTML template resides).\n\nInstall the necessary Node.js dependencies **in the main Hugo directory** (same folder as `config.{toml,yaml,json}`:\n\n```bash\nnpm i -D @fullhuman/postcss-purgecss postcss postcss-cli\n```\n\nThe next parts are identical to the [documentation][postcss]:\n\nAdjust the configuration. If you use `toml`, here's the example `config.toml`:\n\n```toml\n[build]\n  writeStats = true\n```\n\nCreate a `postcss.config.js`:\n\n```js\nconst purgecss = require('@fullhuman/postcss-purgecss')({\n  content: ['./hugo_stats.json'],\n  defaultExtractor: (content) => {\n    let els = JSON.parse(content).htmlElements\n    return els.tags.concat(els.classes, els.ids)\n  },\n})\n\nmodule.exports = {\n  plugins: [\n    ...(process.env.HUGO_ENVIRONMENT === 'production' ? [purgecss] : []),\n  ],\n}\n```\n\n## 3. Production Build\n\nRun the following command inside your terminal:\n\n```bash\nhugo\n```\n\nThe command will create a `public` folder which contains the static website that you built with Hugo. Your CSS assets should work.\n\n## Thoughts\n\nIf you share your theme for others to use, _they_ will have to go through the steps of installing the Node.js dependencies in their Hugo project.\n\nI find that less than ideal, as I prefer to manage my assets from the themes folder.\n\n## Links\n\n- [PurgeCSS][purgecss]\n- [Hugo Pipes Introduction][pipes]\n- [Asset Management with Hugo: PostProcess][postcss]\n- [How I can implement Purgecss, Uncss, or PurifyCSS in Hugo?](https://discourse.gohugo.io/t/how-i-can-implement-purgecss-uncss-or-purifycss-in-hugo/24446/4)\n\n[postcss]: https://gohugo.io/hugo-pipes/postprocess/#css-purging-with-postcss\n[pipes]: https://gohugo.io/hugo-pipes/introduction/\n[purgecss]: https://purgecss.com/\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}