{"titles":[" Rules, by Sandi Metz"," Why Vim Works for Me"," We Overestimate Social Costs"," Deploy to GitHub Pages Without Jekyll"," How I Setup Go With Vim"," Experiment: 100 Days of Blogging"," Fake Webcam Background for Arch Linux With Docker (Using akvcam)"],"content":"Hello üëã! Thanks for subscribing.\n\n## [Rules, by Sandi Metz](https://www.rockyourcode.com/rules-by-sandi-metz/})\nPublished on: 2021-05-24\n\ntags: Ruby\n\n\n## 5 Rules for writing object-oriented code\n\nMy notes from a [Ruby talk from 2013 by Sandi Metz][talk].\n\n### What are rules?\n\n- taboos\n- laws\n- norms (customs), group-held beliefs\n- many of are arbitrary and not enforcible\n- why do we follow rules? obedience? self-interest, identity/status, authority, order, social sanctions, ignorance, habit\n\n### 5 Constraints\n\n1. No more than 100 lines per class\n2. No more than 5 lines per method\n3. No more than 4 parameters per method\n4. No more than 1 [instance variable per view](https://stackoverflow.com/questions/33371300/what-is-ivar-in-rails-controller)\n5. No more than 2 class names per controller/action (a Rails-specific rule)\n\nWhy?\n\n- bias towards small objects (POROs = plain old Ruby objects)\n- bias away from dependencies\n- the rules are a means to an end: consistent goals\n- _design choice_ of small objects\n- objects vs. procedures\n- the _entire_ applications is harder to understand, but you don't need to understand the whole app ‚Äî you only need to understand the part you want to change\n- following the rules might be in your self-interest\n\n## Other benefits of rules\n\n- signal others\n- bias to collaboration\n- the _belief_ in some rules and the willingness and self-discipline to follow them\n- you can break the rules only under the supervision of trustworthy humans\n\n## Links\n\n- [Baruco 2013: Rules, by Sandi Metz][talk]\n  [![Baruco 2013: Rules, by Sandi Metz](https://i.ytimg.com/vi/npOGOmkxuio/sddefault.jpg)](https://youtube.com/watch?v=npOGOmkxuio 'Baruco 2013: Rules, by Sandi Metz')\n\n[talk]: https://youtube.com/watch?v=npOGOmkxuio\n\n\n<hr />## [Why Vim Works for Me](https://www.rockyourcode.com/why-vim-works-for-me/})\nPublished on: 2021-05-23\n\ntags: Vim, DevTools\n\n\nIn this post I'm going to share why I like Vim.\n\nI use NeoVim with [Tmux][tmux] which allows me to quickly open new terminal panes (spaces that don't take up a complete window).\n\nThat means I can navigate between different terminals and projects without fuss.\n\n## Reasons Why I Like Vim\n\n1. Familiarity\n\n   I've been using Vim as my daily driver for 2 years. I remember loving VS Code [2 years ago](https://www.rockyourcode.com/learning-neovim/).\n\n   Now it's the opposite. I've tried switching back to VS Code for my future day job. And it's a slog. All my muscle memory for navigating and editing text [at the ‚Äúspeed of thought‚Äù][vimspeed] does not work anymore.\n\n2. Customizability\n\n   When I use VS Code, I need to customize the key mappings to fit my needs (stay as mouse-less as possible).\n\n   VS Code has a lot of key bindings that conflict with the way I work. Jumping between split windows? You'll need to define your custom key binding. Jumping between the VS Code terminal and the code? Again, you'll need to customize.\n\n   At that point, I already spend a lot of time customizing Vim. I can stick to using Vim, because it clearly works (for me).\n\n3. Live in the Terminal\n\n   Vim is a first-class citizen of the command-line. Vim is quick to fire up, make an edit, and close again.\n\n   See how [Patrick Ecker](https://twitter.com/ryyppy) uses Vim and Tmux:\n   [![ReactiveConf 2016 LT - Patrick Stapfer: A Life on a Commandline](https://i.ytimg.com/vi/zyLpvEyv7l0/sddefault.jpg)](https://youtube.com/watch?v=zyLpvEyv7l0 'ReactiveConf 2016 LT - Patrick Stapfer: A Life on a Commandline')\n\n4. Modal Editing, Language, and Text Objects\n\n   Vim has different modes and that makes the editor very powerful. You have a lot of functionality in normal mode (where you cannot insert text).\n\n   Every key can have more than one function, depending on the editor mode.\n\n   Vim also has a language. For example, `d` is for deleting things.\n   Vim features text objects, so the program knows if you want to edit text inside brackets, or sentences, etc.  \n   `dw` _deletes_ a _word_.  \n   When you know text objects and Vim verbs, you can be very precise.\n\n   Here is a video by Drew Neil, author of \"Practical Vim\": [Vim - precision editing at the speed of thought][vimspeed].\n   [![Vim - precision editing at the speed of thought](https://i.vimeocdn.com/video/522718448)](https://vimeo.com/53144573 'Vim - precision editing at the speed of thought')\n\n[tmux]: https://github.com/tmux/tmux\n[vimspeed]: https://vimeo.com/53144573\n[practicalvim]: https://pragprog.com/titles/dnvim2/practical-vim-second-edition/\n\n\n<hr />## [We Overestimate Social Costs](https://www.rockyourcode.com/we-overestimate-social-costs/})\nPublished on: 2021-05-22\n\ntags: Lab, Reading, Thoughts\n\n\nI am listening to **[The Scout Mindset][scoutmindset]** by Julia Galef, a book that makes a case against [motivated reasoning][motivatedreasoning] and argues for a more honest view on our thinking.\n\nQuote from chapter 3:\n\n> We overestimate the importance of how we come across to other people, social costs [...] feel a lot more significant than they actually are.  \n> In reality, other people aren't thinking about you nearly as much as you intuitively think they are, and their opinions on you don't have nearly as much impact on your life as it feels like they do.  \n> As a result, we end up making tragic trade offs, sacrificing a lot of potential happiness to avoid relatively small social costs.\n\nI've been thinking about this quote.\n\nI've suffered from being too mindful of what others _might_ think. But in the end this attitude didn't make me happy.\n\nFor example, I've had a secure job as a civil servant. A job for life.  \nBut I am much more happy solving problems with code.  \nLeaving a position as a tax officer in Germany is basically insane because of all the benefits of being a public servant.\n\nI decided to do it anyway. And in the end, a lot of people didn't think me crazy.  \nAnd I also realized that their opinions _really_ do not matter much in the grand scheme of things.\n\nThat is not an argument to be an asshole, but an argument to take care of yourself.\n\n## Further Reading\n\n- [Julia Galef: The Scout Mindset][scoutmindset]\n- [Psychology Today: Motivated Reasoning][motivatedreasoning]\n\n[scoutmindset]: https://www.goodreads.com/book/show/42041926-the-scout-mindset\n[motivatedreasoning]: https://www.psychologytoday.com/us/basics/motivated-reasoning\n\n\n<hr />## [Deploy to GitHub Pages Without Jekyll](https://www.rockyourcode.com/deploy-to-github-pages-without-jekyll/})\nPublished on: 2021-05-21\n\ntags: Git, DevTools, Tutorial\n\n\nI'm part of a [community of self-taught developers][ztm]. I'm trying to help tech newbies in the discord channel.\n\nJudging from the number of questions, new developers seem to have **problems deploying static websites to GitHub pages**.\n\nIn this article, I'll show you a basic way to bring your first front-end projects to life on GitHub pages.\n\n## Prerequisites\n\nOn your computer:\n\n- [Git][installgit]\n- [Node.js](https://nodejs.org/en/download/)\n\nYou'll also need a free **[GitHub account](https://github.com/)**.\n\n## Create a new project\n\nYou'll need something that you want to upload to the internet: a HTML page, optionally with CSS and JavaScript.\n\nYou can either use your own project or you can follow along and make a dummy project.\n\n1. Create a new folder on your computer.\n\n   I'll show you the example commands for Unix. Windows commands might be different, so be aware.\n\n   ```bash\n   mkdir my-github-project\n   cd my-github-project\n   ```\n\n2. Initialize Git.\n\n   GitHub works with Git. We need to initialize the project.\n\n   ```bash\n   # replace with your name!\n   git config --user.name \"Mona Lisa\"\n   # use the email you used for signing up for a GitHub account\n   git config --user.email \"monalisa@example.com\"\n   git init\n   ```\n\n   Now we'll add a special [`.gitignore` file](https://git-scm.com/docs/gitignore) with the following content:\n\n   ```\n   node_modules\n   .gitignore\n   ```\n\n3. Create files.\n\n   The minimum is a HTML file called `index.html`. But let's also create a JavaScript and a CSS file.\n\n   First, we need to put everything into a folder called `dist`, as that's the folder that will be deployed to GitHub pages. You can choose the name freely, but `dist` is a common one.  \n   If you change the name, you'll also need to change it later in step 4.\n\n   Command-line commands (in your terminal):\n\n   ```bash\n   mkdir dist && cd dist\n   mkdir css\n   mkdir js\n   touch index.html\n   touch css/styles.css\n   touch js/scripts.js\n   ```\n\n   The file structure looks like so:\n\n   ```bash\n    .\n    ‚îú‚îÄ‚îÄ dist\n    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ css\n    ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ styles.css\n    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html\n    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ js\n    ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ scripts.js\n    ‚îî‚îÄ‚îÄ .gitignore\n   ```\n\n   Put the following [content inside `index.html`][sitepoint]:\n\n   ```html\n   <!DOCTYPE html>\n\n   <html lang=\"en\">\n     <head>\n       <meta charset=\"utf-8\" />\n\n       <title>The HTML5 Herald</title>\n       <meta name=\"description\" content=\"The HTML5 Herald\" />\n       <meta name=\"author\" content=\"SitePoint\" />\n\n       <link rel=\"stylesheet\" href=\"css/styles.css?v=1.0\" />\n     </head>\n\n     <h1>Hello World</h1>\n\n     <body>\n       <script src=\"js/scripts.js\"></script>\n     </body>\n   </html>\n   ```\n\n   As you can see, the file references a JavaScript script and a CSS file. We should add them, too.\n\n   Content of `js/scripts.js`:\n\n   ```js\n   console.log('Hello, world')\n   ```\n\n   Content of `cs/styles.css`: The content of the CSS file will be a [modern CSS reset][moderncssreset], which makes a good base template for your project.\n\n   ```css\n   /* Box sizing rules */\n   *,\n   *::before,\n   *::after {\n     box-sizing: border-box;\n   }\n\n   /* Remove default margin */\n   body,\n   h1,\n   h2,\n   h3,\n   h4,\n   p,\n   figure,\n   blockquote,\n   dl,\n   dd {\n     margin: 0;\n   }\n\n   /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\n   ul[role='list'],\n   ol[role='list'] {\n     list-style: none;\n   }\n\n   /* Set core root defaults */\n   html:focus-within {\n     scroll-behavior: smooth;\n   }\n\n   /* Set core body defaults */\n   body {\n     min-height: 100vh;\n     text-rendering: optimizeSpeed;\n     line-height: 1.5;\n   }\n\n   /* A elements that don't have a class get default styles */\n   a:not([class]) {\n     text-decoration-skip-ink: auto;\n   }\n\n   /* Make images easier to work with */\n   img,\n   picture {\n     max-width: 100%;\n     display: block;\n   }\n\n   /* Inherit fonts for inputs and buttons */\n   input,\n   button,\n   textarea,\n   select {\n     font: inherit;\n   }\n\n   /* Remove all animations and transitions for people that prefer not to see them */\n   @media (prefers-reduced-motion: reduce) {\n     html:focus-within {\n       scroll-behavior: auto;\n     }\n     *,\n     *::before,\n     *::after {\n       animation-duration: 0.01ms !important;\n       animation-iteration-count: 1 !important;\n       transition-duration: 0.01ms !important;\n       scroll-behavior: auto !important;\n     }\n   }\n   ```\n\n4. Install npm package\n\n   Now we'll need to install the Node.js package [gh-pages](https://www.npmjs.com/package/gh-pages), which will help us to bring the site to GitHub.\n\n   First, initialize a new npm project **in the root project folder** (the parent folder of the `dist` directory).\n\n   ```bash\n   npm init -y\n   ```\n\n   Now install the package:\n\n   ```bash\n   npm install -D gh-pages\n   ```\n\n   You'll now see a new folder called `node_modules` and also a new file called `package.json`.\n\n   Adjust `package.json`:\n\n   ```json\n   // previous code\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n     \"deploy\": \"gh-pages -d dist\" // NEW\n   },\n   // more code\n   ```\n\n   (Remember to change the name of the `dist` folder if you previously used a different name.)\n\n5. Create GitHub project.\n\n   Go to [https://github.com/new](https://github.com/new) with your web browser and create a new repository.\n\n   The name should be your project name, in this example it's `my-github-project`. You can make the project public or private, it does not matter. Leave the rest of the check-boxes _unchecked_.\n\n   You can find a step-by-step guide on the [GitHub help pages](https://docs.github.com/en/github/getting-started-with-github/quickstart/create-a-repo).\n\n6. Commit and upload your files.\n\n   Now we need to connect the files on your local computer with the remote repository (GitHub).\n\n   Follow the [guide](https://docs.github.com/en/github/getting-started-with-github/getting-started-with-git/managing-remote-repositories#adding-a-remote-repository).\n\n   In you terminal:\n   ```bash\n   git remote add origin https://<your-github-name>/<your-github-repository-name>.git\n   ```\n\n   Replace `<your-github-name>` and `<your-github-repository-name>` with the correct values for your project.\n\n   Now we are ready to upload everything to the internet!\n\n   In you terminal:\n   ```bash\n   git add . # add everything to the staging area\n   git commit -m \"Initial Commit\" # add a commit message\n   git push origin master\n   # origin is the name of the remote repository\n   # master is the name of the git branch\n   ```\n\n   If you navigate to your GitHub project in your web browser, you should see that all your files are online now.\n\n7. Deploy to gh-pages via script.\n\n   The final step is to run the npm script (see `package.json`):\n\n   ```bash\n   npm run deploy\n   ```\n\n## FAQ\n\n### What if I have several projects in my folder?\n\nYou should make separate GitHub repositories. Repeat the steps of this blog post for each. Repositories on GitHub are free.\n\n## Final Words\n\nUsing Git, GitHub pages and Npm is not an easy feat for a beginner.  \nBrad Traversy has a [YouTube video][bradtraversy] about deployng to GitHub pages. He also shows you to setup a domain:\n[![GitHub Pages Deploy & Domain](https://i.ytimg.com/vi/SKXkC4SqtRk/sddefault.jpg)](https://youtube.com/watch?v=SKXkC4SqtRk 'GitHub Pages Deploy & Domain')\n\n## Links\n\n- [GitHub Pages Deploy & Domain][bradtraversy] by Brad Traversy\n- [HTML5 Template: A Basic Boilerplate for Any Project][sitepoint] by Louis Lazaris\n- [A modern CSS reset][moderncssreset] by Andy Bell\n\n[ztm]: https://zerotomastery.io/\n[bradtraversy]: https://www.youtube.com/watch?v=SKXkC4SqtRk\n[installgit]: https://github.com/git-guides/install-git\n[sitepoint]: https://www.sitepoint.com/a-basic-html5-template/\n[moderncssreset]: https://github.com/andy-piccalilli/modern-css-reset\n\n\n<hr />## [How I Setup Go With Vim](https://www.rockyourcode.com/how-i-setup-go-with-vim/})\nPublished on: 2021-05-20\n\ntags: Go, Vim\n\n\n> Language Server Support for Go in Vim\n\nLast month I found a [reddit thread about how to setup Vim for Go development][reddit].\n\nThe [author][preslav] uses coc.nvim, a heavy-weight plugin with external dependencies. coc.nvim (\"Conqueror of Completion\") offers powerful features, but you'll need to install Node.js.  \nIf you prefer a more lightweight option that also work with plain Vim, this blog post might be for you.\n\nToday I'm going to share my setup:\n\n- works with Vim and NeoVim\n- minimal external dependencies ([gopls][gopls])\n- auto-completion support\n\n## Prerequisites\n\nYou should have [a working installation of Go on your computer][goinstall].\n\nInstall [gopls][gopls], the official language server:\n\n```bash\nGO111MODULE=on go get golang.org/x/tools/gopls@latest\n```\n\n## Vim Setup\n\nVim needs a plugin for the [Language Server Protocol][lsp].\n\nI use **[prabirshrestha/vim-lsp][vim-lsp]**, an asynchronous implementation that works both in Vim 8 and NeoVim. The plugin uses VimL and thus has no external dependencies.\n\nInstall with [native package support][nativepackage] or a plugin manager of your choice. Example:\n\n```bash\ncd ~/vim/pack\ngit submodule init\ngit submodule add https://github.com/prabirshrestha/vim-lsp.git\ngit add .gitmodules vim/pack/prabirshrestha/vim-lsp\ngit commit\n```\n\n(I'm happy with [vim-packager][vimpackager], but configuring it requires a bit more effort and time. The native package manager works well since Vim 8, but is a bit clunky.)\n\nLet's wire up the language server with Go.\n\nCreate a new file in your Vim folder (`~/vim/plugin/lsp.vim`) with the following content:\n\n```bash\nfunc! s:setup_ls(...) abort\n    let l:servers = lsp#get_allowed_servers()\n\n    # key mappings\n    for l:server in l:servers\n        let l:cap = lsp#get_server_capabilities(l:server)\n\n        if has_key(l:cap, 'completionProvider')\n            setlocal completefunc=lsp#complete\n        endif\n\n        if has_key(l:cap, 'hoverProvider')\n            setlocal keywordprg=:LspHover\n        endif\n\n        if has_key(l:cap, 'codeActionProvider')\n            nmap <silent><buffer>ga <plug>(lsp-code-action)\n        endif\n\n        if has_key(l:cap, 'definitionProvider')\n            nmap <silent><buffer>gd <plug>(lsp-definition)\n            nmap <silent><buffer>gk <plug>(lsp-peek-definition)\n        endif\n    endfor\nendfunc\n\n# register language server\naugroup LSC\n    autocmd!\n    autocmd User lsp_setup call lsp#register_server({\n                \\ 'name': 'gopls',\n                \\ 'cmd': {_->['gopls']},\n                \\ 'allowlist': ['go']\n                \\})\n\n    autocmd User lsp_server_init call <SID>setup_ls()\n    autocmd BufEnter * call <SID>setup_ls()\naugroup END\n\n# disable diagnostics etc.\nlet g:lsp_diagnostics_enabled                = 0\nlet g:lsp_diagnostics_signs_enabled          = 0\nlet g:lsp_diagnostics_virtual_text_enabled   = 0\nlet g:lsp_diagnostics_highlights_enabled     = 0\nlet g:lsp_document_code_action_signs_enabled = 0\n```\n\nThe first function creates key bindings if the language server runs. For example, hitting `ga` will give you \"code actions\". The most useful code action is auto-importing the necessary definitions. Code Actions are a feature I use a lot.\n\nYou can find a list of supported commands on the [vim-lsp GitHub page](https://github.com/prabirshrestha/vim-lsp#supported-commands).\n\n### Auto-completion?\n\nVim already has auto-completion [out of the box][letvimdothetyping].\n\nHere is an excerpt from some extra key mappings in my `~/.vimrc` (\"stolen\" from [bluz71](https://github.com/bluz71/dotfiles/blob/master/vim/custom/mappings.vim):\n\n```vim\n\"-----------------------------\n\" completion mappings\n\"-----------------------------\n\"   t     - user defined completion (via completefunc setting)\ninoremap <C-t>     <C-x><C-u>\n```\n\nNow, when I want the language server to kick in to complete my Go code, I smash `CTRL+T` on my keyboard.\n\n## How to Format And Lint\n\nThe easiest way is to use the [gofmt][gofmt] tool from the command-line. For example,\n\n```bash\ngofmt -w .\n```\n\nThe same goes for linting.\n\nInstall [golint][golint]:\n\n```bash\ngo install golang.org/x/lint/golint@latest\n```\n\nUsage:\n\n```bash\ngolint ./...\n```\n\nAlternatively, you can install [ALE][ale]. Here is an [example setup](https://bluz71.github.io/2017/05/21/vim-plugins-i-like.html#ale) which you can adjust for Go.\n\n\n## Conclusion\n\nI've showed you a lightweight setup for Go and Vim. The above plugins and settings have served me well.\n\nThere are languages where I'd recommend a dedicated IDE (Java), but for Go I haven't felt the need yet.\n\n## Links\n\n- [How to set up Vim for Go Development][preslav] (on [reddit][reddit])\n- [Vim: So long Pathogen, hello native package loading][nativepackage]\n- [Let Vim do the typing][letvimdothetyping]\n- [vim-lsp][vim-lsp]\n\n[reddit]: https://reddit.com/r/golang/comments/mon9ym/how_to_setup_vim_for_go_development/\n[preslav]: https://pmihaylov.com/vim-for-go-development/\n[gopls]: https://github.com/golang/tools/blob/master/gopls/README.md\n[goinstall]: https://golang.org/doc/install\n[vim-lsp]: https://github.com/prabirshrestha/vim-lsp\n[nativepackage]: https://shapeshed.com/vim-packages/\n[lsp]: https://github.com/Microsoft/language-server-protocol\n[vimpackager]: https://www.rockyourcode.com/installing-and-managing-vim-plugins-with-vim-packager/\n[gofmt]: https://golang.org/cmd/gofmt/\n[golint]: https://pkg.go.dev/github.com/360EntSecGroup-Skylar/goreporter/linters/golint\n[ale]: https://github.com/dense-analysis/ale\n[letvimdothetyping]: https://georgebrock.github.io/talks/vim-completion/\n\n\n<hr />## [Experiment: 100 Days of Blogging](https://www.rockyourcode.com/experiment-100-days-of-blogging/})\nPublished on: 2021-05-19\n\ntags: Lab, this_blog, Writing\n\n\nInspired by [Seth Goding][sethgodin] and other folks like [Mike Crittenden][crittersblog], I'm going to write a blog post each day for 100 days.\n\nWriting daily was a habit that I followed in 2019 and 2020, until [I burned out on writing](https://www.rockyourcode.com/changing-the-format/).\n\nMy situation is different now. I've quit my job as a civil servant and will start my first job as a software developer in July.\n\nI plan to use my free time to learn a few new things (Angular, Java), play around with things that I enjoy (Go), writing and reading.\n\nMy start as a freshly minted software developer should also give new fodder for blog posts.\n\nI have a [script that creates newsletter drafts from my blog][jsontobuttondownemail] which I will adjust. So if you're a newsletter subscriber, you'll get a weekly email instead of daily emails.\n\nThanks for reading my blog! üòç\n\n[sethgodin]: https://seths.blog/2018/10/the-first-1000-are-the-most-difficult/\n[crittersblog]: https://critter.blog/2020/12/18/100-daily-blog-posts/\n[jsontobuttondownemail]: https://github.com/sophiabrandt/json-to-buttondown-email\n\n\n<hr />## [Fake Webcam Background for Arch Linux With Docker (Using akvcam)](https://www.rockyourcode.com/fake-webcam-background-for-arch-linux-with-docker/})\nPublished on: 2021-05-03\n\ntags: Unix, Docker\n\n\n> Fake virtual backgrounds for your online meeting on Linux\n\nI've been attending a lot of video conference calls lately ‚Äî like so many of us.  \nOthers had nice-looking virtual backgrounds. But there was no option to create those backgrounds on my Linux machine.\n\nFor example, the Zoom version for Linux only allows me to \"touch up my appearance\". But there is no option to set a virtual background.\n\nLuckily, I am not the only one with this problem.\n\nIn this blog post I'll show you how to create a fake virtual background for your web cam using Docker (docker-compose) and akvcam.\n\nUsing this setup, you can use fake backgrounds with Google Chrome (e.g., Jitsi) or stand-alone applications like Zoom.\n\nThis article mirrors the Github repository for [Linux-Fake-Background-Webcam][lfbw]. Some steps from the README were unclear to me. That's why I listed the steps here.\n\nIn this article, we will do the following:\n\n1. Create a virtual camera\n2. Setup Docker-Compose to use the virtual camera\n3. Use the fake virtual background with Zoom or Chromium-based browsers\n\n## Install akvcam & Linux-Fake-Background-Webcam\n\n**[akvcam][akvcam]** is a virtual camera driver for Linux.\n\n1. On Arch Linux/Manjaro Linux, install akvcam with [yay](https://aur.archlinux.org/packages/yay/) or a different AUR helper:\n\n   ```bash\n   yay -S akvcam-dkms\n   ```\n\n   It seems that no pre-build images are available for Ubuntu, so you'll need to follow the [akvcam wiki](https://github.com/webcamoid/akvcam/wiki/Build-and-install).\n\n   We need a driver to create a virtual camera.  \n   I prefer akvcam over the [v4l2loopback-dkms](https://github.com/umlaeute/v4l2loopback) driver as it works with Chrome/Chromium, too.  \n   akvcam works with browser-based video conferencing software like Jitsi or Wonder.me.\n\n2. Clone the [Linux-Fake-Background-Webcam][lfbw] repository to your local machine.\n\n   Example commands using the terminal:\n\n   ```bash\n   git clone https://github.com/fangfufu/Linux-Fake-Background-Webcam.git\n   cd Linux-Fake-Background-Webcam\n   ```\n\n3. Create a virtual camera.\n\n   Check for known video ports before loading the akvcam driver:\n\n   ```bash\n   ls /dev/video*\n   ```\n\n   Configure and load the driver:\n   ```bash\n   sudo cp -r fakecam/akvcam /etc/\n   sudo modprobe videodev\n   ```\n\n   You should now see additional video ports:\n\n   ```bash\n   ls /dev/video*\n   ```\n\n   Alternative command with example output:\n   ```bash\n   v4l2-ctl --list-devices\n   >\n   akvcam (out) (platform:akvcam-2): /dev/video2\n   akvcam (platform:akvcam-3): /dev/video3\n\n   HD User Facing: HD User Facing (usb-0000:00:14.0-5):\n   /dev/video0\n   /dev/video1\n   /dev/media0\n   ```\n\n   The virtual camera is available as `/dev/video2` output.  \n   `dev/video0`, `dev/video1` and `dev/media0` are the hardware ports.\n\n3. Docker and Docker-Compose Setup\n\n   The repository has an example `docker-compose.yml` file that uses the v4l2loopback driver. We can fix that manually.\n\n   First, copy the environment file:\n\n   ```bash\n   cp docker_defaults.env .env\n   ```\n\n   You can change user settings in the `.env` file.  \n   For example, I downloaded a living room image from [unsplash](https://unsplash.com/) and copied it to the `fakecam` folder as `fake-living-room.jpg`.\n\n   Example settings in `.env`:\n   ```\n   # change images using a volume mapping\n   IMAGE_BACKGROUND=./fakecam/fake-living-room.jpg\n   ```\n\n   **Important**: The video input device must be your HD User Facing camera, the output device must be the `akvcam (out)` camera. The default settings (see below) should normally work.  \n   But check them again with `v4l2-ctl --list-devices`.  \n   After a reboot, my devices \"switched places\" and the whole setup broke.\n\n   ```bash\n   # change the device mappings if you are using diffent devices\n   VIDEO_INPUT=/dev/video0 # this needs to be your hardware camera\n   VIDEO_OUTPUT=/dev/video2 # this is the akvcam (out) channel\n   ```\n\n\n   Adjust `docker-compose.yml`. We need to adjust the `command` section for the `fakecam` service (at the end of the file):\n   ```yaml\n       # command: [\"--bodypix-url\", \"http://bodypix:9000/\",\n       #           \"-b\", \"background-custom\", \"-f\", \"foreground-custom\" , \"-m\", \"foreground-mask-custom\",\n       #           \"--webcam-path\", \"/dev/video0\", \"--v4l2loopback-path\", \"/dev/video2\"]\n       command: [\"--bodypix-url\", \"http://bodypix:9000/\",\n                 \"-b\", \"background-custom\",\n                 \"--webcam-path\", \"/dev/video0\", \"--akvcam\"]\n   ```\n   The changes instruct Docker to use the akvcam driver and removes the foreground image. If you want to use the image (a fake podium), you can keep that part from the original command.\n\n   The hardware camera uses `/dev/video0` as input. If your hardware port is different, don't forget to change it!\n\n   Adjust the Dockerfile in `fakecam/Dockerfile`. I removed the images as we load them via docker-compose:\n\n   ```Docker\n   FROM python:3.8\n\n   RUN apt-get update && \\\n       apt-get install -y --no-install-recommends \\\n         python3-numpy \\\n         python3-opencv \\\n         python3-requests \\\n         && rm -rf /var/cache/apt/* /var/lib/apt/lists/*\n\n   WORKDIR /src\n\n   COPY fake.py \\\n       akvcam.py \\\n       requirements.txt \\\n       /src/\n\n   RUN pip3 install --no-cache-dir -r requirements.txt\n\n   ENTRYPOINT [\"python3\", \"-u\", \"fake.py\"]\n   CMD [\"--bodypix-url\", \"http://bodypix:9000/\"]\n   ```\n\n5. Run the service with docker-compose:\n\n   ```bash\n   docker-compose up --build\n   ```\n   Or, if you want to run the service in the background:\n\n   ```bash\n   docker-compose up --build -d\n   ```\n\n6. Use the virtual camera.\n\n  You can now open a video conferencing application and select `akvcam` as your video device.\n\n## Links\n\n- [Linux-Fake-Background-Webcam][lfbw]\n\n{{<rawhtml>}}<small><em>image credit: <a href=\"https://unsplash.com/photos/fRGoTJFQAHM\">Compare Fibre</a></em></small>{{</rawhtml>}}\n\n[akvcam]: https://github.com/webcamoid/akvcam\n[lfbw]: https://github.com/fangfufu/Linux-Fake-Background-Webcam\n\n\n<hr />\nThank you for reading my blog posts.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Twitter](https://twitter.com/hisophiabrandt)!\n"}