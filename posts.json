{"titles":[" Verify Your Online Accounts With Keyoxide"," Use Environment Variables With VuePress 2"," Notes on “Building a Pragmatic Unit Test Suite”"," My First T3 App"],"content":"Hello 👋! Thanks for subscribing.\n\n\nHere are my latest articles:\n\n## [Verify Your Online Accounts With Keyoxide](https://www.rockyourcode.com/verify-your-online-accounts-with-keyoxide/)\n\nPublished on: 2022-11-16\n\ntags: Tools\n\n\n> [Keyoxide][keyoxide] is a privacy-friendly t1. ool to create and verify decentralized online identities.\n\n> Just like passports for real life identities, Keyoxide can be used to verify the online identity of people to make sure one is interacting with whom they are supposed to be and not imposters. Unlike real life passports, Keyoxide works with online identities or \"personas\", meaning these identities can be anonymous and one can have multiple separate personas to protect their privacy, both online and in real life.\n\nThe tool helps you to verify your online profiles like GitHub, Mastodon, dev.to and others.\n\nHere is my [profile](https://keyoxide.org/4C38CC1AF264C3DE8D6D97283B31E6D41B517DA5).\n\n_Acknowledgements_:  \nI used [Bill Rawlinson's guide][rawlinson] as a reference.  \nDuring setup, I encountered some pitfalls. This article is an attempt to clarify and document the process by rewriting the original source.\n\nIn this article you'll learn:\n\n- how to setup a GPG key and what to do to use it with keyoxide\n- how to verify your Mastodon, dev.to & GitHub account\n- how to setup a keyoxide account\n\n## What Do I Need?\n\nKeyoxide is a weird beast.  \nIt wasn't clear to me how to get a keyoxide account.  \nDo I need to sign up somewhere?\n\nThe answer is: No, you don't need to sign up for keyoxide.\n\nBut you need to create a [GPG key pair][gpg] and you need to upload it to [keys.openpgp.org][openpgp].\n\nYou'll also need a _valid_ email address.  \n_This email address will be public on the Keyoxide website._\n\nThe GPG key pair needs a secure passphrase, so a password manager is recommended.\n\n### GPG Setup\n\nFirst, we need [GnuPGP][gpg] on our local machine.\n\nOn macOs, you can install it via [homebrew](https://formulae.brew.sh/formula/gnupg#default).\n\nIn your terminal, type:\n\n```sh\nbrew install gnupg\n```\n\nArch Linux (with [yay](https://wiki.archlinux.org/title/AUR_helpers)):\n\n```sh\nyay -S gnupg\n```\n\n#### Create a Key Pair\n\nAgain, you need to use the terminal:\n\nmacOs:\n\n```sh\ngpg --full-generate-key\n```\n\n(Arch) Linux:\n\n```sh\ngpg --full-gen-key\n```\n\n- Choose `RSA and RSA` (option 1).\n- Keysize: 4096\n- Expiration date: 2y (2 years, you can extend the expiration)\n- Real name: you don't need to use your real name, but this is the handle which will appear on your keyoxide side\n- email: use an email address _that works and that you have access to_ (you can also add more email addresses later)\n- optional comment: leave blank\n- secure passphrase: use your password manager to create a password (and save it in your password manager together with the email address!)\n\nYou'll be asked to generate some randomness, so you can move your cursor to help GPG to create your key.\n\n### Get Your Fingerprint\n\nIn your terminal, run the following command:\n\n```sh\ngpg -k\n```\n\nThe answer will look like similar to this:\n\n```sh\npub   rsa4096 2020-07-01 [SC]\n      <HERE IS YOUR FINGERPRINT>\nuid           [ultimate] My name <valid@email.address>\n```\n\nYour keyoxide URL will be `https://keyoxide.org/FINGERPRINT`. It will not work right now, but we'll come back to it later.\n\nI know, it is confusing.\n\n[More info on the Keyoxide website](https://docs.keyoxide.org/using-cryptography/openpgp-gnupg/#Obtaining_the_fingerprint).\n\n## Add Your Accounts\n\n### Mastodon\n\nFor Mastodon, you'll need to set [profile metadata][profmet].\n\n1. go to your profile in Mastodon (`https://<your instance url>/profile/settings/profile`)\n2. edit your profile\n3. scroll down to \"Profile metadata\"\n4. add a label \"keyoxide\"\n5. as content add your keyoxide URL (`https://keyoxide.org/FINGERPRINT`)\n\n[Read more about Mastodon on the keyoxide docs](https://docs.keyoxide.org/service-providers/mastodon/).\n\n### GitHub\n\n[Create a new **public** GitHub gist](https://gist.github.com/new).\n\n**Important**: The file name _must be_ `openpgp.md`!\n\nThe description for the file can be whatever you like.\n\nAs content for the file, add the following:\n\n```md\n[Verifying my cryptographic key:openpgp4fpr:FINGERPRINT]\n```\n\n[Here is my example Gist.](https://gist.github.com/sophiabrandt/5351d90f64a3e2c28f62621d8def13b6)\n\n[Read more about GitHub on the keyoxide docs](https://docs.keyoxide.org/service-providers/github/).\n\n### dev.to\n\nMake a new blog post. The title does not matter, I chose \"Keyoxide Proof\" (see [example](https://dev.to/sophiabrandt/keyoxide-proof-42o6)).\n\nThe content of the post is the following:\n\n```\n[Verifying my keyoxide cryptographic key: https://keyoxide.org/FINGERPRINT]\n```\n\nYes, it's a public post which will look strange.\n\n## Add All Your Proofs to Your Gpg Key\n\nNow we need to go back to the command-line.\n\n```sh\ngpg --edit-key YOUR_EMAIL_ADDRESS\n```\n\nor\n\n```sh\ngpg --edit-key FINGERPRINT\n```\n\nReplace with your email address.\n\nThis will open a command prompt.\n\n1. type: `uid 1` (to select your user ID)\n2. type: `notation`\n3. enter the notation: `proof@ariadne.id=https://URL_TO_YOUR_GIST` (replace with your Gist URL)\n4. you will be asked for your passphrase, enter it now (you used a password manager, right?)\n5. repeat the process for your other accounts, type `notation` again\n6. enter the notation: `proof@ariadne.id=https://dev.to/YOUR_USERNAME/BLOG_POST_URL` (replace with your dev.to blog post URL)\n7. same again for all other accounts\n\nFor example, the notation for Mastodon is:\n\n```sh\nproof@ariadne.id=https://YOUR_MASTODON_INSTANCE/@YOUR_USERNAME\n```\n\nExample:\n\n```sh\nproof@ariadne.id=https://hachyderm.io/@sbr\n```\n\n### How to Show Your Notations for a Key?\n\n```sh\ngpg --edit-key FINGERPRINT\n```\n\nShow a list of user IDs to find the index, select it:\n\n```sh\nlist\nuid N # for example: uid 1\n```\n\nShow a list of notations:\n\n```sh\nshowpref\n```\n\n## How to Delete a Notation?\n\nWhat happens if you made a mistake?\n\nTo delete an existing notation, you need to add it again, but with a minus symbol:\n\n```sh\n-key=value\n```\n\n## Upload Your GPG Key\n\nFinally, you need to [upload your **public key** to the OpenPGP.org][openpgp].\n\nFirst, we'll need to find a way to export our **public key** for upload. In your terminal, type the following:\n\n```sh\ngpg --armor --export YOUR_EMAIL_ADRESS > pubkey.asc\n```\n\nReplace with your email address. Don't forget the greater than sign (`>`).\n\nOpen [the OpenPGP website and upload the `pubkey.asc`][openpgp].\n\nNow you can go to your keyoxide URL and check if it works.  \nIt might take a few minutes, but the process is reasonably fast.\n\n## What Happens if I Want to Add More Accounts?\n\nIf you later want to add more accounts, you can go through the process again.\n\nFirst, find a way to way to [create a proof](https://docs.keyoxide.org), then edit the GPG key.  \n[Upload the key][openpgp].\n\nKeyoxide will pick up the changes.\n\n## How Can I Export My Key Pair?\n\nIf you want to backup your key pair, you can [read this article on how to export both the public and private key][linuxhint].\n\n## Links\n\n- [Setting Up Keyoxide Profile on a Mac!][rawlinson]\n- [Mastodon: Profile Metadata][profmet]\n- [GnuPG][gpg]\n- [How to export and import keys with GPG][linuxhint]\n\n[rawlinson]: https://code.rawlinson.us/2022/11/setup-keyoxide-account-on-mac.html\n[keyoxide]: https://keyoxide.org/\n[openpgp]: https://keys.openpgp.org/upload\n[gpg]: https://wiki.archlinux.org/title/GnuPG\n[profmet]: https://docs.joinmastodon.org/user/profile/#fields\n[linuxhint]: https://linuxhint.com/export-import-keys-with-gpg/\n\n\n<hr />\n## [Use Environment Variables With VuePress 2](https://www.rockyourcode.com/use-environment-variables-with-vuepress-2/)\n\nPublished on: 2022-11-07\n\ntags: Vue.js, JavaScript\n\n\nFor `$DAYJOB` I had to build a new feature for our internal **[VuePress 2][vuep]** documentation.\n\nI needed to fetch data from an API that needs an API token. That's why I wanted to use [environment variables][env] to store the token, both locally as well in our [CI pipeline](https://www.redhat.com/en/topics/devops/what-cicd-pipeline).\n\nSurprisingly this was hard to figure out. It didn't help that I've never worked with [Vue.js](https://vuejs.org) or VuePress. The documentation was of limited help.\n\nFor example, I stumbled upon the famous error when trying to use `process.env` in a Vue component:\n\n```bash\nprocess is not defined\n```\n\nI'll show you how you can use environment variables in VuePress in the following article.\n\n## Goal\n\nWe want to be able to use a local file called `.env` (or something similar like `.env.local`) to store sensitive data.\n\nExample content of the `.env` file:\n\n```env\nGOOGLE_API_TOKEN='abcdefghi12345'\n```\n\nWe want to be able to use this token in the [JavaScript part of Vue](https://vuejs.org/guide/introduction.html#single-file-components).\n\nExample:\n\n```vue\n<script>\nimport fetch from 'cross-fetch'\n\nasync function fetchData() {\n  const response = await fetch('some-url', {\n    method: 'GET',\n    headers: {\n      // here we need our token 👇\n      Authorization: `Token token=`,\n    },\n  })\n  return response.json()\n}\n</script>\n```\n\n<details>\n    <summary>Note about cross-fetch</summary>\n    <p>I've installed this library to be able to use the fetch API in Node.js during VuePress's generate step.</p>\n    <p>In the generate phase Node.js builds all pages, so we don't have the fetch API (browser-only until Node 18) at our disposal.</p>\n</details>\n\n## Problem\n\nI couldn't find a guide in the [VuePress documentation](https://v2.vuepress.vuejs.org/guide), the [top StackOverflow question](https://stackoverflow.com/questions/53669076/how-do-i-expose-node-environment-variables-via-configurewebpack-to-vuepress-comp) seems outdated, and the [GitHub issue][gh] only got me 90% to the solution.\n\n## Solution\n\nThere is one library we need to install:\n\n```sh\nnpm i dotenv\n```\n\n[`dotenv`](https://www.npmjs.com/package/dotenv) is a popular JavaScript library which allows us to load environment variables from files. Exactly our use case!\n\nNow we need to adjust the configuration for VuePress. You can read more about the [Config file in the docs](https://v2.vuepress.vuejs.org/guide/configuration.html).\n\nAdd `dotenv` to the Vue config file (`config.js`):\n\n```js\n// all other imports, e.g.\n// import { registerComponentsPlugin } from '@vuepress/plugin-register-components';\nimport * as dotenv from 'dotenv'\n\ndotenv.config()\n```\n\nThe above code allows us to read our API token from the environment file. But how can we pass the variable to our frontend Vue component?\n\nYou **cannot** do this:\n\n```vue\n<script>\nconst TOKEN = process.env.GOGGLE_API_TOKEN\n</script>\n```\n\nThe Vue component in VuePress _can_ be a client-side component. The browser can't access `process`, that's Node.js-only.\n\nYou'll see this error:\n\n```bash\nprocess is not defined\n```\n\n[VuePress has a hook to define global constants for the client code][defineh].\n\nAdd the following to your config object in `config.js`:\n\n```js\nexport default defineUserConfig({\n  // previous configuration\n  // dest: 'public',\n  // lang: 'de-DE',\n  define: {\n    __TOKEN__: process.env.GOOGLE_API_TOKEN,\n  },\n})\n```\n\nNow you can do the following in your Vue component:\n\n```vue\n<script>\nimport fetch from 'cross-fetch'\n\nasync function fetchData() {\n  const response = await fetch('some-url', {\n    method: 'GET',\n    headers: {\n      // here we can access the global constant 👇\n      Authorization: `Token token=${__TOKEN__}`,\n    },\n  })\n  return response.json()\n}\n</script>\n```\n\nThe `__TOKEN__` variable will \"magically\" work.\n\n## Summary\n\nHere we have a working solution. Maybe there's a better way.  \nI don't like to use global constants. If you work with the Vue component it's not clear where the variable comes from.\n\nBut that's at least a working solution.\n\n## Links\n\n- [Passing Data to Client Code][defineh]\n- [GitHub: Are environment variables supported? #214][gh]\n\n[vuep]: https://v2.vuepress.vuejs.org/\n[env]: https://www.freecodecamp.org/news/what-are-environment-variables-and-how-can-i-use-them-with-gatsby-and-netlify/\n[gh]: https://github.com/vuejs/vuepress/issues/214\n[defineh]: https://v2.vuepress.vuejs.org/advanced/cookbook/passing-data-to-client-code.html\n\n\n<hr />\n## [Notes on “Building a Pragmatic Unit Test Suite”](https://www.rockyourcode.com/notes-on-building-a-pragmatic-unit-test-suite/)\n\nPublished on: 2022-10-30\n\ntags: Testing\n\n\nHere are some notes on the course “Building a Pragmatic Unit Test Suite” by Vladimir Khorikov.\n\n## Goals and Guidelines\n\nUnit tests help with _confidence_: you know that changes don't break functionality.\n\nNot all unit tests are equal.\n\nCoverage metrics are problematic: you can work around them, for example, by writing assertion-free unit tests.  \nCoverage metrics are a good negative indicator, but 100% test coverage is impractical.\n\nTest are code, and you also have to pay a maintenance cost for your tests.\n\nWhat makes a unit test valuable?\n\n- carefully choose code to test\n- use the most valuable tests only\n\nA good unit test:\n\n- has a high chance of catching a regression error\n- has a low chance of producing a false positive\n- provides fast feedback\n- has low maintenance cost\n\n_Testing trivial code is not worth the cost._\n\nDecouple tests from implementation details as much as possible.\n\nSpend most of the time on testing business logic.\n\n## Styles of Unit Testing\n\n- output-based verification (functional style)\n- state verification\n- collaboration verification (uses _test doubles_)\n\n### Hexagonal Architecture\n\n![hexagonal architecture](https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Hexagonal_Architecture.svg/768px-Hexagonal_Architecture.svg.png)\n_image from [Wikipedia](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software))\\_\n\n## Implementation Detail\n\nPublic API is the surface area that you can access from outside a class.\n\nWhat are the requirements?\n\n- address an immediate goal of the client code\n- address that goal completely\n\nLook at the client code: if it uses more than 1 operation to achieve a single goal, the class is leaking implementation details.\n\nNote: Neighboring classes might be aware of implementation details.  \nExample: the Root Entity of an _Aggregate_ (Domain Driven Design) might know about implementation details of the Entities.\n\nCommunication inside a hexagon is implementation detail.  \nBetween hexagons a public API of the hexagon exist (contract).\n\n### Styles\n\n- functional style: has no state, easy to maintain, offers the best protection against false positive\n- state verification: should verify through public API, reasonable maintenance cost\n- collaboration verification: within the hexagon lots of false positives; between hexagons more stable\n\n### Black-Box Testing Vs. White-Box Testing\n\n- black-box testing: testing without knowing the internal structure\n- white-box testing: testing the internal structure\n\nAdhere to black-box testing as much as possible.\n\n### Business Requirements\n\nDoes the test verify a business requirement?\n\n* view your code from the end user's perspective\n* verify its observable behavior\n\n## Integration Tests\n\n- test data cleanup: wipe out all data _before_ test execution\n\n## Unit Testing Anti-Patterns\n\n- private methods: if needed expose the hidden abstraction by extracting a new concept\n- expose state getters: test the observable behavior only\n- leaking domain knowledge to tests: use property-paced testing, or verify end result\n- code pollution (introduce additional code just to enable unit testing)\n- overriding methods in classes-dependencies: violates single-repository-principle, instead split functionality into different pieces\n- non-determinism in tests: try to avoid testing async code (separate code into async/sync), use Tasks\n\n## Links\n\n* [Building a Pragmatic Unit Test Suite][pluralsight]\n\n[pluralsight]: https://pluralsight.com/courses/pragmatic-unit-testing\n\n\n<hr />\n## [My First T3 App](https://www.rockyourcode.com/my-first-t3-app/)\n\nPublished on: 2022-10-25\n\ntags: TypeScript\n\n\n[tRPC][trpc] is the hottest new thing in the TypeScript ecosystem: build end-to-end **type-safe** APIs without the overhead of GraphQL.\n\ntRPC is a protocol to expose a function of your backend to your frontend using TypeScript type definitions.  \nNo code generation required. You write both your backend and your frontend with TypeScript and share the types.\n\n\ntRPC is framework-agnostic.\n\n[Create-t3-app][t3] is build on top of tRPC. It offers an opinionated starter template that helps with building a complete web application with [Next.js](https://nextjs.org) and Prisma.\n\nThis blog post chronicles my journey in creating my first T3 app. Let's see how the T3 stack works!\n\n## Create Application\n\n```bash\npnpm dlx create-t3-app@latest\n```\n\nThe command guides you through the installation process and allows you to choose a few options (trpc, prisma, next-auth, tailwind).\n\nI am happy to see that the command also works with [pnpm](https://pnpm.io) out of the box.\n\nThe command bootstraps the application. At the end of the process, there is a hint on what commands to run:\n\n```bash\ncd my-t3-app\npnpm install\npnpm prisma db push\npnpm dev\n```\n\nThe project also offers a `README` file with minimal information to get you started.\n\n## Prisma\n\nMy application should show cat pictures because the internet loves cats.\n\nLet's adjust the Prisma schema:\n\n```diff\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n+model Cat {\n+  id        String   @id @default(cuid())\n+  createdAt DateTime @default(now())\n+  updatedAt DateTime @updatedAt\n+  imageUrl  String\n+}\n```\n\nThis looks like a minimal example for a first application. Run `pnpm exec prisma migrate dev --name add_cat_model`.\n\n## tRPC Router\n\nMy next instinct is to hook up the trpc router. The project comes with an example router in `src/server/router/example.ts`. I'll adjust that to be a cat router.\n\nThe router uses [zod][zod], a schema-validation library, to build a router.\n\nThe example query has an input parameter of the String type.  \nFor my case, I want a random cat picture, so no input is needed. Can I just delete the input parameter and return a random cat?\n\nBefore:\n\n```ts\nimport { createRouter } from './context'\nimport { z } from 'zod'\n\nexport const exampleRouter = createRouter()\n  .query('hello', {\n    input: z\n      .object({\n        text: z.string().nullish(),\n      })\n      .nullish(),\n    resolve({ input }) {\n      return {\n        greeting: `Hello ${input?.text ?? 'world'}`,\n      }\n    },\n  })\n  .query('getAll', {\n    async resolve({ ctx }) {\n      return await ctx.prisma.example.findMany()\n    },\n  })\n```\n\nAfter:\n\n```ts\nimport { createRouter } from './context'\nimport { Cat } from '@prisma/client'\n\nexport const catRouter = createRouter()\n  .query('random', {\n    async resolve({ ctx }) {\n      const randomCats = await ctx.prisma.$queryRaw<Cat[]>`SELECT id, imageUrl\n                                                           FROM Cat\n                                                           ORDER BY RANDOM()\n                                                           LIMIT 1`\n      return randomCats[0]\n    },\n  })\n  .query('getAll', {\n    async resolve({ ctx }) {\n      return await ctx.prisma.cat.findMany()\n    },\n  })\n```\n\nI use a [raw SQL query][queryraw] to retrieve a random cat from the database and add a typing for `Cat[]`.  \nThat's not pretty and does not give me the advantage of using the schema validator, but Prisma doesn't implement [getting a random record](https://github.com/prisma/prisma/issues/5894). So raw SQL it is!\n\nThe raw query returns an array in any case, so we select the first element and return it.\n\n## Seed Script\n\nBefore I try to hook up the frontend, I remember that I don't have any example data in my database.\n\nLuckily, the Prisma documentation can [help me][seed].\n\nAdd a new entry to `package.json`:\n\n```json\n{\n  \"prisma\": {\n    \"seed\": \"ts-node --compiler-options {\\\"module\\\":\\\"CommonJS\\\"} prisma/seed.ts\"\n  }\n}\n```\n\nCreate a new seed script in the `prisma` folder (`prisma/seed.ts`):\n\n```ts\nimport { PrismaClient } from '@prisma/client'\nimport { fetch } from 'next/dist/compiled/@edge-runtime/primitives/fetch'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  const requests = Array(10)\n    .fill('https://aws.random.cat/meow')\n    .map((url) => fetch(url))\n\n  Promise.all(requests)\n    // map array of responses into an array of response.json() to read their content\n    .then((responses) => Promise.all(responses.map((r) => r.json())))\n    // insert all responses as imageUrl\n    .then((cats) =>\n      cats.forEach(\n        async (cat) => await prisma.cat.create({ data: { imageUrl: cat.file } })\n      )\n    )\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\nI fetch ten image URLs from an API that offers random cat images and insert them into the database. Quite ugly, but it works.\n\nIn my terminal, I run type the following command:\n\n```bash\npnpm exec prisma db seed\n```\n\nSuccess!\n\n## Hook Up the Client\n\nFinally, we can try to show this data on the browser.\n\nAfter ripping out the example router and replacing it with my cat router, I check `src/pages/index.tsx`.\n\nIt has some boilerplate which I adjust to my needs:\n\n```tsx\nimport type { NextPage } from 'next'\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport { trpc } from '../utils/trpc'\n\nconst Home: NextPage = () => {\n  const { data: cat } = trpc.useQuery(['cat.random'])\n\n  return (\n    <div style={{ display: 'grid', placeItems: 'center' }}>\n      <Head>\n        <title>T3 Cats</title>\n        <meta name=\"T3 cats\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <div>\n        <h1 style={{ textAlign: 'center' }}>\n          Create <span>T3</span> App\n        </h1>\n\n        <section>\n          <div>\n            {cat ? (\n              <Image\n                src={cat.imageUrl}\n                alt={`random cat ${cat.id}`}\n                layout={'fixed'}\n                width={300}\n                height={300}\n              />\n            ) : (\n              <p>Loading...</p>\n            )}\n          </div>\n        </section>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n```\n\nThat was surprisingly easy, especially if you are familiar with Prisma.\n\n## First Impressions\n\nThe starter template does a good job on guiding you through the process.\n\nThe examples are enough to paint a broad picture on how trpc with Next.js works. Familiarity with prisma is assumed.\n\nYou might need to consult the Prisma documentation, trpc is almost self-declaratory, Prisma is not.\n\n## Links\n\n- [tRPC][trpc]\n- [Create T3 App][t3]\n\n[trpc]: https://trpc.io\n[t3]: https://create.t3.gg/\n[zod]: https://github.com/colinhacks/zod\n[queryraw]: https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access\n[seed]: https://www.prisma.io/docs/guides/database/seed-database\n\n\n<hr />\n\nThank you for reading my blog.\n\nDon't hesitate to reach out via [email](mailto:hi@rockyourcode.com\") or [Mastodon](undefined)!\n"}